{"version":3,"file":"index.es.js","sources":["../src/constants.ts","../src/linkedList.ts","../src/baseChunkLogger.ts","../src/clientChunkLogger.ts","../src/serverChunkLogger.ts","../src/utils.ts"],"sourcesContent":["export const PINO_LOGGER_DEFAULTS = {\n  level: \"info\",\n};\n\nexport const PINO_CUSTOM_CONTEXT_KEY = \"custom_context\";\n\nexport const MAX_LOG_SIZE_IN_BYTES_DEFAULT = 1000 * 1024; // 1MB\n","class LogListNode {\n  private nodeValue: string;\n  private sizeInBytes: number;\n  public next: LogListNode | null;\n\n  constructor(value: string) {\n    this.nodeValue = value;\n    this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length;\n    this.next = null;\n  }\n\n  public get value() {\n    return this.nodeValue;\n  }\n\n  public get size() {\n    return this.sizeInBytes;\n  }\n}\n\nexport default class LogLinkedList {\n  private lengthInNodes: number;\n  private sizeInBytes: number;\n  private head: LogListNode | null;\n  private tail: LogListNode | null;\n  private maxSizeInBytes: number;\n\n  constructor(maxSizeInBytes: number) {\n    this.head = null;\n    this.tail = null;\n    this.lengthInNodes = 0;\n    this.maxSizeInBytes = maxSizeInBytes;\n    this.sizeInBytes = 0;\n  }\n\n  public append(value: string): void {\n    const newNode = new LogListNode(value);\n\n    if (newNode.size > this.maxSizeInBytes) {\n      throw new Error(\n        `[LinkedList] Value too big to insert into list: ${value} with size ${newNode.size}`,\n      );\n    }\n\n    while (this.size + newNode.size > this.maxSizeInBytes) {\n      this.shift();\n    }\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      if (this.tail) {\n        this.tail.next = newNode;\n      }\n      this.tail = newNode;\n    }\n    this.lengthInNodes++;\n    this.sizeInBytes += newNode.size;\n  }\n\n  public shift(): void {\n    if (!this.head) {\n      return;\n    }\n\n    const removedNode = this.head;\n    this.head = this.head.next;\n\n    if (!this.head) {\n      this.tail = null;\n    }\n\n    this.lengthInNodes--;\n    this.sizeInBytes -= removedNode.size;\n  }\n\n  public toArray(): string[] {\n    const array: string[] = [];\n    let currentNode = this.head;\n    while (currentNode !== null) {\n      array.push(currentNode.value);\n      currentNode = currentNode.next;\n    }\n    return array;\n  }\n\n  public get length() {\n    return this.lengthInNodes;\n  }\n\n  public get size() {\n    return this.sizeInBytes;\n  }\n\n  public toOrderedArray() {\n    return Array.from(this);\n  }\n\n  [Symbol.iterator](): Iterator<string> {\n    let node = this.head;\n\n    const next = (): IteratorResult<string> => {\n      if (!node) {\n        return { done: true, value: null };\n      }\n\n      const value = node.value;\n      node = node.next;\n\n      return { done: false, value };\n    };\n\n    return { next };\n  }\n}\n","import { MAX_LOG_SIZE_IN_BYTES_DEFAULT } from \"./constants\";\nimport type { LoggerOptions } from \"pino\";\nimport { levels } from \"pino\";\nimport LinkedList from \"./linkedList\";\nimport { safeJsonStringify } from \"@walletconnect/safe-json\";\n\nexport default class BaseChunkLogger {\n  private logs: LinkedList;\n  private level: LoggerOptions[\"level\"];\n  private levelValue: number;\n\n  private MAX_LOG_SIZE_IN_BYTES: number;\n\n  public constructor(\n    level: LoggerOptions[\"level\"],\n    MAX_LOG_SIZE_IN_BYTES: number = MAX_LOG_SIZE_IN_BYTES_DEFAULT,\n  ) {\n    this.level = level ?? \"error\";\n    this.levelValue = levels.values[this.level];\n\n    this.MAX_LOG_SIZE_IN_BYTES = MAX_LOG_SIZE_IN_BYTES;\n    this.logs = new LinkedList(this.MAX_LOG_SIZE_IN_BYTES);\n  }\n\n  public forwardToConsole(chunk: any, level: number) {\n    if (level === levels.values.error) {\n      // eslint-disable-next-line no-console\n      console.error(chunk);\n    } else if (level === levels.values.warn) {\n      // eslint-disable-next-line no-console\n      console.warn(chunk);\n    } else if (level === levels.values.debug) {\n      // eslint-disable-next-line no-console\n      console.debug(chunk);\n    } else if (level === levels.values.trace) {\n      // eslint-disable-next-line no-console\n      console.trace(chunk);\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(chunk);\n    }\n  }\n\n  public appendToLogs(chunk: any) {\n    this.logs.append(\n      safeJsonStringify({\n        timestamp: new Date().toISOString(),\n        log: chunk,\n      }),\n    );\n\n    // Based on https://github.com/pinojs/pino/blob/master/lib/constants.js\n    const level = typeof chunk === \"string\" ? JSON.parse(chunk).level : chunk.level;\n    if (level >= this.levelValue) {\n      this.forwardToConsole(chunk, level);\n    }\n  }\n\n  public getLogs() {\n    return this.logs;\n  }\n\n  public clearLogs() {\n    this.logs = new LinkedList(this.MAX_LOG_SIZE_IN_BYTES);\n  }\n\n  public getLogArray() {\n    return Array.from(this.logs);\n  }\n\n  public logsToBlob(extraMetadata: Record<string, string>) {\n    const logArray = this.getLogArray();\n    logArray.push(safeJsonStringify({ extraMetadata }));\n    const blob = new Blob(logArray, { type: \"application/json\" });\n    return blob;\n  }\n}\n","import { MAX_LOG_SIZE_IN_BYTES_DEFAULT } from \"./constants\";\nimport type { LoggerOptions } from \"pino\";\nimport BaseChunkLogger from \"./baseChunkLogger\";\n\nexport default class ClientChunkLogger {\n  private baseChunkLogger: BaseChunkLogger;\n\n  public constructor(\n    level: LoggerOptions[\"level\"],\n    MAX_LOG_SIZE_IN_BYTES: number = MAX_LOG_SIZE_IN_BYTES_DEFAULT,\n  ) {\n    this.baseChunkLogger = new BaseChunkLogger(level, MAX_LOG_SIZE_IN_BYTES);\n  }\n\n  public write(chunk: any): void {\n    this.baseChunkLogger.appendToLogs(chunk);\n  }\n\n  public getLogs() {\n    return this.baseChunkLogger.getLogs();\n  }\n\n  public clearLogs() {\n    this.baseChunkLogger.clearLogs();\n  }\n\n  public getLogArray() {\n    return this.baseChunkLogger.getLogArray();\n  }\n\n  public logsToBlob(extraMetadata: Record<string, string>) {\n    return this.baseChunkLogger.logsToBlob(extraMetadata);\n  }\n\n  public downloadLogsBlobInBrowser(extraMetadata: Record<string, string>) {\n    const url = URL.createObjectURL(this.logsToBlob(extraMetadata));\n    const anchor = document.createElement(\"a\");\n    anchor.href = url;\n    anchor.download = `walletconnect-logs-${new Date().toISOString()}.txt`;\n    document.body.appendChild(anchor);\n    anchor.click();\n    document.body.removeChild(anchor);\n    URL.revokeObjectURL(url);\n  }\n}\n","import { MAX_LOG_SIZE_IN_BYTES_DEFAULT } from \"./constants\";\nimport type { DestinationStream, LoggerOptions } from \"pino\";\nimport BaseChunkLogger from \"./baseChunkLogger\";\n\nexport default class ServerChunkLogger implements DestinationStream {\n  private baseChunkLogger: BaseChunkLogger;\n\n  public constructor(\n    level: LoggerOptions[\"level\"],\n    MAX_LOG_SIZE_IN_BYTES: number = MAX_LOG_SIZE_IN_BYTES_DEFAULT,\n  ) {\n    this.baseChunkLogger = new BaseChunkLogger(level, MAX_LOG_SIZE_IN_BYTES);\n  }\n\n  public write(chunk: any): void {\n    this.baseChunkLogger.appendToLogs(chunk);\n  }\n\n  public getLogs() {\n    return this.baseChunkLogger.getLogs();\n  }\n\n  public clearLogs() {\n    this.baseChunkLogger.clearLogs();\n  }\n\n  public getLogArray() {\n    return this.baseChunkLogger.getLogArray();\n  }\n\n  public logsToBlob(extraMetadata: Record<string, string>) {\n    return this.baseChunkLogger.logsToBlob(extraMetadata);\n  }\n}\n","import pino, { Logger, LoggerOptions } from \"pino\";\nimport { PINO_CUSTOM_CONTEXT_KEY, PINO_LOGGER_DEFAULTS } from \"./constants\";\nimport ClientChunkLogger from \"./clientChunkLogger\";\nimport ServerChunkLogger from \"./serverChunkLogger\";\nimport BaseChunkLogger from \"./baseChunkLogger\";\n\nexport interface ChunkLoggerController {\n  logsToBlob: BaseChunkLogger[\"logsToBlob\"];\n  getLogArray: () => string[];\n  clearLogs: () => void;\n  downloadLogsBlobInBrowser?: ClientChunkLogger[\"downloadLogsBlobInBrowser\"];\n}\n\nexport function getDefaultLoggerOptions(opts?: LoggerOptions): LoggerOptions {\n  return {\n    ...opts,\n    level: opts?.level || PINO_LOGGER_DEFAULTS.level,\n  };\n}\n\nexport function setLoggerContext(\n  logger: Logger,\n  context: string,\n  customContextKey: string = PINO_CUSTOM_CONTEXT_KEY,\n): Logger {\n  (logger as any)[customContextKey] = context;\n  return logger;\n}\n\nexport function getLoggerContext(\n  logger: Logger,\n  customContextKey: string = PINO_CUSTOM_CONTEXT_KEY,\n): string {\n  return (logger as any)[customContextKey] || \"\";\n}\n\nexport function formatChildLoggerContext(\n  logger: Logger,\n  childContext: string,\n  customContextKey: string = PINO_CUSTOM_CONTEXT_KEY,\n): string {\n  const parentContext = getLoggerContext(logger, customContextKey);\n  const context = parentContext.trim() ? `${parentContext}/${childContext}` : childContext;\n  return context;\n}\n\nexport function generateChildLogger(\n  logger: Logger,\n  childContext: string,\n  customContextKey: string = PINO_CUSTOM_CONTEXT_KEY,\n): Logger {\n  const context = formatChildLoggerContext(logger, childContext, customContextKey);\n  const child = logger.child({ context });\n  return setLoggerContext(child, context, customContextKey);\n}\n\nexport function generateClientLogger(params: { opts?: LoggerOptions; maxSizeInBytes?: number }): {\n  logger: Logger;\n  chunkLoggerController: ClientChunkLogger;\n} {\n  const clientLogger = new ClientChunkLogger(params.opts?.level, params.maxSizeInBytes);\n  const logger = pino({\n    ...params.opts,\n    level: \"trace\",\n    browser: {\n      ...params.opts?.browser,\n      write: (obj) => clientLogger.write(obj),\n    },\n  });\n\n  return { logger, chunkLoggerController: clientLogger };\n}\n\nexport function generateServerLogger(params: { maxSizeInBytes?: number; opts?: LoggerOptions }): {\n  logger: Logger;\n  chunkLoggerController: ServerChunkLogger;\n} {\n  const serverLogger = new ServerChunkLogger(params.opts?.level, params.maxSizeInBytes);\n  const logger = pino(\n    {\n      ...params.opts,\n      level: \"trace\",\n    },\n    serverLogger,\n  );\n\n  return { logger, chunkLoggerController: serverLogger };\n}\n\nexport function generatePlatformLogger(params: {\n  maxSizeInBytes?: number;\n  opts?: LoggerOptions;\n  loggerOverride?: string | Logger;\n}): {\n  logger: Logger;\n  chunkLoggerController: ChunkLoggerController | null;\n} {\n  if (typeof params.loggerOverride !== \"undefined\" && typeof params.loggerOverride !== \"string\") {\n    return {\n      logger: params.loggerOverride,\n      chunkLoggerController: null,\n    };\n  }\n\n  if (typeof window !== \"undefined\") {\n    return generateClientLogger(params);\n  } else {\n    return generateServerLogger(params);\n  }\n}\n"],"names":["l","LogListNode","value","__publicField","LogLinkedList","maxSizeInBytes","newNode","removedNode","array","currentNode","node","BaseChunkLogger","level","MAX_LOG_SIZE_IN_BYTES","MAX_LOG_SIZE_IN_BYTES_DEFAULT","levels","LinkedList","chunk","safeJsonStringify","extraMetadata","logArray","ClientChunkLogger","url","anchor","t","s","ServerChunkLogger","opts","__spreadProps","__spreadValues","PINO_LOGGER_DEFAULTS","logger","context","customContextKey","PINO_CUSTOM_CONTEXT_KEY","childContext","parentContext","child","params","_a","_b","clientLogger","pino","obj","serverLogger"],"mappings":"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"}