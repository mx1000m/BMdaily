{"version":3,"file":"useOnrampEventListeners.js","sources":["../../../src/buy/hooks/useOnrampEventListeners.ts"],"sourcesContent":["import type { EventMetadata } from '@/fund/types';\nimport type { LifecycleStatus } from '@/swap/types';\nimport { useCallback, useEffect } from 'react';\nimport type { TransactionReceipt } from 'viem';\nimport { setupOnrampEventListeners } from '../../fund/utils/setupOnrampEventListeners';\n\ntype UseOnrampLifecycleParams = {\n  updateLifecycleStatus: (status: LifecycleStatus) => void;\n  maxSlippage: number;\n  lifecycleStatus: LifecycleStatus;\n};\n\nexport const useOnrampEventListeners = ({\n  updateLifecycleStatus,\n  maxSlippage,\n  lifecycleStatus,\n}: UseOnrampLifecycleParams) => {\n  const handleOnrampEvent = useCallback(\n    (data: EventMetadata) => {\n      // Only update the lifecycle status if the current status is not 'transactionPending'\n      // Onramp emits a 'transition_view' event multiple times\n      if (\n        data.eventName === 'transition_view' &&\n        lifecycleStatus?.statusName !== 'transactionPending'\n      ) {\n        updateLifecycleStatus({\n          statusName: 'transactionPending',\n          statusData: {\n            isMissingRequiredField: false,\n            maxSlippage,\n          },\n        });\n      }\n    },\n    [maxSlippage, updateLifecycleStatus, lifecycleStatus?.statusName],\n  );\n\n  const handleOnrampSuccess = useCallback(() => {\n    updateLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        isMissingRequiredField: false,\n        transactionReceipt: {} as TransactionReceipt,\n        maxSlippage,\n      },\n    });\n  }, [maxSlippage, updateLifecycleStatus]);\n\n  const onPopupClose = useCallback(() => {\n    updateLifecycleStatus({\n      statusName: 'init',\n      statusData: {\n        isMissingRequiredField: false,\n        maxSlippage,\n      },\n    });\n  }, [updateLifecycleStatus, maxSlippage]);\n\n  useEffect(() => {\n    const unsubscribe = setupOnrampEventListeners({\n      onEvent: handleOnrampEvent,\n      onSuccess: handleOnrampSuccess,\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [handleOnrampEvent, handleOnrampSuccess]);\n\n  return { onPopupClose };\n};\n"],"names":[],"mappings":";;AAYO,MAAM,0BAA0B,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AACF,MAAgC;AAC9B,QAAM,oBAAoB;AAAA,IACxB,CAAC,SAAwB;AAGvB,UACE,KAAK,cAAc,sBACnB,mDAAiB,gBAAe,sBAChC;AACsB,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,wBAAwB;AAAA,YACxB;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MAAA;AAAA,IAEL;AAAA,IACA,CAAC,aAAa,uBAAuB,mDAAiB,UAAU;AAAA,EAClE;AAEM,QAAA,sBAAsB,YAAY,MAAM;AACtB,0BAAA;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY;AAAA,QACV,wBAAwB;AAAA,QACxB,oBAAoB,CAAC;AAAA,QACrB;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EAAA,GACA,CAAC,aAAa,qBAAqB,CAAC;AAEjC,QAAA,eAAe,YAAY,MAAM;AACf,0BAAA;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY;AAAA,QACV,wBAAwB;AAAA,QACxB;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EAAA,GACA,CAAC,uBAAuB,WAAW,CAAC;AAEvC,YAAU,MAAM;AACd,UAAM,cAAc,0BAA0B;AAAA,MAC5C,SAAS;AAAA,MACT,WAAW;AAAA,IAAA,CACZ;AAED,WAAO,MAAM;AACC,kBAAA;AAAA,IACd;AAAA,EAAA,GACC,CAAC,mBAAmB,mBAAmB,CAAC;AAE3C,SAAO,EAAE,aAAa;AACxB;"}