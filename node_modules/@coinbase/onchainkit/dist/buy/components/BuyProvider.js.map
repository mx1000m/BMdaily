{"version":3,"file":"BuyProvider.js","sources":["../../../src/buy/components/BuyProvider.tsx"],"sourcesContent":["'use client';\nimport { RequestContext } from '@/core/network/constants';\nimport { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { base } from 'viem/chains';\nimport { useAccount, useConfig, useSendTransaction } from 'wagmi';\nimport { useSwitchChain } from 'wagmi';\nimport { useSendCalls } from 'wagmi/experimental';\nimport { buildSwapTransaction } from '../../api/buildSwapTransaction';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport { BuyEvent } from '../../core/analytics/types';\nimport { useCapabilitiesSafe } from '../../internal/hooks/useCapabilitiesSafe';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { FALLBACK_DEFAULT_MAX_SLIPPAGE } from '../../swap/constants';\nimport { useAwaitCalls } from '../../swap/hooks/useAwaitCalls';\nimport type { LifecycleStatus, SwapUnit } from '../../swap/types';\nimport { isSwapError } from '../../swap/utils/isSwapError';\nimport { processSwapTransaction } from '../../swap/utils/processSwapTransaction';\nimport { GENERIC_ERROR_MESSAGE } from '../../transaction/constants';\nimport { isUserRejectedRequestError } from '../../transaction/utils/isUserRejectedRequestError';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { useBuyTokens } from '../hooks/useBuyTokens';\nimport { useOnrampEventListeners } from '../hooks/useOnrampEventListeners';\nimport { usePopupMonitor } from '../hooks/usePopupMonitor';\nimport { useResetBuyInputs } from '../hooks/useResetBuyInputs';\nimport type { BuyContextType, BuyProviderReact } from '../types';\nimport { getBuyQuote } from '../utils/getBuyQuote';\nimport { validateQuote } from '../utils/validateQuote';\n\nconst emptyContext = {} as BuyContextType;\n\nexport const BuyContext = createContext<BuyContextType>(emptyContext);\n\nexport function useBuyContext() {\n  const context = useContext(BuyContext);\n  if (context === emptyContext) {\n    throw new Error('useBuyContext must be used within a Buy component');\n  }\n  return context;\n}\n\nexport function BuyProvider({\n  children,\n  config = {\n    maxSlippage: FALLBACK_DEFAULT_MAX_SLIPPAGE,\n  },\n  disabled,\n  experimental,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n  toToken,\n  fromToken,\n}: BuyProviderReact) {\n  const { config: { paymaster } = { paymaster: undefined }, projectId } =\n    useOnchainKit();\n  const { address, chainId } = useAccount();\n  const { switchChainAsync } = useSwitchChain();\n  // Feature flags\n  const { useAggregator } = experimental;\n  // Core Hooks\n  const accountConfig = useConfig();\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const walletCapabilities = useCapabilitiesSafe({\n    chainId: base.id,\n  }); // Swap is only available on Base\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: 'init',\n      statusData: {\n        isMissingRequiredField: true,\n        maxSlippage: config.maxSlippage,\n      },\n    }); // Component lifecycle\n\n  const [transactionHash, setTransactionHash] = useState('');\n  const [hasHandledSuccess, setHasHandledSuccess] = useState(false);\n  const { from, fromETH, fromUSDC, to } = useBuyTokens(\n    toToken,\n    fromToken,\n    address,\n  );\n  const { sendTransactionAsync } = useSendTransaction(); // Sending the transaction (and approval, if applicable)\n  const { sendCallsAsync } = useSendCalls(); // Atomic Batch transactions (and approval, if applicable)\n\n  // Refreshes balances and inputs post-swap\n  const resetInputs = useResetBuyInputs({ fromETH, fromUSDC, from, to });\n  // For batched transactions, listens to and awaits calls from the Wallet server\n  const awaitCallsStatus = useAwaitCalls({\n    accountConfig,\n    lifecycleStatus,\n    updateLifecycleStatus,\n  });\n\n  const { onPopupClose } = useOnrampEventListeners({\n    updateLifecycleStatus,\n    maxSlippage: config.maxSlippage,\n    lifecycleStatus,\n  });\n\n  // used to detect when the popup is closed in order to stop loading state\n  const { startPopupMonitor } = usePopupMonitor(onPopupClose);\n\n  // Analytics\n  const { sendAnalytics } = useAnalytics();\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.(lifecycleStatus?.statusData.transactionReceipt);\n      const txHash =\n        lifecycleStatus.statusData.transactionReceipt?.transactionHash;\n      setTransactionHash(txHash);\n      setHasHandledSuccess(true);\n\n      sendAnalytics(BuyEvent.BuySuccess, {\n        address,\n        amount: Number(from?.amount),\n        from: from?.token?.address,\n        paymaster: !!paymaster,\n        to: to?.token?.address,\n        transactionHash: txHash,\n      });\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n    from,\n    to,\n    address,\n    paymaster,\n    sendAnalytics,\n  ]);\n\n  useEffect(() => {\n    if (!projectId) {\n      console.error(\n        'Project ID is required for this component, please set the projectId in the OnchainKitProvider',\n      );\n    }\n  }, [projectId]);\n\n  useEffect(() => {\n    // Reset inputs after status reset. `resetInputs` is dependent\n    // on 'from' and 'to' so moved to separate useEffect to\n    // prevents multiple calls to `onStatus`\n    if (lifecycleStatus.statusName === 'init' && hasHandledSuccess) {\n      setHasHandledSuccess(false);\n      resetInputs();\n    }\n  }, [hasHandledSuccess, lifecycleStatus.statusName, resetInputs]);\n\n  useEffect(() => {\n    // For batched transactions, `transactionApproved` will contain the calls ID\n    // We'll use the `useAwaitCalls` hook to listen to the call status from the wallet server\n    // This will update the lifecycle status to `success` once the calls are confirmed\n    if (\n      lifecycleStatus.statusName === 'transactionApproved' &&\n      lifecycleStatus.statusData.transactionType === 'Batched'\n    ) {\n      awaitCallsStatus();\n    }\n  }, [\n    awaitCallsStatus,\n    lifecycleStatus,\n    lifecycleStatus.statusData,\n    lifecycleStatus.statusName,\n  ]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    // Reset status to init after success has been handled\n    if (lifecycleStatus.statusName === 'success' && hasHandledSuccess) {\n      timer = setTimeout(() => {\n        updateLifecycleStatus({\n          statusName: 'init',\n          statusData: {\n            isMissingRequiredField: true,\n            maxSlippage: config.maxSlippage,\n          },\n        });\n      }, 3000);\n    }\n    return () => {\n      if (timer) {\n        return clearTimeout(timer);\n      }\n    };\n  }, [\n    config.maxSlippage,\n    hasHandledSuccess,\n    lifecycleStatus.statusName,\n    updateLifecycleStatus,\n  ]);\n\n  const handleAmountChange = useCallback(\n    async (amount: string) => {\n      if (\n        to.token === undefined ||\n        fromETH.token === undefined ||\n        fromUSDC.token === undefined\n      ) {\n        updateLifecycleStatus({\n          statusName: 'amountChange',\n          statusData: {\n            amountETH: fromETH.amount,\n            amountUSDC: fromUSDC.amount,\n            amountTo: to.amount,\n            tokenTo: to.token,\n            isMissingRequiredField: true,\n          },\n        });\n        return;\n      }\n\n      if (amount === '' || amount === '.' || Number.parseFloat(amount) === 0) {\n        to.setAmount('');\n        to.setAmountUSD('');\n        fromETH.setAmountUSD('');\n        fromUSDC.setAmountUSD('');\n        from?.setAmountUSD('');\n        return;\n      }\n\n      fromETH.setLoading(true);\n      fromUSDC.setLoading(true);\n      from?.setLoading(true);\n\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: {\n          // when fetching quote, the previous\n          // amount is irrelevant\n          amountTo: amount,\n          amountETH: '',\n          amountUSDC: '',\n          amountFrom: '',\n          tokenFromETH: fromETH.token,\n          tokenFromUSDC: fromUSDC.token,\n          tokenFrom: from?.token,\n          tokenTo: to.token,\n          // when fetching quote, the destination\n          // amount is missing\n          isMissingRequiredField: true,\n        },\n      });\n\n      try {\n        const maxSlippage = lifecycleStatus.statusData.maxSlippage;\n\n        const {\n          response: responseETH,\n          formattedFromAmount: formattedAmountETH,\n        } = await getBuyQuote({\n          amount,\n          from: fromETH.token,\n          maxSlippage: String(maxSlippage),\n          to: to.token,\n          useAggregator,\n          fromSwapUnit: fromETH,\n        });\n\n        const {\n          response: responseUSDC,\n          formattedFromAmount: formattedAmountUSDC,\n        } = await getBuyQuote({\n          amount,\n          from: fromUSDC.token,\n          maxSlippage: String(maxSlippage),\n          to: to.token,\n          useAggregator,\n          fromSwapUnit: fromUSDC,\n        });\n\n        const {\n          response: responseFrom,\n          formattedFromAmount: formattedAmountFrom,\n        } = await getBuyQuote({\n          amount,\n          from: from?.token,\n          maxSlippage: String(maxSlippage),\n          to: to.token,\n          useAggregator,\n          fromSwapUnit: from,\n        });\n\n        const { isValid } = validateQuote({\n          to,\n          responseETH,\n          responseUSDC,\n          responseFrom,\n          updateLifecycleStatus,\n        });\n\n        if (!isValid) {\n          return;\n        }\n\n        updateLifecycleStatus({\n          statusName: 'amountChange',\n          statusData: {\n            amountETH: formattedAmountETH,\n            amountUSDC: formattedAmountUSDC,\n            amountFrom: formattedAmountFrom || '',\n            amountTo: amount,\n            tokenFromETH: fromETH.token,\n            tokenFromUSDC: fromUSDC.token,\n            tokenFrom: from?.token,\n            tokenTo: to.token,\n            // if quote was fetched successfully, we\n            // have all required fields\n            isMissingRequiredField: !formattedAmountETH,\n          },\n        });\n      } catch (err) {\n        sendAnalytics(BuyEvent.BuyFailure, {\n          error: err instanceof Error ? err.message : String(err),\n          metadata: { amount },\n        });\n        updateLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmBPc02', // Transaction module BuyProvider component 01 error\n            error: JSON.stringify(err),\n            message: '',\n          },\n        });\n      } finally {\n        // reset loading state when quote request resolves\n        fromETH.setLoading(false);\n        fromUSDC.setLoading(false);\n        from?.setLoading(false);\n      }\n    },\n    [\n      to,\n      from,\n      fromETH,\n      fromUSDC,\n      useAggregator,\n      updateLifecycleStatus,\n      lifecycleStatus.statusData.maxSlippage,\n      sendAnalytics,\n    ],\n  );\n\n  const handleSubmit = useCallback(\n    async (from: SwapUnit) => {\n      if (!address || !from.token || !to.token || !from.amount) {\n        return;\n      }\n\n      try {\n        sendAnalytics(BuyEvent.BuyInitiated, {\n          amount: Number(from.amount),\n          token: from.token.symbol,\n        });\n\n        const maxSlippage = lifecycleStatus.statusData.maxSlippage;\n        const response = await buildSwapTransaction(\n          {\n            amount: from.amount,\n            fromAddress: address,\n            from: from.token,\n            maxSlippage: String(maxSlippage),\n            to: to.token,\n            useAggregator,\n          },\n          RequestContext.Buy,\n        );\n        if (isSwapError(response)) {\n          updateLifecycleStatus({\n            statusName: 'error',\n            statusData: {\n              code: response.code,\n              error: response.error,\n              message: response.message,\n            },\n          });\n          return;\n        }\n        await processSwapTransaction({\n          chainId,\n          config: accountConfig,\n          isSponsored,\n          paymaster: paymaster || '',\n          sendCallsAsync,\n          sendTransactionAsync,\n          swapTransaction: response,\n          switchChainAsync,\n          updateLifecycleStatus,\n          useAggregator,\n          walletCapabilities,\n        });\n      } catch (err) {\n        sendAnalytics(BuyEvent.BuyFailure, {\n          error: err instanceof Error ? err.message : String(err),\n          metadata: {\n            token: from.token.symbol,\n            amount: from.amount,\n          },\n        });\n        const errorMessage = isUserRejectedRequestError(err)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        updateLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmBPc03',\n            error: JSON.stringify(err),\n            message: errorMessage,\n          },\n        });\n      }\n    },\n    [\n      accountConfig,\n      address,\n      chainId,\n      isSponsored,\n      lifecycleStatus,\n      paymaster,\n      sendCallsAsync,\n      sendTransactionAsync,\n      switchChainAsync,\n      to.token,\n      updateLifecycleStatus,\n      useAggregator,\n      walletCapabilities,\n      sendAnalytics,\n    ],\n  );\n\n  const value = useValue({\n    address,\n    config,\n    disabled,\n    from,\n    fromETH,\n    fromUSDC,\n    handleAmountChange,\n    handleSubmit,\n    lifecycleStatus,\n    updateLifecycleStatus,\n    to,\n    setTransactionHash,\n    transactionHash,\n    isDropdownOpen,\n    setIsDropdownOpen,\n    toToken,\n    fromToken,\n    startPopupMonitor,\n  });\n\n  return <BuyContext.Provider value={value}>{children}</BuyContext.Provider>;\n}\n"],"names":["from"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAM,eAAe,CAAC;AAET,MAAA,aAAa,cAA8B,YAAY;AAE7D,SAAS,gBAAgB;AACxB,QAAA,UAAU,WAAW,UAAU;AACrC,MAAI,YAAY,cAAc;AACtB,UAAA,IAAI,MAAM,mDAAmD;AAAA,EAAA;AAE9D,SAAA;AACT;AAEO,SAAS,YAAY;AAAA,EAC1B;AAAA,EACA,SAAS;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAqB;AACb,QAAA,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,OAAU,GAAG,UAAU,IAClE,cAAc;AAChB,QAAM,EAAE,SAAS,QAAQ,IAAI,WAAW;AAClC,QAAA,EAAE,iBAAiB,IAAI,eAAe;AAEtC,QAAA,EAAE,kBAAkB;AAE1B,QAAM,gBAAgB,UAAU;AAChC,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,SAAS,KAAK;AAE1D,QAAM,qBAAqB,oBAAoB;AAAA,IAC7C,SAAS,KAAK;AAAA,EAAA,CACf;AACD,QAAM,CAAC,iBAAiB,qBAAqB,IAC3C,mBAAoC;AAAA,IAClC,YAAY;AAAA,IACZ,YAAY;AAAA,MACV,wBAAwB;AAAA,MACxB,aAAa,OAAO;AAAA,IAAA;AAAA,EACtB,CACD;AAEH,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAAS,EAAE;AACzD,QAAM,CAAC,mBAAmB,oBAAoB,IAAI,SAAS,KAAK;AAChE,QAAM,EAAE,MAAM,SAAS,UAAU,GAAO,IAAA;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACM,QAAA,EAAE,qBAAqB,IAAI,mBAAmB;AAC9C,QAAA,EAAE,eAAe,IAAI,aAAa;AAGxC,QAAM,cAAc,kBAAkB,EAAE,SAAS,UAAU,MAAM,IAAI;AAErE,QAAM,mBAAmB,cAAc;AAAA,IACrC;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAEK,QAAA,EAAE,aAAa,IAAI,wBAAwB;AAAA,IAC/C;AAAA,IACA,aAAa,OAAO;AAAA,IACpB;AAAA,EAAA,CACD;AAGD,QAAM,EAAE,kBAAA,IAAsB,gBAAgB,YAAY;AAGpD,QAAA,EAAE,cAAc,IAAI,aAAa;AAGvC,YAAU,MAAM;;AAEV,QAAA,gBAAgB,eAAe,SAAS;AAC1C,yCAAU,gBAAgB;AAAA,IAAU;AAGlC,QAAA,gBAAgB,eAAe,WAAW;AAChC,6CAAA,mDAAiB,WAAW;AAClC,YAAA,UACJ,qBAAgB,WAAW,uBAA3B,mBAA+C;AACjD,yBAAmB,MAAM;AACzB,2BAAqB,IAAI;AAEzB,oBAAc,SAAS,YAAY;AAAA,QACjC;AAAA,QACA,QAAQ,OAAO,6BAAM,MAAM;AAAA,QAC3B,OAAM,kCAAM,UAAN,mBAAa;AAAA,QACnB,WAAW,CAAC,CAAC;AAAA,QACb,KAAI,8BAAI,UAAJ,mBAAW;AAAA,QACf,iBAAiB;AAAA,MAAA,CAClB;AAAA,IAAA;AAGH,yCAAW;AAAA,EAAe,GACzB;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA;AAAA,IAChB,gBAAgB;AAAA;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,YAAU,MAAM;AACd,QAAI,CAAC,WAAW;AACN,cAAA;AAAA,QACN;AAAA,MACF;AAAA,IAAA;AAAA,EACF,GACC,CAAC,SAAS,CAAC;AAEd,YAAU,MAAM;AAIV,QAAA,gBAAgB,eAAe,UAAU,mBAAmB;AAC9D,2BAAqB,KAAK;AACd,kBAAA;AAAA,IAAA;AAAA,KAEb,CAAC,mBAAmB,gBAAgB,YAAY,WAAW,CAAC;AAE/D,YAAU,MAAM;AAId,QACE,gBAAgB,eAAe,yBAC/B,gBAAgB,WAAW,oBAAoB,WAC/C;AACiB,uBAAA;AAAA,IAAA;AAAA,EACnB,GACC;AAAA,IACD;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,EAAA,CACjB;AAED,YAAU,MAAM;AACV,QAAA;AAEA,QAAA,gBAAgB,eAAe,aAAa,mBAAmB;AACjE,cAAQ,WAAW,MAAM;AACD,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,wBAAwB;AAAA,YACxB,aAAa,OAAO;AAAA,UAAA;AAAA,QACtB,CACD;AAAA,SACA,GAAI;AAAA,IAAA;AAET,WAAO,MAAM;AACX,UAAI,OAAO;AACT,eAAO,aAAa,KAAK;AAAA,MAAA;AAAA,IAE7B;AAAA,EAAA,GACC;AAAA,IACD,OAAO;AAAA,IACP;AAAA,IACA,gBAAgB;AAAA,IAChB;AAAA,EAAA,CACD;AAED,QAAM,qBAAqB;AAAA,IACzB,OAAO,WAAmB;AAEtB,UAAA,GAAG,UAAU,UACb,QAAQ,UAAU,UAClB,SAAS,UAAU,QACnB;AACsB,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,WAAW,QAAQ;AAAA,YACnB,YAAY,SAAS;AAAA,YACrB,UAAU,GAAG;AAAA,YACb,SAAS,GAAG;AAAA,YACZ,wBAAwB;AAAA,UAAA;AAAA,QAC1B,CACD;AACD;AAAA,MAAA;AAGE,UAAA,WAAW,MAAM,WAAW,OAAO,OAAO,WAAW,MAAM,MAAM,GAAG;AACtE,WAAG,UAAU,EAAE;AACf,WAAG,aAAa,EAAE;AAClB,gBAAQ,aAAa,EAAE;AACvB,iBAAS,aAAa,EAAE;AACxB,qCAAM,aAAa;AACnB;AAAA,MAAA;AAGF,cAAQ,WAAW,IAAI;AACvB,eAAS,WAAW,IAAI;AACxB,mCAAM,WAAW;AAEK,4BAAA;AAAA,QACpB,YAAY;AAAA,QACZ,YAAY;AAAA;AAAA;AAAA,UAGV,UAAU;AAAA,UACV,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,YAAY;AAAA,UACZ,cAAc,QAAQ;AAAA,UACtB,eAAe,SAAS;AAAA,UACxB,WAAW,6BAAM;AAAA,UACjB,SAAS,GAAG;AAAA;AAAA;AAAA,UAGZ,wBAAwB;AAAA,QAAA;AAAA,MAC1B,CACD;AAEG,UAAA;AACI,cAAA,cAAc,gBAAgB,WAAW;AAEzC,cAAA;AAAA,UACJ,UAAU;AAAA,UACV,qBAAqB;AAAA,QACvB,IAAI,MAAM,YAAY;AAAA,UACpB;AAAA,UACA,MAAM,QAAQ;AAAA,UACd,aAAa,OAAO,WAAW;AAAA,UAC/B,IAAI,GAAG;AAAA,UACP;AAAA,UACA,cAAc;AAAA,QAAA,CACf;AAEK,cAAA;AAAA,UACJ,UAAU;AAAA,UACV,qBAAqB;AAAA,QACvB,IAAI,MAAM,YAAY;AAAA,UACpB;AAAA,UACA,MAAM,SAAS;AAAA,UACf,aAAa,OAAO,WAAW;AAAA,UAC/B,IAAI,GAAG;AAAA,UACP;AAAA,UACA,cAAc;AAAA,QAAA,CACf;AAEK,cAAA;AAAA,UACJ,UAAU;AAAA,UACV,qBAAqB;AAAA,QACvB,IAAI,MAAM,YAAY;AAAA,UACpB;AAAA,UACA,MAAM,6BAAM;AAAA,UACZ,aAAa,OAAO,WAAW;AAAA,UAC/B,IAAI,GAAG;AAAA,UACP;AAAA,UACA,cAAc;AAAA,QAAA,CACf;AAEK,cAAA,EAAE,QAAQ,IAAI,cAAc;AAAA,UAChC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAED,YAAI,CAAC,SAAS;AACZ;AAAA,QAAA;AAGoB,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,WAAW;AAAA,YACX,YAAY;AAAA,YACZ,YAAY,uBAAuB;AAAA,YACnC,UAAU;AAAA,YACV,cAAc,QAAQ;AAAA,YACtB,eAAe,SAAS;AAAA,YACxB,WAAW,6BAAM;AAAA,YACjB,SAAS,GAAG;AAAA;AAAA;AAAA,YAGZ,wBAAwB,CAAC;AAAA,UAAA;AAAA,QAC3B,CACD;AAAA,eACM,KAAK;AACZ,sBAAc,SAAS,YAAY;AAAA,UACjC,OAAO,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG;AAAA,UACtD,UAAU,EAAE,OAAO;AAAA,QAAA,CACpB;AACqB,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,MAAM;AAAA;AAAA,YACN,OAAO,KAAK,UAAU,GAAG;AAAA,YACzB,SAAS;AAAA,UAAA;AAAA,QACX,CACD;AAAA,MAAA,UACD;AAEA,gBAAQ,WAAW,KAAK;AACxB,iBAAS,WAAW,KAAK;AACzB,qCAAM,WAAW;AAAA,MAAK;AAAA,IAE1B;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB,WAAW;AAAA,MAC3B;AAAA,IAAA;AAAA,EAEJ;AAEA,QAAM,eAAe;AAAA,IACnB,OAAOA,UAAmB;AACpB,UAAA,CAAC,WAAW,CAACA,MAAK,SAAS,CAAC,GAAG,SAAS,CAACA,MAAK,QAAQ;AACxD;AAAA,MAAA;AAGE,UAAA;AACF,sBAAc,SAAS,cAAc;AAAA,UACnC,QAAQ,OAAOA,MAAK,MAAM;AAAA,UAC1B,OAAOA,MAAK,MAAM;AAAA,QAAA,CACnB;AAEK,cAAA,cAAc,gBAAgB,WAAW;AAC/C,cAAM,WAAW,MAAM;AAAA,UACrB;AAAA,YACE,QAAQA,MAAK;AAAA,YACb,aAAa;AAAA,YACb,MAAMA,MAAK;AAAA,YACX,aAAa,OAAO,WAAW;AAAA,YAC/B,IAAI,GAAG;AAAA,YACP;AAAA,UACF;AAAA,UACA,eAAe;AAAA,QACjB;AACI,YAAA,YAAY,QAAQ,GAAG;AACH,gCAAA;AAAA,YACpB,YAAY;AAAA,YACZ,YAAY;AAAA,cACV,MAAM,SAAS;AAAA,cACf,OAAO,SAAS;AAAA,cAChB,SAAS,SAAS;AAAA,YAAA;AAAA,UACpB,CACD;AACD;AAAA,QAAA;AAEF,cAAM,uBAAuB;AAAA,UAC3B;AAAA,UACA,QAAQ;AAAA,UACR;AAAA,UACA,WAAW,aAAa;AAAA,UACxB;AAAA,UACA;AAAA,UACA,iBAAiB;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAAA,eACM,KAAK;AACZ,sBAAc,SAAS,YAAY;AAAA,UACjC,OAAO,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG;AAAA,UACtD,UAAU;AAAA,YACR,OAAOA,MAAK,MAAM;AAAA,YAClB,QAAQA,MAAK;AAAA,UAAA;AAAA,QACf,CACD;AACD,cAAM,eAAe,2BAA2B,GAAG,IAC/C,oBACA;AACkB,8BAAA;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,MAAM;AAAA,YACN,OAAO,KAAK,UAAU,GAAG;AAAA,YACzB,SAAS;AAAA,UAAA;AAAA,QACX,CACD;AAAA,MAAA;AAAA,IAEL;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAEA,QAAM,QAAQ,SAAS;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,SAAQ,oBAAA,WAAW,UAAX,EAAoB,OAAe,SAAS,CAAA;AACtD;"}