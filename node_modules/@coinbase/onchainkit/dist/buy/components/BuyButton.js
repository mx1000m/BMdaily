'use client';
import { jsx } from "react/jsx-runtime";
import { useCallback, useMemo } from "react";
import { Spinner } from "../../internal/components/Spinner.js";
import { checkmarkSvg } from "../../internal/svg/checkmarkSvg.js";
import { CloseSvg } from "../../internal/svg/closeSvg.js";
import { icon, cn, color, text, pressable, border, background } from "../../styles/theme.js";
import "../../useOnchainKit.js";
import { ConnectWallet } from "../../wallet/components/ConnectWallet.js";
import "../../identity/components/IdentityProvider.js";
import "viem";
import "viem/chains";
import "viem/ens";
import "../../identity/constants.js";
import "@tanstack/react-query";
import "../../identity/utils/getAddress.js";
import "../../internal/svg/defaultAvatarSVG.js";
import "../../core/network/attestations.js";
import "../../identity/utils/easSupportedChains.js";
import "../../internal/svg/badgeSvg.js";
import "wagmi";
import "../../internal/svg/githubSvg.js";
import "../../internal/svg/twitterSvg.js";
import "../../internal/svg/warpcastSvg.js";
import "../../internal/svg/websiteSvg.js";
import "../../identity/utils/getAddresses.js";
import "../../wallet/components/WalletProvider.js";
import "@farcaster/frame-sdk";
import "../../token/components/TokenRow.js";
import "../../internal/components/TextInput.js";
import "../../internal/svg/searchIconSvg.js";
import "react-dom";
import "../../token/components/TokenSelectButton.js";
import "../../internal/svg/addForegroundSvg.js";
import "../../internal/svg/arrowUpRightSvg.js";
import "../../internal/svg/toggleSvg.js";
import "../../internal/svg/baseScanSvg.js";
import "../../internal/svg/disconnectSvg.js";
import "../../internal/svg/qrIconSvg.js";
import "../../internal/svg/refreshSvg.js";
import "../../token/constants.js";
import "../../internal/components/QrCode/useLogo.js";
import "qrcode";
import "../../internal/svg/backArrowSvg.js";
import "../../internal/svg/copySvg.js";
import "../../swap/components/SwapProvider.js";
import "../../internal/svg/appleSvg.js";
import "../../internal/svg/coinbaseLogoSvg.js";
import "../../internal/svg/creditCardSvg.js";
import "../../internal/svg/fundWallet.js";
import "../../internal/svg/swapSettings.js";
import "../../internal/svg/walletSvg.js";
import "../../core/network/getChainExplorer.js";
import "../../internal/components/amount-input/CurrencyLabel.js";
import "../../wallet/components/wallet-advanced-send/components/SendAmountInputTypeSwitch.js";
import "../../wallet/components/wallet-advanced-send/components/SendProvider.js";
import "../../transaction/components/TransactionProvider.js";
import "wagmi/experimental";
import "../../fund/components/FundCardProvider.js";
import "../../fund/components/FundCardPaymentMethodSelectRow.js";
import "../../fund/components/FundCardPaymentMethodSelectorToggle.js";
import "../../wallet/components/WalletDropdown.js";
import "../../internal/svg/portfolioSvg.js";
import "../../internal/svg/basenameSvg.js";
import "../../internal/svg/trustWalletSvg.js";
import "wagmi/connectors";
import "viem/account-abstraction";
import { useBuyContext } from "./BuyProvider.js";
function BuyButton() {
  const {
    address,
    disabled,
    setIsDropdownOpen,
    isDropdownOpen,
    from,
    fromETH,
    fromUSDC,
    to,
    lifecycleStatus: { statusName },
    updateLifecycleStatus
  } = useBuyContext();
  const isLoading = (to == null ? void 0 : to.loading) || (from == null ? void 0 : from.loading) || (fromETH == null ? void 0 : fromETH.loading) || (fromUSDC == null ? void 0 : fromUSDC.loading) || statusName === "transactionPending" || statusName === "transactionApproved";
  const isMissingRequiredField = !(to == null ? void 0 : to.amount) || !(to == null ? void 0 : to.token);
  const isDisabled = isLoading || disabled;
  const handleSubmit = useCallback(() => {
    if (isMissingRequiredField) {
      updateLifecycleStatus({
        statusName: "error",
        statusData: {
          code: "TmBPc05",
          error: "Missing required fields",
          message: "Complete the field to continue"
        }
      });
      return;
    }
    if (isDropdownOpen) {
      setIsDropdownOpen(false);
      return;
    }
    if (!isDropdownOpen) {
      setIsDropdownOpen(true);
    }
  }, [
    isMissingRequiredField,
    setIsDropdownOpen,
    isDropdownOpen,
    updateLifecycleStatus
  ]);
  const buttonContent = useMemo(() => {
    if (statusName === "success") {
      return checkmarkSvg;
    }
    if (isDropdownOpen) {
      return /* @__PURE__ */ jsx(CloseSvg, { className: icon.inverse });
    }
    return "Buy";
  }, [statusName, isDropdownOpen]);
  if (!isDisabled && !address) {
    return /* @__PURE__ */ jsx(ConnectWallet, { text: "Buy", className: "h-12 w-24 min-w-24" });
  }
  return /* @__PURE__ */ jsx(
    "button",
    {
      type: "button",
      className: cn(
        background.primary,
        border.radius,
        "flex rounded-xl",
        "h-12 w-24 items-center justify-center px-4 py-3",
        isDisabled && pressable.disabled,
        text.headline
      ),
      onClick: handleSubmit,
      "data-testid": "ockBuyButton_Button",
      disabled: isDisabled,
      children: isLoading ? /* @__PURE__ */ jsx(Spinner, {}) : /* @__PURE__ */ jsx("span", { className: cn(text.headline, color.inverse), children: buttonContent })
    }
  );
}
export {
  BuyButton
};
//# sourceMappingURL=BuyButton.js.map
