{"version":3,"file":"fetchMorphoApy.js","sources":["../../../src/earn/utils/fetchMorphoApy.ts"],"sourcesContent":["import type { Address } from 'viem';\nimport { base } from 'viem/chains';\n\nconst QUERY = `query($address: String!) {\n    vaultByAddress(address: $address, chainId: ${base.id} ) {\n        address\n        symbol\n        name\n        creationBlockNumber\n        creationTimestamp\n        creatorAddress\n        whitelisted\n        asset {\n          id\n          address\n          decimals\n          symbol\n        }\n        chain {\n          id\n          network\n        }\n        liquidity {\n          underlying\n        }\n        state {\n          id\n          apy\n          netApy\n          netApyWithoutRewards\n          totalAssets\n          totalAssetsUsd\n          fee\n          timelock\n          rewards {\n            amountPerSuppliedToken\n            supplyApr\n            yearlySupplyTokens\n            asset {\n              address\n              name\n              decimals\n            }\n        }\n      }\n    }\n  }`;\n\nexport type MorphoVaultApiResponse = {\n  data: {\n    vaultByAddress: {\n      address: Address;\n      symbol: string;\n      name: string;\n      creationBlockNumber: number;\n      creationTimestamp: number;\n      creatorAddress: string;\n      whitelisted: boolean;\n      asset: {\n        id: string;\n        address: Address;\n        decimals: number;\n        symbol: string;\n      };\n      chain: {\n        id: number;\n        network: string;\n      };\n      state: {\n        id: string;\n        apy: number;\n        netApy: number;\n        netApyWithoutRewards: number;\n        totalAssets: number;\n        totalAssetsUsd: number;\n        fee: number;\n        timelock: number;\n        rewards: Array<{\n          amountPerSuppliedToken: string;\n          supplyApr: number;\n          yearlySupplyTokens: string;\n          asset: {\n            address: Address;\n            name: string;\n            decimals: number;\n          };\n        }>;\n      };\n      liquidity: {\n        underlying: string;\n      };\n    };\n  };\n  errors: Array<{\n    message: string;\n    status: string;\n  }> | null;\n};\n\nexport async function fetchMorphoApy(vaultAddress: string) {\n  const response = await fetch('https://blue-api.morpho.org/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: QUERY,\n      variables: { address: vaultAddress },\n    }),\n  });\n  const { data, errors } = (await response.json()) as MorphoVaultApiResponse;\n\n  if (errors?.some((err) => err.status === 'BAD_USER_INPUT')) {\n    throw new Error(\n      'Vault not found. Ensure the address is a valid Morpho vault on Base.',\n    );\n  }\n\n  if (errors && errors?.length > 0) {\n    throw new Error(\n      'Error fetching Morpho vault data. Please try again later.',\n    );\n  }\n\n  return data.vaultByAddress;\n}\n"],"names":[],"mappings":";AAGA,MAAM,QAAQ;AAAA,iDACmC,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+FxD,eAAsB,eAAe,cAAsB;AACnD,QAAA,WAAW,MAAM,MAAM,uCAAuC;AAAA,IAClE,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU;AAAA,MACnB,OAAO;AAAA,MACP,WAAW,EAAE,SAAS,aAAa;AAAA,IACpC,CAAA;AAAA,EAAA,CACF;AACD,QAAM,EAAE,MAAM,OAAY,IAAA,MAAM,SAAS,KAAK;AAE9C,MAAI,iCAAQ,KAAK,CAAC,QAAQ,IAAI,WAAW,mBAAmB;AAC1D,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGE,MAAA,WAAU,iCAAQ,UAAS,GAAG;AAChC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGF,SAAO,KAAK;AACd;"}