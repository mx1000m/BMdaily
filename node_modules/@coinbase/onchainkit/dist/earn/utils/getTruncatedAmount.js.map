{"version":3,"file":"getTruncatedAmount.js","sources":["../../../src/earn/utils/getTruncatedAmount.ts"],"sourcesContent":["/**\n * Internal\n * This function should be used in place of our existing `getRoundedAmount`\n * It's built on Intl.NumberFormat which is more reliable than our existing method\n * Also allows us to specify the locale in the future if we want to support i18n\n * @param balance - The balance to round\n * @param fractionDigits - The number of fraction digits to round to\n * @returns The rounded balance\n */\nexport function getTruncatedAmount(\n  balance: string,\n  decimalPlaces: number,\n  notation: 'standard' | 'compact' = 'standard',\n) {\n  if (balance === '0') {\n    return balance;\n  }\n\n  const num = Number(balance);\n  const hasDecimals = num % 1 !== 0;\n  const decimals = balance.split('.')[1]?.length || 0;\n\n  // We have to do this because floating point precision is bad;\n  // We should use roundingMode: 'trunc' once we switch build tools and can target es2023\n  const truncated =\n    decimals > decimalPlaces\n      ? Math.trunc(num * 10 ** decimalPlaces) / 10 ** decimalPlaces\n      : num;\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'decimal',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: hasDecimals ? Math.min(decimalPlaces, decimals) : 0,\n    notation,\n    // TODO: implement this once we switch build tools and can target es2023\n    // roundingMode: 'trunc',\n  });\n\n  return formatter.format(truncated);\n}\n"],"names":[],"mappings":"AASO,SAAS,mBACd,SACA,eACA,WAAmC,YACnC;AAJK;AAKL,MAAI,YAAY,KAAK;AACZ,WAAA;AAAA,EAAA;AAGH,QAAA,MAAM,OAAO,OAAO;AACpB,QAAA,cAAc,MAAM,MAAM;AAChC,QAAM,aAAW,aAAQ,MAAM,GAAG,EAAE,CAAC,MAApB,mBAAuB,WAAU;AAI5C,QAAA,YACJ,WAAW,gBACP,KAAK,MAAM,MAAM,MAAM,aAAa,IAAI,MAAM,gBAC9C;AAEN,QAAM,YAAY,IAAI,KAAK,aAAa,SAAS;AAAA,IAC/C,OAAO;AAAA,IACP,uBAAuB;AAAA,IACvB,uBAAuB,cAAc,KAAK,IAAI,eAAe,QAAQ,IAAI;AAAA,IACzE;AAAA;AAAA;AAAA,EAAA,CAGD;AAEM,SAAA,UAAU,OAAO,SAAS;AACnC;"}