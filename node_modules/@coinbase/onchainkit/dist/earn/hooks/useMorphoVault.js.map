{"version":3,"file":"useMorphoVault.js","sources":["../../../src/earn/hooks/useMorphoVault.ts"],"sourcesContent":["'use client';\nimport { MORPHO_VAULT_ABI } from '@/earn/abis/morpho';\nimport { MORPHO_TOKEN_BASE_ADDRESS } from '@/earn/constants';\nimport calculateMorphoRewards from '@/earn/utils/calculateMorphoRewards';\nimport { fetchMorphoApy } from '@/earn/utils/fetchMorphoApy';\nimport { useQuery } from '@tanstack/react-query';\nimport { type Address, formatUnits } from 'viem';\nimport { base } from 'viem/chains';\nimport { useReadContract, useReadContracts } from 'wagmi';\n\nexport type UseMorphoVaultParams = {\n  vaultAddress: Address;\n  recipientAddress?: Address;\n};\n\nexport type UseMorphoVaultReturnType = {\n  vaultName: string | undefined;\n  status: 'pending' | 'success' | 'error';\n  /** Warns users if vault address is invalid */\n  error: Error | null;\n  /** Underlying asset of the vault */\n  asset: {\n    address: Address;\n    symbol: string | undefined;\n    decimals: number | undefined;\n  };\n  /** User's deposits in the vault, adjusted for decimals */\n  balance: string | undefined;\n  balanceStatus: 'pending' | 'success' | 'error';\n  refetchBalance: () => void;\n  /** Total net APY of the vault after all rewards and fees */\n  totalApy: number | undefined;\n  /** Native rewards of the vault (e.g. USDC if the asset is USDC) */\n  nativeApy: number | undefined;\n  /** Additional rewards (e.g. MORPHO) */\n  rewards:\n    | Array<{\n        asset: Address;\n        assetName: string;\n        apy: number;\n      }>\n    | undefined;\n  /** Vault fee, in percent (e.g. 0.03 for 3%) */\n  vaultFee: number | undefined;\n  /** Number of decimals of the vault's share tokens (not underlying asset) */\n  vaultDecimals: number | undefined;\n  /** Total deposits in the vault */\n  deposits: string | undefined;\n  /** Total liquidity available to borrow in the vault */\n  liquidity: string | undefined;\n};\n\n// eslint-disable-next-line complexity\nexport function useMorphoVault({\n  vaultAddress,\n  recipientAddress,\n}: UseMorphoVaultParams): UseMorphoVaultReturnType {\n  const { data, status } = useReadContracts({\n    contracts: [\n      {\n        abi: MORPHO_VAULT_ABI,\n        address: vaultAddress,\n        functionName: 'asset',\n        chainId: base.id, // Only Base is supported\n      },\n      {\n        abi: MORPHO_VAULT_ABI,\n        address: vaultAddress,\n        functionName: 'name',\n        chainId: base.id, // Only Base is supported\n      },\n      {\n        abi: MORPHO_VAULT_ABI,\n        address: vaultAddress,\n        functionName: 'decimals',\n        chainId: base.id, // Only Base is supported\n      },\n    ],\n    query: {\n      enabled: !!vaultAddress,\n    },\n  });\n\n  const assetAddress = data?.[0].result;\n  const vaultName = data?.[1].result;\n  const vaultDecimals = data?.[2].result;\n\n  // Fetching separately because user may not be connected\n  const {\n    data: balance,\n    status: balanceStatus,\n    refetch,\n  } = useReadContract({\n    abi: MORPHO_VAULT_ABI,\n    address: vaultAddress,\n    functionName: 'maxWithdraw',\n    args: [recipientAddress as Address],\n    chainId: base.id, // Only Base is supported\n    query: {\n      enabled: !!vaultAddress && !!recipientAddress,\n    },\n  });\n\n  const { data: vaultData, error } = useQuery({\n    queryKey: ['morpho-apy', vaultAddress],\n    queryFn: () => fetchMorphoApy(vaultAddress),\n  });\n\n  const morphoApr = vaultData?.state\n    ? calculateMorphoRewards(vaultData?.state)\n    : 0;\n\n  const formattedBalance =\n    balance && vaultData?.asset.decimals\n      ? formatUnits(balance, vaultData?.asset.decimals)\n      : undefined;\n\n  const formattedDeposits =\n    vaultData?.state.totalAssets && vaultData.asset.decimals\n      ? formatUnits(\n          BigInt(vaultData?.state.totalAssets),\n          vaultData.asset.decimals,\n        )\n      : undefined;\n\n  const formattedLiquidity =\n    vaultData?.liquidity.underlying && vaultData.asset.decimals\n      ? formatUnits(\n          BigInt(vaultData?.liquidity.underlying),\n          vaultData.asset.decimals,\n        )\n      : undefined;\n\n  return {\n    status,\n    error,\n    /** Balance is the amount of the underlying asset that the user has in the vault */\n    balance: formattedBalance,\n    balanceStatus,\n    refetchBalance: refetch,\n    asset: {\n      address: assetAddress as Address,\n      symbol: vaultData?.symbol,\n      decimals: vaultData?.asset.decimals,\n    },\n    vaultName,\n    vaultDecimals,\n    totalApy: vaultData?.state?.netApy,\n    nativeApy: vaultData?.state?.netApyWithoutRewards,\n    vaultFee: vaultData?.state?.fee,\n    deposits: formattedDeposits,\n    liquidity: formattedLiquidity,\n    rewards: [\n      {\n        asset: MORPHO_TOKEN_BASE_ADDRESS,\n        assetName: 'MORPHO',\n        apy: morphoApr,\n      },\n      ...(vaultData?.state?.rewards.map((reward) => ({\n        asset: reward.asset.address,\n        assetName: reward.asset.name,\n        apy: reward.supplyApr,\n      })) || []),\n    ],\n  };\n}\n"],"names":[],"mappings":";;;;;;;;AAqDO,SAAS,eAAe;AAAA,EAC7B;AAAA,EACA;AACF,GAAmD;;AACjD,QAAM,EAAE,MAAM,OAAO,IAAI,iBAAiB;AAAA,IACxC,WAAW;AAAA,MACT;AAAA,QACE,KAAK;AAAA,QACL,SAAS;AAAA,QACT,cAAc;AAAA,QACd,SAAS,KAAK;AAAA;AAAA,MAChB;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,SAAS;AAAA,QACT,cAAc;AAAA,QACd,SAAS,KAAK;AAAA;AAAA,MAChB;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,SAAS;AAAA,QACT,cAAc;AAAA,QACd,SAAS,KAAK;AAAA;AAAA,MAAA;AAAA,IAElB;AAAA,IACA,OAAO;AAAA,MACL,SAAS,CAAC,CAAC;AAAA,IAAA;AAAA,EACb,CACD;AAEK,QAAA,eAAe,6BAAO,GAAG;AACzB,QAAA,YAAY,6BAAO,GAAG;AACtB,QAAA,gBAAgB,6BAAO,GAAG;AAG1B,QAAA;AAAA,IACJ,MAAM;AAAA,IACN,QAAQ;AAAA,IACR;AAAA,MACE,gBAAgB;AAAA,IAClB,KAAK;AAAA,IACL,SAAS;AAAA,IACT,cAAc;AAAA,IACd,MAAM,CAAC,gBAA2B;AAAA,IAClC,SAAS,KAAK;AAAA;AAAA,IACd,OAAO;AAAA,MACL,SAAS,CAAC,CAAC,gBAAgB,CAAC,CAAC;AAAA,IAAA;AAAA,EAC/B,CACD;AAED,QAAM,EAAE,MAAM,WAAW,MAAA,IAAU,SAAS;AAAA,IAC1C,UAAU,CAAC,cAAc,YAAY;AAAA,IACrC,SAAS,MAAM,eAAe,YAAY;AAAA,EAAA,CAC3C;AAED,QAAM,aAAY,uCAAW,SACzB,uBAAuB,uCAAW,KAAK,IACvC;AAEE,QAAA,mBACJ,YAAW,uCAAW,MAAM,YACxB,YAAY,SAAS,uCAAW,MAAM,QAAQ,IAC9C;AAEN,QAAM,qBACJ,uCAAW,MAAM,gBAAe,UAAU,MAAM,WAC5C;AAAA,IACE,OAAO,uCAAW,MAAM,WAAW;AAAA,IACnC,UAAU,MAAM;AAAA,EAAA,IAElB;AAEN,QAAM,sBACJ,uCAAW,UAAU,eAAc,UAAU,MAAM,WAC/C;AAAA,IACE,OAAO,uCAAW,UAAU,UAAU;AAAA,IACtC,UAAU,MAAM;AAAA,EAAA,IAElB;AAEC,SAAA;AAAA,IACL;AAAA,IACA;AAAA;AAAA,IAEA,SAAS;AAAA,IACT;AAAA,IACA,gBAAgB;AAAA,IAChB,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ,uCAAW;AAAA,MACnB,UAAU,uCAAW,MAAM;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAU,4CAAW,UAAX,mBAAkB;AAAA,IAC5B,YAAW,4CAAW,UAAX,mBAAkB;AAAA,IAC7B,WAAU,4CAAW,UAAX,mBAAkB;AAAA,IAC5B,UAAU;AAAA,IACV,WAAW;AAAA,IACX,SAAS;AAAA,MACP;AAAA,QACE,OAAO;AAAA,QACP,WAAW;AAAA,QACX,KAAK;AAAA,MACP;AAAA,MACA,KAAI,4CAAW,UAAX,mBAAkB,QAAQ,IAAI,CAAC,YAAY;AAAA,QAC7C,OAAO,OAAO,MAAM;AAAA,QACpB,WAAW,OAAO,MAAM;AAAA,QACxB,KAAK,OAAO;AAAA,MACd,QAAO,CAAA;AAAA,IAAC;AAAA,EAEZ;AACF;"}