{"version":3,"file":"useDepositAnalytics.js","sources":["../../../src/earn/hooks/useDepositAnalytics.ts"],"sourcesContent":["import { useAnalytics } from '@/core/analytics/hooks/useAnalytics';\nimport { EarnEvent } from '@/core/analytics/types';\nimport { useEarnContext } from '@/earn/components/EarnProvider';\nimport type { LifecycleStatus } from '@/transaction/types';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nexport const useDepositAnalytics = (depositedAmount: string) => {\n  const [transactionState, setTransactionState] = useState<\n    LifecycleStatus['statusName'] | null\n  >(null);\n  // Undesirable, but required because Transaction emits multiple success and error events\n  const successSent = useRef(false);\n  const errorSent = useRef(false);\n  const { sendAnalytics } = useAnalytics();\n  const { vaultAddress, vaultToken, recipientAddress, depositAmount } =\n    useEarnContext();\n\n  const analyticsData = useMemo(\n    () => ({\n      amount: Number(depositAmount) || Number(depositedAmount), // fall back to depositedAmount to avoid sending 0\n      address: recipientAddress ?? '',\n      tokenAddress: vaultToken?.address ?? '',\n      vaultAddress,\n    }),\n    [\n      depositedAmount,\n      depositAmount,\n      recipientAddress,\n      vaultToken?.address,\n      vaultAddress,\n    ],\n  );\n\n  useEffect(() => {\n    if (transactionState === 'buildingTransaction') {\n      successSent.current = false; // in case user does a second deposit\n      sendAnalytics(EarnEvent.EarnDepositInitiated, analyticsData);\n    }\n\n    if (transactionState === 'success' && !successSent.current) {\n      successSent.current = true;\n      sendAnalytics(EarnEvent.EarnDepositSuccess, analyticsData);\n    }\n\n    if (transactionState === 'error' && !errorSent.current) {\n      errorSent.current = true;\n      sendAnalytics(EarnEvent.EarnDepositFailure, analyticsData);\n    }\n  }, [transactionState, analyticsData, sendAnalytics]);\n\n  return {\n    setTransactionState,\n  };\n};\n"],"names":[],"mappings":";;;;AAMa,MAAA,sBAAsB,CAAC,oBAA4B;AAC9D,QAAM,CAAC,kBAAkB,mBAAmB,IAAI,SAE9C,IAAI;AAEA,QAAA,cAAc,OAAO,KAAK;AAC1B,QAAA,YAAY,OAAO,KAAK;AACxB,QAAA,EAAE,cAAc,IAAI,aAAa;AACvC,QAAM,EAAE,cAAc,YAAY,kBAAkB,cAAA,IAClD,eAAe;AAEjB,QAAM,gBAAgB;AAAA,IACpB,OAAO;AAAA,MACL,QAAQ,OAAO,aAAa,KAAK,OAAO,eAAe;AAAA;AAAA,MACvD,SAAS,oBAAoB;AAAA,MAC7B,eAAc,yCAAY,YAAW;AAAA,MACrC;AAAA,IAAA;AAAA,IAEF;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA,yCAAY;AAAA,MACZ;AAAA,IAAA;AAAA,EAEJ;AAEA,YAAU,MAAM;AACd,QAAI,qBAAqB,uBAAuB;AAC9C,kBAAY,UAAU;AACR,oBAAA,UAAU,sBAAsB,aAAa;AAAA,IAAA;AAG7D,QAAI,qBAAqB,aAAa,CAAC,YAAY,SAAS;AAC1D,kBAAY,UAAU;AACR,oBAAA,UAAU,oBAAoB,aAAa;AAAA,IAAA;AAG3D,QAAI,qBAAqB,WAAW,CAAC,UAAU,SAAS;AACtD,gBAAU,UAAU;AACN,oBAAA,UAAU,oBAAoB,aAAa;AAAA,IAAA;AAAA,EAE1D,GAAA,CAAC,kBAAkB,eAAe,aAAa,CAAC;AAE5C,SAAA;AAAA,IACL;AAAA,EACF;AACF;"}