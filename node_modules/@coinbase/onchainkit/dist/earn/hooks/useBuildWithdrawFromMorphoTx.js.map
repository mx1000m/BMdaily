{"version":3,"file":"useBuildWithdrawFromMorphoTx.js","sources":["../../../src/earn/hooks/useBuildWithdrawFromMorphoTx.ts"],"sourcesContent":["'use client';\nimport { useMorphoVault } from '@/earn/hooks/useMorphoVault';\nimport { buildWithdrawFromMorphoTx } from '@/earn/utils/buildWithdrawFromMorphoTx';\nimport type { Call } from '@/transaction/types';\nimport { type Address, parseUnits } from 'viem';\n\nexport type UseBuildWithdrawFromMorphoTxParams = {\n  vaultAddress: Address;\n  recipientAddress?: Address;\n  amount: string;\n  tokenDecimals: number | undefined;\n};\n\n/**\n * Generates Call[] for a Morpho withdraw transaction\n * to be used with <Transaction />\n */\nexport function useBuildWithdrawFromMorphoTx({\n  vaultAddress,\n  amount,\n  recipientAddress,\n  tokenDecimals,\n}: UseBuildWithdrawFromMorphoTxParams): {\n  calls: Call[];\n} {\n  const { asset, balance, vaultDecimals } = useMorphoVault({\n    vaultAddress,\n    recipientAddress,\n  });\n\n  const amountIsGreaterThanBalance = Number(amount) > Number(balance);\n\n  if (\n    !asset ||\n    balance === undefined ||\n    !vaultDecimals ||\n    !recipientAddress ||\n    amountIsGreaterThanBalance ||\n    tokenDecimals === undefined\n  ) {\n    return {\n      calls: [],\n    };\n  }\n\n  const parsedAmount = parseUnits(amount, tokenDecimals);\n\n  const calls = buildWithdrawFromMorphoTx({\n    recipientAddress,\n    vaultAddress,\n    amount: parsedAmount,\n  });\n\n  return {\n    calls,\n  };\n}\n"],"names":[],"mappings":";;;AAiBO,SAAS,6BAA6B;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAEE;AACA,QAAM,EAAE,OAAO,SAAS,cAAA,IAAkB,eAAe;AAAA,IACvD;AAAA,IACA;AAAA,EAAA,CACD;AAED,QAAM,6BAA6B,OAAO,MAAM,IAAI,OAAO,OAAO;AAGhE,MAAA,CAAC,SACD,YAAY,UACZ,CAAC,iBACD,CAAC,oBACD,8BACA,kBAAkB,QAClB;AACO,WAAA;AAAA,MACL,OAAO,CAAA;AAAA,IACT;AAAA,EAAA;AAGI,QAAA,eAAe,WAAW,QAAQ,aAAa;AAErD,QAAM,QAAQ,0BAA0B;AAAA,IACtC;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,EAAA,CACT;AAEM,SAAA;AAAA,IACL;AAAA,EACF;AACF;"}