{"version":3,"file":"EarnProvider.js","sources":["../../../src/earn/components/EarnProvider.tsx"],"sourcesContent":["'use client';\nimport { useBuildDepositToMorphoTx } from '@/earn/hooks/useBuildDepositToMorphoTx';\nimport { getToken } from '@/earn/utils/getToken';\nimport { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport { useValue } from '@/internal/hooks/useValue';\nimport { useGetTokenBalance } from '@/wallet/hooks/useGetTokenBalance';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useAccount } from 'wagmi';\nimport { useBuildWithdrawFromMorphoTx } from '../hooks/useBuildWithdrawFromMorphoTx';\nimport { useMorphoVault } from '../hooks/useMorphoVault';\nimport type {\n  EarnContextType,\n  EarnProviderReact,\n  LifecycleStatus,\n} from '../types';\n\nconst EarnContext = createContext<EarnContextType | undefined>(undefined);\n\nexport function EarnProvider({\n  vaultAddress,\n  children,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n}: EarnProviderReact) {\n  if (!vaultAddress) {\n    throw new Error(\n      'vaultAddress is required. For a list of vaults, see: https://app.morpho.org/base/earn',\n    );\n  }\n\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: 'init',\n      statusData: null,\n    });\n\n  const { address } = useAccount();\n\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [depositAmount, setDepositAmount] = useState('');\n\n  useEffect(() => {\n    if (lifecycleStatus.statusName === 'error') {\n      onError?.(lifecycleStatus.statusData);\n    }\n    if (lifecycleStatus?.statusName === 'success') {\n      onSuccess?.(lifecycleStatus?.statusData?.transactionReceipts?.[0]);\n    }\n    onStatus?.(lifecycleStatus);\n  }, [lifecycleStatus, onStatus, onError, onSuccess]);\n\n  const {\n    asset,\n    balance: depositedBalance,\n    balanceStatus: depositedBalanceStatus,\n    refetchBalance: refetchDepositedBalance,\n    totalApy,\n    nativeApy,\n    vaultFee,\n    vaultName,\n    deposits,\n    liquidity,\n    rewards,\n    error,\n  } = useMorphoVault({\n    vaultAddress,\n    recipientAddress: address,\n  });\n\n  const vaultToken = asset\n    ? getToken({\n        address: asset.address,\n        symbol: asset.symbol,\n        name: asset.symbol,\n        decimals: asset.decimals,\n      })\n    : undefined;\n\n  const {\n    convertedBalance: walletBalance,\n    status: walletBalanceStatus,\n    refetch: refetchWalletBalance,\n  } = useGetTokenBalance(address, vaultToken);\n\n  const { calls: depositCalls } = useBuildDepositToMorphoTx({\n    vaultAddress,\n    amount: depositAmount,\n    recipientAddress: address,\n  });\n\n  const { calls: withdrawCalls } = useBuildWithdrawFromMorphoTx({\n    vaultAddress,\n    amount: withdrawAmount,\n    recipientAddress: address,\n    tokenDecimals: vaultToken?.decimals,\n  });\n\n  // Lifecycle statuses\n  const handleDepositAmount = useCallback(\n    async (amount: string) => {\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: { amount: amount, token: vaultToken },\n      });\n\n      setDepositAmount(amount);\n    },\n    [updateLifecycleStatus, vaultToken],\n  );\n\n  const handleWithdrawAmount = useCallback(\n    async (amount: string) => {\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: { amount: amount, token: vaultToken },\n      });\n\n      setWithdrawAmount(amount);\n    },\n    [updateLifecycleStatus, vaultToken],\n  );\n\n  // Validating input amounts\n  const depositAmountError = useMemo(() => {\n    if (!depositAmount) {\n      return null;\n    }\n    if (Number(depositAmount) <= 0) {\n      return 'Must be greater than 0';\n    }\n    if (Number(depositAmount) > Number(walletBalance)) {\n      return 'Amount exceeds the balance';\n    }\n    return null;\n  }, [depositAmount, walletBalance]);\n\n  const withdrawAmountError = useMemo(() => {\n    if (!withdrawAmount) {\n      return null;\n    }\n    if (Number(withdrawAmount) === 0) {\n      return 'Must be greater than 0';\n    }\n    if (Number(withdrawAmount) > Number(depositedBalance)) {\n      return 'Amount exceeds the balance';\n    }\n    return null;\n  }, [withdrawAmount, depositedBalance]);\n\n  const value = useValue<EarnContextType>({\n    error,\n    recipientAddress: address,\n    vaultAddress,\n    vaultToken,\n    vaultName,\n    deposits,\n    liquidity,\n    depositedBalance,\n    depositedBalanceStatus,\n    refetchDepositedBalance,\n    depositAmount,\n    setDepositAmount: handleDepositAmount,\n    depositAmountError,\n    withdrawAmount,\n    setWithdrawAmount: handleWithdrawAmount,\n    withdrawAmountError,\n    walletBalance,\n    walletBalanceStatus,\n    refetchWalletBalance,\n    apy: totalApy,\n    nativeApy,\n    vaultFee,\n    rewards,\n    // TODO: update when we have logic to fetch interest\n    interestEarned: '',\n    withdrawCalls,\n    depositCalls,\n    lifecycleStatus,\n    updateLifecycleStatus,\n    isSponsored,\n  });\n\n  return <EarnContext.Provider value={value}>{children}</EarnContext.Provider>;\n}\n\nexport function useEarnContext() {\n  const context = useContext(EarnContext);\n  if (!context) {\n    throw new Error('useEarnContext must be used within an EarnProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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"}