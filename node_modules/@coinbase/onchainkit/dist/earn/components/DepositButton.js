'use client';
import { jsx } from "react/jsx-runtime";
import { useDepositAnalytics } from "../hooks/useDepositAnalytics.js";
import { cn } from "../../styles/theme.js";
import { Transaction } from "../../transaction/components/Transaction.js";
import { TransactionButton } from "../../transaction/components/TransactionButton.js";
import "../../transaction/components/TransactionProvider.js";
import { useState, useCallback } from "react";
import "wagmi";
import "wagmi/experimental";
import "../../core/network/getChainExplorer.js";
import "../../useOnchainKit.js";
import { ConnectWallet } from "../../wallet/components/ConnectWallet.js";
import "../../identity/components/IdentityProvider.js";
import "viem";
import "viem/chains";
import "viem/ens";
import "../../identity/constants.js";
import "@tanstack/react-query";
import "../../identity/utils/getAddress.js";
import "../../internal/svg/defaultAvatarSVG.js";
import "../../core/network/attestations.js";
import "../../identity/utils/easSupportedChains.js";
import "../../internal/svg/badgeSvg.js";
import "../../internal/svg/githubSvg.js";
import "../../internal/svg/twitterSvg.js";
import "../../internal/svg/warpcastSvg.js";
import "../../internal/svg/websiteSvg.js";
import "../../identity/utils/getAddresses.js";
import "../../wallet/components/WalletProvider.js";
import "@farcaster/frame-sdk";
import "../../token/components/TokenRow.js";
import "../../internal/components/TextInput.js";
import "../../internal/svg/searchIconSvg.js";
import "react-dom";
import "../../token/components/TokenSelectButton.js";
import "../../internal/svg/addForegroundSvg.js";
import "../../internal/svg/arrowUpRightSvg.js";
import "../../internal/svg/toggleSvg.js";
import "../../internal/svg/baseScanSvg.js";
import "../../internal/svg/disconnectSvg.js";
import "../../internal/svg/qrIconSvg.js";
import "../../internal/svg/refreshSvg.js";
import "../../token/constants.js";
import "../../internal/components/QrCode/useLogo.js";
import "qrcode";
import "../../internal/svg/backArrowSvg.js";
import "../../internal/svg/copySvg.js";
import "../../swap/components/SwapProvider.js";
import "../../internal/svg/appleSvg.js";
import "../../internal/svg/coinbaseLogoSvg.js";
import "../../internal/svg/creditCardSvg.js";
import "../../internal/svg/fundWallet.js";
import "../../internal/svg/swapSettings.js";
import "../../internal/svg/walletSvg.js";
import "../../internal/components/amount-input/CurrencyLabel.js";
import "../../wallet/components/wallet-advanced-send/components/SendAmountInputTypeSwitch.js";
import "../../wallet/components/wallet-advanced-send/components/SendProvider.js";
import "../../fund/components/FundCardProvider.js";
import "../../fund/components/FundCardPaymentMethodSelectRow.js";
import "../../fund/components/FundCardPaymentMethodSelectorToggle.js";
import "../../wallet/components/WalletDropdown.js";
import "../../internal/svg/portfolioSvg.js";
import "../../internal/svg/basenameSvg.js";
import "../../internal/svg/trustWalletSvg.js";
import "wagmi/connectors";
import "viem/account-abstraction";
import { useEarnContext } from "./EarnProvider.js";
function DepositButton({ className }) {
  const {
    recipientAddress: address,
    vaultToken,
    depositCalls,
    depositAmount,
    setDepositAmount,
    depositAmountError,
    updateLifecycleStatus,
    refetchWalletBalance,
    isSponsored
  } = useEarnContext();
  const [depositedAmount, setDepositedAmount] = useState("");
  const { setTransactionState } = useDepositAnalytics(depositedAmount);
  const handleOnStatus = useCallback(
    (status) => {
      setTransactionState(status.statusName);
      if (status.statusName === "transactionPending") {
        updateLifecycleStatus({ statusName: "transactionPending" });
      }
      if (status.statusName === "transactionLegacyExecuted" || status.statusName === "success" || status.statusName === "error") {
        updateLifecycleStatus(status);
      }
    },
    [updateLifecycleStatus, setTransactionState]
  );
  const handleOnSuccess = useCallback(
    (res) => {
      if (res.transactionReceipts[0] && res.transactionReceipts[0].status === "success") {
        if (depositAmount) {
          setDepositedAmount(depositAmount);
        }
        setDepositAmount("");
        refetchWalletBalance();
      }
    },
    [depositAmount, setDepositAmount, refetchWalletBalance]
  );
  if (!address) {
    return /* @__PURE__ */ jsx(
      ConnectWallet,
      {
        className: cn("w-full", className),
        text: "Connect to deposit"
      }
    );
  }
  return /* @__PURE__ */ jsx(
    Transaction,
    {
      className,
      calls: depositCalls,
      onStatus: handleOnStatus,
      onSuccess: handleOnSuccess,
      isSponsored,
      resetAfter: 3e3,
      children: /* @__PURE__ */ jsx(
        TransactionButton,
        {
          text: depositAmountError ?? "Deposit",
          successOverride: {
            text: `Deposited ${depositedAmount} ${vaultToken == null ? void 0 : vaultToken.symbol}`
          },
          disabled: !!depositAmountError || !depositAmount
        }
      )
    }
  );
}
export {
  DepositButton
};
//# sourceMappingURL=DepositButton.js.map
