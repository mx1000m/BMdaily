{"version":3,"file":"WithdrawButton.js","sources":["../../../src/earn/components/WithdrawButton.tsx"],"sourcesContent":["'use client';\nimport { useWithdrawAnalytics } from '@/earn/hooks/useWithdrawAnalytics';\nimport { cn } from '@/styles/theme';\nimport {\n  type LifecycleStatus,\n  Transaction,\n  TransactionButton,\n  type TransactionResponse,\n} from '@/transaction';\nimport { ConnectWallet } from '@/wallet';\nimport { useCallback, useState } from 'react';\nimport type { WithdrawButtonReact } from '../types';\nimport { useEarnContext } from './EarnProvider';\n\nexport function WithdrawButton({ className }: WithdrawButtonReact) {\n  const {\n    recipientAddress: address,\n    withdrawCalls,\n    withdrawAmount,\n    setWithdrawAmount,\n    updateLifecycleStatus,\n    refetchDepositedBalance,\n    withdrawAmountError,\n    vaultToken,\n    isSponsored,\n  } = useEarnContext();\n  const [withdrawnAmount, setWithdrawnAmount] = useState('');\n  const { setTransactionState } = useWithdrawAnalytics(withdrawnAmount);\n\n  const handleOnStatus = useCallback(\n    (status: LifecycleStatus) => {\n      setTransactionState(status.statusName);\n      if (status.statusName === 'transactionPending') {\n        updateLifecycleStatus({ statusName: 'transactionPending' });\n      }\n\n      if (\n        status.statusName === 'transactionLegacyExecuted' ||\n        status.statusName === 'success' ||\n        status.statusName === 'error'\n      ) {\n        updateLifecycleStatus(status);\n      }\n    },\n    [updateLifecycleStatus, setTransactionState],\n  );\n\n  const handleOnSuccess = useCallback(\n    (res: TransactionResponse) => {\n      if (\n        res.transactionReceipts[0] &&\n        res.transactionReceipts[0].status === 'success'\n      ) {\n        if (withdrawAmount) {\n          setWithdrawnAmount(withdrawAmount);\n        }\n        setWithdrawAmount('');\n        refetchDepositedBalance();\n      }\n    },\n    [setWithdrawAmount, refetchDepositedBalance, withdrawAmount],\n  );\n\n  if (!address) {\n    return (\n      <ConnectWallet\n        className={cn('w-full', className)}\n        text=\"Connect to withdraw\"\n      />\n    );\n  }\n\n  return (\n    <Transaction\n      className={className}\n      calls={withdrawCalls}\n      onStatus={handleOnStatus}\n      onSuccess={handleOnSuccess}\n      isSponsored={isSponsored}\n      resetAfter={3_000}\n    >\n      <TransactionButton\n        text={withdrawAmountError ?? 'Withdraw'}\n        successOverride={{\n          text: `Withdrew ${withdrawnAmount} ${vaultToken?.symbol}`,\n        }}\n        disabled={!!withdrawAmountError || !withdrawAmount}\n      />\n    </Transaction>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcgB,SAAA,eAAe,EAAE,aAAkC;AAC3D,QAAA;AAAA,IACJ,kBAAkB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,eAAe;AACnB,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAAS,EAAE;AACzD,QAAM,EAAE,oBAAA,IAAwB,qBAAqB,eAAe;AAEpE,QAAM,iBAAiB;AAAA,IACrB,CAAC,WAA4B;AAC3B,0BAAoB,OAAO,UAAU;AACjC,UAAA,OAAO,eAAe,sBAAsB;AACxB,8BAAA,EAAE,YAAY,sBAAsB;AAAA,MAAA;AAI1D,UAAA,OAAO,eAAe,+BACtB,OAAO,eAAe,aACtB,OAAO,eAAe,SACtB;AACA,8BAAsB,MAAM;AAAA,MAAA;AAAA,IAEhC;AAAA,IACA,CAAC,uBAAuB,mBAAmB;AAAA,EAC7C;AAEA,QAAM,kBAAkB;AAAA,IACtB,CAAC,QAA6B;AAE1B,UAAA,IAAI,oBAAoB,CAAC,KACzB,IAAI,oBAAoB,CAAC,EAAE,WAAW,WACtC;AACA,YAAI,gBAAgB;AAClB,6BAAmB,cAAc;AAAA,QAAA;AAEnC,0BAAkB,EAAE;AACI,gCAAA;AAAA,MAAA;AAAA,IAE5B;AAAA,IACA,CAAC,mBAAmB,yBAAyB,cAAc;AAAA,EAC7D;AAEA,MAAI,CAAC,SAAS;AAEV,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW,GAAG,UAAU,SAAS;AAAA,QACjC,MAAK;AAAA,MAAA;AAAA,IACP;AAAA,EAAA;AAKF,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA,OAAO;AAAA,MACP,UAAU;AAAA,MACV,WAAW;AAAA,MACX;AAAA,MACA,YAAY;AAAA,MAEZ,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,uBAAuB;AAAA,UAC7B,iBAAiB;AAAA,YACf,MAAM,YAAY,eAAe,IAAI,yCAAY,MAAM;AAAA,UACzD;AAAA,UACA,UAAU,CAAC,CAAC,uBAAuB,CAAC;AAAA,QAAA;AAAA,MAAA;AAAA,IACtC;AAAA,EACF;AAEJ;"}