{"version":3,"file":"useWithdraw.js","sources":["../../../../src/appchain/bridge/hooks/useWithdraw.ts"],"sourcesContent":["'use client';\nimport { useAnalytics } from '@/core/analytics/hooks/useAnalytics';\nimport { AppchainEvent } from '@/core/analytics/types';\nimport { useCallback, useState } from 'react';\nimport { type Hex, erc20Abi, keccak256, parseEther, parseUnits } from 'viem';\nimport { getWithdrawalHashStorageSlot, getWithdrawals } from 'viem/op-stack';\nimport { useAccount, useConfig, useSwitchChain, useWriteContract } from 'wagmi';\nimport {\n  getBlock,\n  getProof,\n  readContract,\n  waitForTransactionReceipt,\n} from 'wagmi/actions';\nimport {\n  L2OutputOracleABI,\n  L2_TO_L1_MESSAGE_PASSER_ABI,\n  OptimismPortalABI,\n  StandardBridgeABI,\n} from '../abi';\nimport {\n  APPCHAIN_BRIDGE_ADDRESS,\n  APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS,\n  EXTRA_DATA,\n  MIN_GAS_LIMIT,\n  OUTPUT_ROOT_PROOF_VERSION,\n} from '../constants';\nimport type { UseWithdrawParams } from '../types';\nimport { getOutput } from '../utils/getOutput';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\nimport { maybeAddProofNode } from '../utils/maybeAddProofNode';\n\nexport const useWithdraw = ({\n  config,\n  chain,\n  bridgeParams,\n}: UseWithdrawParams) => {\n  const { chainId } = useAccount();\n  const { switchChainAsync } = useSwitchChain();\n  const { writeContractAsync, data } = useWriteContract();\n  const wagmiConfig = useConfig();\n  const [withdrawStatus, setWithdrawStatus] = useState<\n    | 'idle'\n    | 'withdrawPending'\n    | 'withdrawSuccess'\n    | 'withdrawRejected'\n    | 'claimReady'\n    | 'claimPending'\n    | 'claimSuccess'\n    | 'claimRejected'\n    | 'error'\n  >('idle');\n  const [withdrawal, setWithdrawal] = useState<ReturnType<\n    typeof getWithdrawals\n  > | null>(null);\n  const [finalizedWithdrawalTxHash, setFinalizedWithdrawalTxHash] = useState<\n    Hex | undefined\n  >(undefined);\n  const { sendAnalytics } = useAnalytics();\n\n  const resetWithdrawStatus = useCallback(() => {\n    setWithdrawStatus('idle');\n    setWithdrawal(null);\n  }, []);\n\n  const withdraw = async () => {\n    if (!bridgeParams.recipient) {\n      throw new Error('Recipient is required');\n    }\n\n    sendAnalytics(AppchainEvent.AppchainBridgeWithdrawInitiated, {\n      amount: bridgeParams.amount,\n      tokenAddress: bridgeParams.token.address,\n      recipient: bridgeParams.recipient,\n    });\n\n    setWithdrawStatus('withdrawPending');\n    try {\n      // Switch networks to the appchain\n      if (chainId !== config.chainId) {\n        await switchChainAsync({ chainId: config.chainId });\n      }\n\n      let transactionHash: Hex = '0x';\n\n      // Custom gas token\n      if (bridgeParams.token.isCustomGasToken) {\n        transactionHash = await writeContractAsync({\n          abi: L2_TO_L1_MESSAGE_PASSER_ABI,\n          functionName: 'initiateWithdrawal',\n          args: [bridgeParams.recipient, BigInt(MIN_GAS_LIMIT), EXTRA_DATA],\n          address: APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS,\n          chainId: config.chainId,\n          value: parseEther(bridgeParams.amount),\n        });\n      } else if (bridgeParams.token.address === '') {\n        // Native ETH\n        transactionHash = await writeContractAsync({\n          abi: StandardBridgeABI,\n          functionName: 'bridgeETHTo',\n          args: [bridgeParams.recipient, MIN_GAS_LIMIT, EXTRA_DATA],\n          address: APPCHAIN_BRIDGE_ADDRESS,\n          value: parseEther(bridgeParams.amount),\n          chainId: config.chainId,\n        });\n      } else {\n        // ERC-20\n        if (!bridgeParams.token.remoteToken) {\n          throw new Error('Remote token is required');\n        }\n\n        const formattedAmount = parseUnits(\n          bridgeParams.amount,\n          bridgeParams.token.decimals,\n        );\n        const approveTx = await writeContractAsync({\n          abi: erc20Abi,\n          functionName: 'approve',\n          args: [APPCHAIN_BRIDGE_ADDRESS, formattedAmount],\n          address: bridgeParams.token.address,\n          chainId: config.chainId,\n        });\n\n        await waitForTransactionReceipt(wagmiConfig, {\n          hash: approveTx,\n          confirmations: 1,\n        });\n\n        transactionHash = await writeContractAsync({\n          abi: StandardBridgeABI,\n          functionName: 'bridgeERC20To',\n          args: [\n            bridgeParams.token.remoteToken,\n            bridgeParams.token.address,\n            bridgeParams.recipient,\n            formattedAmount,\n            MIN_GAS_LIMIT,\n            EXTRA_DATA,\n          ],\n          address: APPCHAIN_BRIDGE_ADDRESS,\n          chainId: config.chainId,\n        });\n      }\n\n      sendAnalytics(AppchainEvent.AppchainBridgeWithdrawSuccess, {\n        amount: bridgeParams.amount,\n        tokenAddress: bridgeParams.token.address,\n        recipient: bridgeParams.recipient,\n      });\n\n      setWithdrawStatus('withdrawSuccess');\n      return transactionHash;\n    } catch (error) {\n      if (isUserRejectedRequestError(error)) {\n        console.error('User rejected request');\n        setWithdrawStatus('withdrawRejected');\n      } else {\n        console.error('Error', error);\n        setWithdrawStatus('error');\n        /* v8 ignore next 3 */\n        sendAnalytics(AppchainEvent.AppchainBridgeWithdrawFailure, {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  };\n\n  const waitForWithdrawal = async (txHash?: Hex) => {\n    const hash = txHash || data;\n    if (!hash) {\n      return;\n    }\n\n    const withdrawalReceipt = await waitForTransactionReceipt(wagmiConfig, {\n      // By default, use the withdrawal hash from Wagmi hook\n      // If the user has resumed a withdrawal transaction, use the txHash provided\n      hash,\n      confirmations: 1,\n      chainId: config.chainId,\n    });\n\n    // Poll until the required block number is reached\n    const pollInterval = 1000; // 1 second\n    const maxAttempts = 60; // Prevent infinite polling, poll for maximum 1 minute\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n      const latestBlockNumber = await readContract(wagmiConfig, {\n        address: config.contracts.l2OutputOracle,\n        abi: L2OutputOracleABI,\n        functionName: 'latestBlockNumber',\n        chainId: chain.id,\n      });\n      if (latestBlockNumber >= withdrawalReceipt.blockNumber) {\n        setWithdrawStatus('claimReady');\n        const [_withdrawal] = getWithdrawals(withdrawalReceipt);\n        setWithdrawal([_withdrawal]);\n        return;\n      }\n      await new Promise((resolve) => setTimeout(resolve, pollInterval));\n      attempts++;\n      /* v8 ignore start */\n    }\n    sendAnalytics(AppchainEvent.AppchainBridgeWaitForClaimFailure, {\n      transactionHash: txHash || data || '0x',\n    });\n    /* v8 ignore stop */\n  };\n\n  /* v8 ignore start */\n  const proveAndFinalizeWithdrawal = async () => {\n    if (!withdrawal || withdrawal.length === 0) {\n      console.error('no withdrawals to prove');\n      return;\n    }\n    setWithdrawStatus('claimPending');\n\n    // Build proof\n    const output = await getOutput({\n      config,\n      chain,\n      wagmiConfig,\n    });\n    const slot = getWithdrawalHashStorageSlot({\n      withdrawalHash: withdrawal[0].withdrawalHash,\n    });\n    const [proof, block] = await Promise.all([\n      // On the L2ToL1MessagePasser on the appchain\n      getProof(wagmiConfig, {\n        address: APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS,\n        storageKeys: [slot],\n        blockNumber: output.l2BlockNumber,\n        chainId: config.chainId,\n      }),\n      getBlock(wagmiConfig, {\n        blockNumber: output.l2BlockNumber,\n        chainId: config.chainId,\n      }),\n    ]);\n    const args = {\n      l2OutputIndex: output.outputIndex,\n      outputRootProof: {\n        version: OUTPUT_ROOT_PROOF_VERSION,\n        stateRoot: block.stateRoot,\n        messagePasserStorageRoot: proof.storageHash,\n        latestBlockhash: block.hash,\n      },\n      withdrawalProof: maybeAddProofNode(\n        keccak256(slot),\n        proof.storageProof[0].proof,\n      ),\n      withdrawal: withdrawal[0],\n    };\n\n    try {\n      // Switch networks to Base\n      if (chainId !== chain.id) {\n        await switchChainAsync({ chainId: chain.id });\n      }\n\n      // Finalize the withdrawal\n      const _finalizedWithdrawalTxHash = await writeContractAsync({\n        abi: OptimismPortalABI,\n        address: config.contracts.optimismPortal,\n        functionName: 'proveAndFinalizeWithdrawalTransaction',\n        args: [\n          withdrawal[0],\n          args.l2OutputIndex,\n          args.outputRootProof,\n          args.withdrawalProof,\n        ],\n        chainId: chain.id,\n      });\n      await waitForTransactionReceipt(wagmiConfig, {\n        hash: _finalizedWithdrawalTxHash,\n        confirmations: 1,\n        chainId: chain.id,\n      });\n\n      setFinalizedWithdrawalTxHash(_finalizedWithdrawalTxHash);\n      setWithdrawStatus('claimSuccess');\n      sendAnalytics(AppchainEvent.AppchainBridgeClaimSuccess, {\n        amount: bridgeParams.amount,\n        tokenAddress: bridgeParams.token.address,\n      });\n    } catch (error) {\n      if (isUserRejectedRequestError(error)) {\n        console.error('User rejected request');\n        setWithdrawStatus('claimRejected');\n      } else {\n        setWithdrawStatus('error');\n        sendAnalytics(AppchainEvent.AppchainBridgeClaimFailure, {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  };\n  /* v8 ignore stop */\n\n  return {\n    withdraw,\n    withdrawStatus,\n    waitForWithdrawal,\n    proveAndFinalizeWithdrawal,\n    finalizedWithdrawalTxHash,\n    resetWithdrawStatus,\n  };\n};\n"],"names":[],"mappings":"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"}