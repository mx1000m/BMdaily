{"version":3,"file":"useAppchainConfig.js","sources":["../../../../src/appchain/bridge/hooks/useAppchainConfig.ts"],"sourcesContent":["'use client';\nimport { useReadContract } from 'wagmi';\nimport { DeployChainABI } from '../abi';\nimport { APPCHAIN_DEPLOY_CONTRACT_ADDRESS } from '../constants';\nimport type { AppchainConfig } from '../types';\n\nexport interface ChainConfigParams {\n  l2ChainId: number;\n  appchainChainId: number;\n}\n\nexport function useChainConfig(params: ChainConfigParams) {\n  const { data, isLoading, isError, error } = useReadContract({\n    abi: DeployChainABI,\n    functionName: 'deployAddresses',\n    args: [BigInt(params.appchainChainId)],\n    address:\n      APPCHAIN_DEPLOY_CONTRACT_ADDRESS[\n        params.l2ChainId as keyof typeof APPCHAIN_DEPLOY_CONTRACT_ADDRESS\n      ],\n    query: {\n      staleTime: 1000 * 60 * 60, // 1 hour\n      retry: 2,\n      enabled: !!params.l2ChainId && !!params.appchainChainId,\n      gcTime: 0,\n    },\n    // Read from the L2 contract\n    chainId: params.l2ChainId,\n  });\n\n  return {\n    config: error\n      ? undefined\n      : ({\n          chainId: params.appchainChainId,\n          contracts: data,\n        } as AppchainConfig),\n    isLoading,\n    isError,\n    error,\n  };\n}\n"],"names":[],"mappings":";;;AAWO,SAAS,eAAe,QAA2B;AACxD,QAAM,EAAE,MAAM,WAAW,SAAS,MAAA,IAAU,gBAAgB;AAAA,IAC1D,KAAK;AAAA,IACL,cAAc;AAAA,IACd,MAAM,CAAC,OAAO,OAAO,eAAe,CAAC;AAAA,IACrC,SACE,iCACE,OAAO,SACT;AAAA,IACF,OAAO;AAAA,MACL,WAAW,MAAO,KAAK;AAAA;AAAA,MACvB,OAAO;AAAA,MACP,SAAS,CAAC,CAAC,OAAO,aAAa,CAAC,CAAC,OAAO;AAAA,MACxC,QAAQ;AAAA,IACV;AAAA;AAAA,IAEA,SAAS,OAAO;AAAA,EAAA,CACjB;AAEM,SAAA;AAAA,IACL,QAAQ,QACJ,SACC;AAAA,MACC,SAAS,OAAO;AAAA,MAChB,WAAW;AAAA,IACb;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;"}