{"version":3,"file":"AppchainBridgeProvider.js","sources":["../../../../src/appchain/bridge/components/AppchainBridgeProvider.tsx"],"sourcesContent":["'use client';\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport { getChainExplorer } from '@/core/network/getChainExplorer';\nimport { useValue } from '@/internal/hooks/useValue';\nimport { baseSvg } from '@/internal/svg/baseSvg';\nimport { coinbaseLogoSvg } from '@/internal/svg/coinbaseLogoSvg';\nimport { toReadableAmount } from '@/swap/utils/toReadableAmount';\nimport type { Token } from '@/token';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { type Address, type Hex, erc20Abi } from 'viem';\nimport { useAccount, useConfig } from 'wagmi';\nimport { getBalance, readContract } from 'wagmi/actions';\nimport { DEFAULT_BRIDGEABLE_TOKENS } from '../constants';\nimport { useChainConfig } from '../hooks/useAppchainConfig';\nimport { useDeposit } from '../hooks/useDeposit';\nimport { useWithdraw } from '../hooks/useWithdraw';\nimport type { ChainWithIcon } from '../types';\nimport type { BridgeParams } from '../types';\nimport type { AppchainBridgeContextType } from '../types';\nimport type { AppchainBridgeProviderReact } from '../types';\nimport { defaultPriceFetcher } from '../utils/defaultPriceFetcher';\n\nconst AppchainBridgeContext = createContext<\n  AppchainBridgeContextType | undefined\n>(undefined);\n\nexport const AppchainBridgeProvider = ({\n  children,\n  chain,\n  appchain,\n  bridgeableTokens = DEFAULT_BRIDGEABLE_TOKENS,\n  handleFetchPrice = defaultPriceFetcher,\n}: AppchainBridgeProviderReact) => {\n  // Source network\n  const [from, setFrom] = useState<ChainWithIcon>({\n    ...chain,\n    icon: baseSvg,\n  });\n  // Destination network\n  const [to, setTo] = useState<ChainWithIcon>({\n    ...appchain.chain,\n    icon: appchain.icon || coinbaseLogoSvg,\n  });\n  // op-enclave configuration https://github.com/base/op-enclave/blob/main/contracts/src/DeployChain.sol\n  const { config, error } = useChainConfig({\n    l2ChainId: chain.id,\n    appchainChainId: appchain.chain.id,\n  });\n\n  if (error) {\n    console.error(error);\n    throw new Error(\n      'Error loading chain configuration. Ensure you have the correct chain ID.',\n    );\n  }\n  if (bridgeableTokens.length === 0) {\n    throw new Error(\n      'Bridgeable tokens must be provided as a parameter to AppchainBridge.',\n    );\n  }\n  if (!config) {\n    return null;\n  }\n\n  // Wagmi hooks\n  const { address } = useAccount();\n  const wagmiConfig = useConfig();\n\n  // Bridge params\n  const [bridgeParams, setBridgeParams] = useState<BridgeParams>({\n    amount: '',\n    amountUSD: '0.00',\n    token: bridgeableTokens[0],\n    recipient: address,\n  });\n\n  // Bridge state\n  const [isPriceLoading, setIsPriceLoading] = useState(false);\n  const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);\n  const [isWithdrawModalOpen, setIsWithdrawModalOpen] = useState(false);\n  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);\n  const [isResumeTransactionModalOpen, setIsResumeTransactionModalOpen] =\n    useState(false);\n  const direction = from.id === chain.id ? 'deposit' : 'withdraw';\n  const [balance, setBalance] = useState<string>('');\n  const [resumeWithdrawalTxHash, setResumeWithdrawalTxHash] = useState<Hex>();\n\n  // Deposit\n  const {\n    deposit,\n    depositStatus,\n    transactionHash: depositTransactionHash,\n    resetDepositStatus,\n  } = useDeposit();\n  const {\n    withdraw,\n    withdrawStatus,\n    waitForWithdrawal,\n    proveAndFinalizeWithdrawal,\n    finalizedWithdrawalTxHash,\n    resetWithdrawStatus,\n  } = useWithdraw({\n    config,\n    chain,\n    bridgeParams,\n  });\n\n  // Update recipient when wallet connects\n  // Defaults to current wallet address\n  useEffect(() => {\n    setBridgeParams((prev) => ({\n      ...prev,\n      recipient: address,\n    }));\n  }, [address]);\n\n  // Retrieves the ETH or ERC20 balance of the user\n  // Based on the currently selected token\n  const fetchBalance = useCallback(async () => {\n    if (!address) {\n      return;\n    }\n\n    const tokenAddress =\n      direction === 'deposit'\n        ? bridgeParams.token.address\n        : bridgeParams.token.remoteToken;\n\n    let _balance: string;\n\n    if (\n      !tokenAddress ||\n      /* v8 ignore next 1 */\n      (direction === 'withdraw' && bridgeParams.token.isCustomGasToken)\n    ) {\n      const ethBalance = await getBalance(wagmiConfig, {\n        address,\n        chainId: from.id,\n      });\n      _balance = toReadableAmount(\n        ethBalance.value.toString(),\n        ethBalance.decimals,\n      );\n    } else {\n      const erc20Balance = await readContract(wagmiConfig, {\n        abi: erc20Abi,\n        functionName: 'balanceOf',\n        args: [address],\n        address: tokenAddress as Address,\n        chainId: from.id,\n      });\n      _balance = toReadableAmount(\n        erc20Balance.toString(),\n        bridgeParams.token.decimals,\n      );\n    }\n\n    setBalance(_balance);\n  }, [address, direction, bridgeParams.token, from.id, wagmiConfig]);\n\n  // Fetch balance when bridge params change\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  // Fetch balance when withdraw is successful\n  useEffect(() => {\n    if (\n      withdrawStatus === 'claimSuccess' ||\n      depositStatus === 'depositSuccess'\n    ) {\n      fetchBalance();\n    }\n  }, [withdrawStatus, depositStatus, fetchBalance]);\n\n  const handleToggle = useCallback(() => {\n    const tmp = from;\n    setFrom(to);\n    setTo(tmp);\n    // Reset statuses when direction changes\n    resetDepositStatus();\n    resetWithdrawStatus();\n  }, [from, to, resetDepositStatus, resetWithdrawStatus]);\n\n  const handleAmountChange = useCallback(\n    async ({\n      amount,\n      token,\n      remoteToken,\n    }: {\n      amount: string;\n      token: Token;\n      remoteToken?: Token;\n    }) => {\n      setIsPriceLoading(true);\n      setBridgeParams((prev) => ({\n        ...prev,\n        amount,\n        token,\n        remoteToken,\n      }));\n\n      const amountUSD = await handleFetchPrice(amount, token);\n\n      setBridgeParams((prev) => ({\n        ...prev,\n        amountUSD,\n      }));\n      setIsPriceLoading(false);\n    },\n    [handleFetchPrice],\n  );\n\n  const handleAddressSelect = useCallback((address: Address) => {\n    setBridgeParams((prev) => ({\n      ...prev,\n      recipient: address,\n    }));\n  }, []);\n\n  const handleResumeTransaction = useCallback((txHash: Hex) => {\n    setResumeWithdrawalTxHash(txHash);\n    setIsResumeTransactionModalOpen(false);\n  }, []);\n\n  const handleOpenExplorer = useCallback(() => {\n    const blockExplorerUrl = getChainExplorer(chain.id);\n    const txHash =\n      depositStatus === 'depositSuccess'\n        ? depositTransactionHash\n        : finalizedWithdrawalTxHash;\n    window.open(`${blockExplorerUrl}/tx/${txHash}`, '_blank');\n  }, [\n    chain.id,\n    depositStatus,\n    depositTransactionHash,\n    finalizedWithdrawalTxHash,\n  ]);\n\n  const handleDeposit = useCallback(async () => {\n    await deposit({\n      config,\n      from,\n      bridgeParams,\n    });\n  }, [deposit, config, from, bridgeParams]);\n\n  const handleWithdraw = useCallback(async () => {\n    await withdraw();\n  }, [withdraw]);\n\n  const handleResetState = useCallback(() => {\n    setIsSuccessModalOpen(false);\n    setIsWithdrawModalOpen(false);\n    setIsResumeTransactionModalOpen(false);\n\n    setResumeWithdrawalTxHash(undefined);\n  }, []);\n\n  // Open withdraw modal when withdraw is successful, or when transaction is resumed\n  useEffect(() => {\n    if (withdrawStatus === 'withdrawSuccess' || resumeWithdrawalTxHash) {\n      setIsWithdrawModalOpen(true);\n    }\n  }, [withdrawStatus, resumeWithdrawalTxHash]);\n\n  // Reset withdraw status when withdraw modal is closed\n  useEffect(() => {\n    if (!isWithdrawModalOpen) {\n      resetWithdrawStatus();\n    }\n  }, [isWithdrawModalOpen, resetWithdrawStatus]);\n\n  // Open success modal when deposit is successful\n  useEffect(() => {\n    if (depositStatus === 'depositSuccess') {\n      setIsSuccessModalOpen(true);\n    }\n  }, [depositStatus]);\n\n  // Open success modal when withdraw is successful\n  useEffect(() => {\n    if (withdrawStatus === 'claimSuccess') {\n      setIsSuccessModalOpen(true);\n    }\n  }, [withdrawStatus]);\n\n  const value = useValue({\n    // Internal\n    config,\n    from,\n    to,\n    bridgeableTokens,\n    bridgeParams,\n    isPriceLoading,\n\n    // Bridge UI\n    balance,\n    handleToggle,\n    handleAmountChange,\n\n    // Address modal\n    isAddressModalOpen,\n    setIsAddressModalOpen,\n    handleAddressSelect,\n\n    // Success modal\n    isSuccessModalOpen,\n    setIsSuccessModalOpen,\n    handleOpenExplorer,\n    handleResetState,\n\n    // Resume transaction modal\n    isResumeTransactionModalOpen,\n    setIsResumeTransactionModalOpen,\n    resumeWithdrawalTxHash,\n    setResumeWithdrawalTxHash,\n    handleResumeTransaction,\n\n    // Deposits and Withdrawals\n    handleDeposit,\n    depositStatus,\n    depositTransactionHash,\n    direction,\n    handleWithdraw,\n    withdrawStatus,\n    waitForWithdrawal,\n    proveAndFinalizeWithdrawal,\n    finalizedWithdrawalTxHash,\n    isWithdrawModalOpen,\n    setIsWithdrawModalOpen,\n    resetDepositStatus,\n    resetWithdrawStatus,\n  });\n\n  return (\n    <AppchainBridgeContext.Provider value={value}>\n      {children}\n    </AppchainBridgeContext.Provider>\n  );\n};\n\nexport const useAppchainBridgeContext = () => {\n  const context = useContext(AppchainBridgeContext);\n  if (context === undefined) {\n    throw new Error('useAppchainBridge must be used within a BridgeProvider');\n  }\n  return context;\n};\n"],"names":["address"],"mappings":";;;;;;;;;;;;;;;AA6BA,MAAM,wBAAwB,cAE5B,MAAS;AAEJ,MAAM,yBAAyB,CAAC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA,mBAAmB;AAAA,EACnB,mBAAmB;AACrB,MAAmC;AAEjC,QAAM,CAAC,MAAM,OAAO,IAAI,SAAwB;AAAA,IAC9C,GAAG;AAAA,IACH,MAAM;AAAA,EAAA,CACP;AAED,QAAM,CAAC,IAAI,KAAK,IAAI,SAAwB;AAAA,IAC1C,GAAG,SAAS;AAAA,IACZ,MAAM,SAAS,QAAQ;AAAA,EAAA,CACxB;AAED,QAAM,EAAE,QAAQ,MAAM,IAAI,eAAe;AAAA,IACvC,WAAW,MAAM;AAAA,IACjB,iBAAiB,SAAS,MAAM;AAAA,EAAA,CACjC;AAED,MAAI,OAAO;AACT,YAAQ,MAAM,KAAK;AACnB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAEE,MAAA,iBAAiB,WAAW,GAAG;AACjC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAEF,MAAI,CAAC,QAAQ;AACJ,WAAA;AAAA,EAAA;AAIH,QAAA,EAAE,QAAQ,IAAI,WAAW;AAC/B,QAAM,cAAc,UAAU;AAG9B,QAAM,CAAC,cAAc,eAAe,IAAI,SAAuB;AAAA,IAC7D,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO,iBAAiB,CAAC;AAAA,IACzB,WAAW;AAAA,EAAA,CACZ;AAGD,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,SAAS,KAAK;AAC1D,QAAM,CAAC,oBAAoB,qBAAqB,IAAI,SAAS,KAAK;AAClE,QAAM,CAAC,qBAAqB,sBAAsB,IAAI,SAAS,KAAK;AACpE,QAAM,CAAC,oBAAoB,qBAAqB,IAAI,SAAS,KAAK;AAClE,QAAM,CAAC,8BAA8B,+BAA+B,IAClE,SAAS,KAAK;AAChB,QAAM,YAAY,KAAK,OAAO,MAAM,KAAK,YAAY;AACrD,QAAM,CAAC,SAAS,UAAU,IAAI,SAAiB,EAAE;AACjD,QAAM,CAAC,wBAAwB,yBAAyB,IAAI,SAAc;AAGpE,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,IACjB;AAAA,MACE,WAAW;AACT,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,YAAY;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAID,YAAU,MAAM;AACd,oBAAgB,CAAC,UAAU;AAAA,MACzB,GAAG;AAAA,MACH,WAAW;AAAA,IAAA,EACX;AAAA,EAAA,GACD,CAAC,OAAO,CAAC;AAIN,QAAA,eAAe,YAAY,YAAY;AAC3C,QAAI,CAAC,SAAS;AACZ;AAAA,IAAA;AAGF,UAAM,eACJ,cAAc,YACV,aAAa,MAAM,UACnB,aAAa,MAAM;AAErB,QAAA;AAEJ,QACE,CAAC;AAAA,IAEA,cAAc,cAAc,aAAa,MAAM,kBAChD;AACM,YAAA,aAAa,MAAM,WAAW,aAAa;AAAA,QAC/C;AAAA,QACA,SAAS,KAAK;AAAA,MAAA,CACf;AACU,iBAAA;AAAA,QACT,WAAW,MAAM,SAAS;AAAA,QAC1B,WAAW;AAAA,MACb;AAAA,IAAA,OACK;AACC,YAAA,eAAe,MAAM,aAAa,aAAa;AAAA,QACnD,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,OAAO;AAAA,QACd,SAAS;AAAA,QACT,SAAS,KAAK;AAAA,MAAA,CACf;AACU,iBAAA;AAAA,QACT,aAAa,SAAS;AAAA,QACtB,aAAa,MAAM;AAAA,MACrB;AAAA,IAAA;AAGF,eAAW,QAAQ;AAAA,EAAA,GAClB,CAAC,SAAS,WAAW,aAAa,OAAO,KAAK,IAAI,WAAW,CAAC;AAGjE,YAAU,MAAM;AACD,iBAAA;AAAA,EAAA,GACZ,CAAC,YAAY,CAAC;AAGjB,YAAU,MAAM;AAEZ,QAAA,mBAAmB,kBACnB,kBAAkB,kBAClB;AACa,mBAAA;AAAA,IAAA;AAAA,EAEd,GAAA,CAAC,gBAAgB,eAAe,YAAY,CAAC;AAE1C,QAAA,eAAe,YAAY,MAAM;AACrC,UAAM,MAAM;AACZ,YAAQ,EAAE;AACV,UAAM,GAAG;AAEU,uBAAA;AACC,wBAAA;AAAA,KACnB,CAAC,MAAM,IAAI,oBAAoB,mBAAmB,CAAC;AAEtD,QAAM,qBAAqB;AAAA,IACzB,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IAAA,MAKI;AACJ,wBAAkB,IAAI;AACtB,sBAAgB,CAAC,UAAU;AAAA,QACzB,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,MAAA,EACA;AAEF,YAAM,YAAY,MAAM,iBAAiB,QAAQ,KAAK;AAEtD,sBAAgB,CAAC,UAAU;AAAA,QACzB,GAAG;AAAA,QACH;AAAA,MAAA,EACA;AACF,wBAAkB,KAAK;AAAA,IACzB;AAAA,IACA,CAAC,gBAAgB;AAAA,EACnB;AAEM,QAAA,sBAAsB,YAAY,CAACA,aAAqB;AAC5D,oBAAgB,CAAC,UAAU;AAAA,MACzB,GAAG;AAAA,MACH,WAAWA;AAAAA,IAAA,EACX;AAAA,EACJ,GAAG,EAAE;AAEC,QAAA,0BAA0B,YAAY,CAAC,WAAgB;AAC3D,8BAA0B,MAAM;AAChC,oCAAgC,KAAK;AAAA,EACvC,GAAG,EAAE;AAEC,QAAA,qBAAqB,YAAY,MAAM;AACrC,UAAA,mBAAmB,iBAAiB,MAAM,EAAE;AAC5C,UAAA,SACJ,kBAAkB,mBACd,yBACA;AACN,WAAO,KAAK,GAAG,gBAAgB,OAAO,MAAM,IAAI,QAAQ;AAAA,EAAA,GACvD;AAAA,IACD,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAEK,QAAA,gBAAgB,YAAY,YAAY;AAC5C,UAAM,QAAQ;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,KACA,CAAC,SAAS,QAAQ,MAAM,YAAY,CAAC;AAElC,QAAA,iBAAiB,YAAY,YAAY;AAC7C,UAAM,SAAS;AAAA,EAAA,GACd,CAAC,QAAQ,CAAC;AAEP,QAAA,mBAAmB,YAAY,MAAM;AACzC,0BAAsB,KAAK;AAC3B,2BAAuB,KAAK;AAC5B,oCAAgC,KAAK;AAErC,8BAA0B,MAAS;AAAA,EACrC,GAAG,EAAE;AAGL,YAAU,MAAM;AACV,QAAA,mBAAmB,qBAAqB,wBAAwB;AAClE,6BAAuB,IAAI;AAAA,IAAA;AAAA,EAC7B,GACC,CAAC,gBAAgB,sBAAsB,CAAC;AAG3C,YAAU,MAAM;AACd,QAAI,CAAC,qBAAqB;AACJ,0BAAA;AAAA,IAAA;AAAA,EACtB,GACC,CAAC,qBAAqB,mBAAmB,CAAC;AAG7C,YAAU,MAAM;AACd,QAAI,kBAAkB,kBAAkB;AACtC,4BAAsB,IAAI;AAAA,IAAA;AAAA,EAC5B,GACC,CAAC,aAAa,CAAC;AAGlB,YAAU,MAAM;AACd,QAAI,mBAAmB,gBAAgB;AACrC,4BAAsB,IAAI;AAAA,IAAA;AAAA,EAC5B,GACC,CAAC,cAAc,CAAC;AAEnB,QAAM,QAAQ,SAAS;AAAA;AAAA,IAErB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,SACG,oBAAA,sBAAsB,UAAtB,EAA+B,OAC7B,SACH,CAAA;AAEJ;AAEO,MAAM,2BAA2B,MAAM;AACtC,QAAA,UAAU,WAAW,qBAAqB;AAChD,MAAI,YAAY,QAAW;AACnB,UAAA,IAAI,MAAM,wDAAwD;AAAA,EAAA;AAEnE,SAAA;AACT;"}