'use client';
import { jsx, jsxs } from "react/jsx-runtime";
import { cn, color, text, pressable, border } from "../../../styles/theme.js";
import "react";
import "../../../useOnchainKit.js";
import { ConnectWallet } from "../../../wallet/components/ConnectWallet.js";
import "../../../identity/components/IdentityProvider.js";
import "viem";
import "viem/chains";
import "viem/ens";
import "../../../identity/constants.js";
import "@tanstack/react-query";
import "../../../identity/utils/getAddress.js";
import "../../../internal/svg/defaultAvatarSVG.js";
import "../../../core/network/attestations.js";
import "../../../identity/utils/easSupportedChains.js";
import "../../../internal/svg/badgeSvg.js";
import { useAccount } from "wagmi";
import "../../../internal/svg/githubSvg.js";
import "../../../internal/svg/twitterSvg.js";
import "../../../internal/svg/warpcastSvg.js";
import "../../../internal/svg/websiteSvg.js";
import "../../../identity/utils/getAddresses.js";
import "../../../wallet/components/WalletProvider.js";
import "@farcaster/frame-sdk";
import "../../../token/components/TokenRow.js";
import "../../../internal/components/TextInput.js";
import "../../../internal/svg/searchIconSvg.js";
import "react-dom";
import "../../../token/components/TokenSelectButton.js";
import "../../../internal/svg/addForegroundSvg.js";
import "../../../internal/svg/arrowUpRightSvg.js";
import "../../../internal/svg/toggleSvg.js";
import "../../../internal/svg/baseScanSvg.js";
import "../../../internal/svg/disconnectSvg.js";
import "../../../internal/svg/qrIconSvg.js";
import "../../../internal/svg/refreshSvg.js";
import "../../../token/constants.js";
import "../../../internal/components/QrCode/useLogo.js";
import "qrcode";
import "../../../internal/svg/backArrowSvg.js";
import "../../../internal/svg/copySvg.js";
import "../../../swap/components/SwapProvider.js";
import "../../../internal/svg/appleSvg.js";
import "../../../internal/svg/coinbaseLogoSvg.js";
import "../../../internal/svg/creditCardSvg.js";
import "../../../internal/svg/fundWallet.js";
import "../../../internal/svg/swapSettings.js";
import "../../../internal/svg/walletSvg.js";
import "../../../core/network/getChainExplorer.js";
import "../../../internal/components/amount-input/CurrencyLabel.js";
import "../../../wallet/components/wallet-advanced-send/components/SendAmountInputTypeSwitch.js";
import "../../../wallet/components/wallet-advanced-send/components/SendProvider.js";
import "../../../transaction/components/TransactionProvider.js";
import "wagmi/experimental";
import "../../../fund/components/FundCardProvider.js";
import "../../../fund/components/FundCardPaymentMethodSelectRow.js";
import "../../../fund/components/FundCardPaymentMethodSelectorToggle.js";
import "../../../wallet/components/WalletDropdown.js";
import "../../../internal/svg/portfolioSvg.js";
import "../../../internal/svg/basenameSvg.js";
import "../../../internal/svg/trustWalletSvg.js";
import "wagmi/connectors";
import "viem/account-abstraction";
import { useDepositButton } from "../hooks/useDepositButton.js";
import { useAppchainBridgeContext } from "./AppchainBridgeProvider.js";
const AppchainBridgeTransactionButton = () => {
  const {
    handleDeposit,
    depositStatus,
    direction,
    handleWithdraw,
    withdrawStatus
  } = useAppchainBridgeContext();
  const { bridgeParams } = useAppchainBridgeContext();
  const { isConnected } = useAccount();
  const { isRejected, buttonContent, isDisabled } = useDepositButton({
    depositStatus,
    withdrawStatus,
    bridgeParams
  });
  const buttonHandler = direction === "deposit" ? handleDeposit : handleWithdraw;
  if (!isConnected) {
    return /* @__PURE__ */ jsx(ConnectWallet, { className: "w-full" });
  }
  return /* @__PURE__ */ jsxs("div", { className: "w-full pt-2", children: [
    /* @__PURE__ */ jsx(
      "button",
      {
        onClick: buttonHandler,
        className: cn(
          pressable.primary,
          border.radius,
          "w-full rounded-xl",
          "px-4 py-3 font-medium text-base text-white leading-6",
          text.headline,
          isDisabled && pressable.disabled
        ),
        type: "button",
        disabled: isDisabled,
        children: /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(text.headline, color.inverse, "flex justify-center"),
            children: buttonContent
          }
        )
      }
    ),
    isRejected && /* @__PURE__ */ jsx("div", { className: cn(text.label2, color.error, "mt-2"), children: "Transaction denied" })
  ] });
};
export {
  AppchainBridgeTransactionButton
};
//# sourceMappingURL=AppchainBridgeTransactionButton.js.map
