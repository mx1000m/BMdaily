import { jsx } from "react/jsx-runtime";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useRef, useCallback, useState, useEffect, useMemo } from "react";
import { WagmiProvider } from "wagmi";
import { baseAccount } from "wagmi/connectors";
import { createWagmiConfig } from "./core/createWagmiConfig.js";
import { useProviderDependencies } from "./internal/hooks/useProviderDependencies.js";
import { useOnchainKit } from "./useOnchainKit.js";
function DefaultOnchainKitProviders({
  children,
  connectors
}) {
  const { providedWagmiConfig, providedQueryClient } = useProviderDependencies();
  return /* @__PURE__ */ jsx(
    WagmiProviderWithDefault,
    {
      providedWagmiConfig,
      connectors,
      children: /* @__PURE__ */ jsx(QueryClientProviderWithDefault, { providedQueryClient, children })
    }
  );
}
function WagmiProviderWithDefault({
  children,
  providedWagmiConfig,
  connectors
}) {
  const onchainKitConfig = useOnchainKit();
  const prevConnectorsRef = useRef(connectors);
  const getWagmiConfig = useCallback(() => {
    var _a, _b, _c, _d;
    if (providedWagmiConfig) return providedWagmiConfig;
    const appName = ((_b = (_a = onchainKitConfig.config) == null ? void 0 : _a.appearance) == null ? void 0 : _b.name) ?? void 0;
    const appLogoUrl = ((_d = (_c = onchainKitConfig.config) == null ? void 0 : _c.appearance) == null ? void 0 : _d.logo) ?? void 0;
    return createWagmiConfig({
      apiKey: onchainKitConfig.apiKey ?? void 0,
      appName,
      appLogoUrl,
      connectors: connectors ?? [
        baseAccount({
          appName,
          appLogoUrl
        })
      ]
    });
  }, [
    onchainKitConfig.apiKey,
    onchainKitConfig.config,
    connectors,
    providedWagmiConfig
  ]);
  const [config, setConfig] = useState(() => {
    return getWagmiConfig();
  });
  useEffect(() => {
    if (prevConnectorsRef.current !== connectors) {
      setConfig(getWagmiConfig());
      prevConnectorsRef.current = connectors;
    }
  }, [connectors, getWagmiConfig]);
  if (providedWagmiConfig) {
    return children;
  }
  return /* @__PURE__ */ jsx(WagmiProvider, { config, children });
}
function QueryClientProviderWithDefault({
  children,
  providedQueryClient
}) {
  const queryClient = useMemo(() => {
    return providedQueryClient || new QueryClient();
  }, [providedQueryClient]);
  if (providedQueryClient) return children;
  return /* @__PURE__ */ jsx(QueryClientProvider, { client: queryClient, children });
}
export {
  DefaultOnchainKitProviders
};
//# sourceMappingURL=DefaultOnchainKitProviders.js.map
