{"version":3,"file":"sendSwapTransactions.js","sources":["../../../src/swap/utils/sendSwapTransactions.ts"],"sourcesContent":["import { normalizeTransactionId } from '@/internal/utils/normalizeWagmi';\nimport { Capabilities } from '../../core/constants';\nimport type { SendSwapTransactionParams } from '../types';\nimport { sendSingleTransactions } from './sendSingleTransactions';\n\nexport async function sendSwapTransactions({\n  config,\n  isSponsored,\n  paymaster,\n  sendCallsAsync,\n  sendTransactionAsync,\n  updateLifecycleStatus,\n  walletCapabilities,\n  transactions,\n}: SendSwapTransactionParams) {\n  if (walletCapabilities[Capabilities.AtomicBatch]?.supported) {\n    // For batched transactions, we'll use `SwapProvider` to listen for calls to emit the `success` state\n    updateLifecycleStatus({\n      statusName: 'transactionPending',\n    });\n    const data = await sendCallsAsync({\n      calls: transactions.map(({ transaction }) => transaction),\n      capabilities: isSponsored\n        ? {\n            paymasterService: {\n              url: paymaster,\n            },\n          }\n        : {},\n    });\n    updateLifecycleStatus({\n      statusName: 'transactionApproved',\n      statusData: {\n        callsId: normalizeTransactionId(data) as `0x${string}`,\n        transactionType: 'Batched',\n      },\n    });\n  } else {\n    await sendSingleTransactions({\n      config,\n      sendTransactionAsync,\n      transactions,\n      updateLifecycleStatus,\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAKA,eAAsB,qBAAqB;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA8B;;AAC5B,OAAI,wBAAmB,aAAa,WAAW,MAA3C,mBAA8C,WAAW;AAErC,0BAAA;AAAA,MACpB,YAAY;AAAA,IAAA,CACb;AACK,UAAA,OAAO,MAAM,eAAe;AAAA,MAChC,OAAO,aAAa,IAAI,CAAC,EAAE,YAAA,MAAkB,WAAW;AAAA,MACxD,cAAc,cACV;AAAA,QACE,kBAAkB;AAAA,UAChB,KAAK;AAAA,QAAA;AAAA,MACP,IAEF,CAAA;AAAA,IAAC,CACN;AACqB,0BAAA;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY;AAAA,QACV,SAAS,uBAAuB,IAAI;AAAA,QACpC,iBAAiB;AAAA,MAAA;AAAA,IACnB,CACD;AAAA,EAAA,OACI;AACL,UAAM,uBAAuB;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EAAA;AAEL;"}