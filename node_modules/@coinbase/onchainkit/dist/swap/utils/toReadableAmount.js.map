{"version":3,"file":"toReadableAmount.js","sources":["../../../src/swap/utils/toReadableAmount.ts"],"sourcesContent":["export function toReadableAmount(amount: string, decimals: number): string {\n  // Check if the amount contains a decimal point\n  if (amount.includes('.')) {\n    const [wholePart, fractionalPart] = amount.split('.');\n    const paddedFractionalPart = fractionalPart.padEnd(decimals, '0');\n    const combinedAmount = wholePart + paddedFractionalPart;\n    return combinedAmount;\n  }\n\n  // If no decimal point, proceed with the original logic\n  const bigIntAmount = BigInt(amount);\n  const divisor = BigInt(10) ** BigInt(decimals);\n  const wholePart = (bigIntAmount / divisor).toString();\n  const fractionalPart = (bigIntAmount % divisor)\n    .toString()\n    .padStart(decimals, '0');\n  const trimmedFractionalPart = fractionalPart.replace(/0+$/, '');\n  return trimmedFractionalPart\n    ? `${wholePart}.${trimmedFractionalPart}`\n    : wholePart;\n}\n"],"names":["wholePart","fractionalPart"],"mappings":"AAAgB,SAAA,iBAAiB,QAAgB,UAA0B;AAErE,MAAA,OAAO,SAAS,GAAG,GAAG;AACxB,UAAM,CAACA,YAAWC,eAAc,IAAI,OAAO,MAAM,GAAG;AACpD,UAAM,uBAAuBA,gBAAe,OAAO,UAAU,GAAG;AAChE,UAAM,iBAAiBD,aAAY;AAC5B,WAAA;AAAA,EAAA;AAIH,QAAA,eAAe,OAAO,MAAM;AAClC,QAAM,UAAU,OAAO,EAAE,KAAK,OAAO,QAAQ;AACvC,QAAA,aAAa,eAAe,SAAS,SAAS;AACpD,QAAM,kBAAkB,eAAe,SACpC,WACA,SAAS,UAAU,GAAG;AACzB,QAAM,wBAAwB,eAAe,QAAQ,OAAO,EAAE;AAC9D,SAAO,wBACH,GAAG,SAAS,IAAI,qBAAqB,KACrC;AACN;"}