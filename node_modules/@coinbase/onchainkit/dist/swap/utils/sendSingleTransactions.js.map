{"version":3,"file":"sendSingleTransactions.js","sources":["../../../src/swap/utils/sendSingleTransactions.ts"],"sourcesContent":["import type { TransactionReceipt } from 'viem';\nimport { waitForTransactionReceipt } from 'wagmi/actions';\nimport type { SendSingleTransactionsParams } from '../types';\n\nexport async function sendSingleTransactions({\n  config,\n  sendTransactionAsync,\n  transactions,\n  updateLifecycleStatus,\n}: SendSingleTransactionsParams) {\n  let transactionReceipt: TransactionReceipt | undefined;\n\n  // Execute the non-batched transactions sequentially\n  for (const { transaction, transactionType } of transactions) {\n    updateLifecycleStatus({\n      statusName: 'transactionPending',\n    });\n    const txHash = await sendTransactionAsync(transaction);\n    updateLifecycleStatus({\n      statusName: 'transactionApproved',\n      statusData: { transactionHash: txHash, transactionType },\n    });\n    transactionReceipt = await waitForTransactionReceipt(config, {\n      hash: txHash,\n      confirmations: 1,\n    });\n  }\n\n  // For non-batched transactions, emit the last transaction receipt\n  if (transactionReceipt) {\n    updateLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipt,\n      },\n    });\n  }\n}\n"],"names":[],"mappings":";AAIA,eAAsB,uBAAuB;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAiC;AAC3B,MAAA;AAGJ,aAAW,EAAE,aAAa,gBAAgB,KAAK,cAAc;AACrC,0BAAA;AAAA,MACpB,YAAY;AAAA,IAAA,CACb;AACK,UAAA,SAAS,MAAM,qBAAqB,WAAW;AAC/B,0BAAA;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY,EAAE,iBAAiB,QAAQ,gBAAgB;AAAA,IAAA,CACxD;AACoB,yBAAA,MAAM,0BAA0B,QAAQ;AAAA,MAC3D,MAAM;AAAA,MACN,eAAe;AAAA,IAAA,CAChB;AAAA,EAAA;AAIH,MAAI,oBAAoB;AACA,0BAAA;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY;AAAA,QACV;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EAAA;AAEL;"}