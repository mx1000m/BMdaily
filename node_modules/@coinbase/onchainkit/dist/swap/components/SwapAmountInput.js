'use client';
import { jsxs, jsx } from "react/jsx-runtime";
import { useEffect, useCallback, useMemo } from "react";
import { useAnalytics } from "../../core/analytics/hooks/useAnalytics.js";
import { SwapEvent } from "../../core/analytics/types.js";
import { TextInput } from "../../internal/components/TextInput.js";
import { useValue } from "../../internal/hooks/useValue.js";
import { getRoundedAmount } from "../../internal/utils/getRoundedAmount.js";
import { isValidAmount } from "../../internal/utils/isValidAmount.js";
import { cn, color, text, pressable, border, background } from "../../styles/theme.js";
import { TokenChip } from "../../token/components/TokenChip.js";
import "../../token/components/TokenRow.js";
import "../../useOnchainKit.js";
import "../../internal/svg/searchIconSvg.js";
import { TokenSelectDropdown } from "../../token/components/TokenSelectDropdown.js";
import "../../token/components/TokenSelectButton.js";
import "viem";
import { formatAmount } from "../utils/formatAmount.js";
import { useSwapContext } from "./SwapProvider.js";
function SwapAmountInput({
  className,
  delayMs = 1e3,
  label,
  token,
  type,
  swappableTokens
}) {
  const { address, to, from, handleAmountChange } = useSwapContext();
  const { sendAnalytics } = useAnalytics();
  const source = useValue(type === "from" ? from : to);
  const destination = useValue(type === "from" ? to : from);
  const { setToken, setAmount, balance, amount, amountUSD } = source;
  useEffect(() => {
    if (token) {
      setToken == null ? void 0 : setToken(token);
    }
  }, [token, setToken]);
  const handleMaxButtonClick = useCallback(() => {
    if (!balance) {
      return;
    }
    setAmount(balance);
    handleAmountChange(type, balance);
  }, [balance, setAmount, handleAmountChange, type]);
  const handleChange = useCallback(
    (amount2) => {
      handleAmountChange(type, amount2);
    },
    [handleAmountChange, type]
  );
  const handleAnalyticsTokenSelected = useCallback(
    (token2) => {
      sendAnalytics(SwapEvent.TokenSelected, {
        token: token2.symbol
      });
    },
    [sendAnalytics]
  );
  const handleSetToken = useCallback(
    (token2) => {
      setToken == null ? void 0 : setToken(token2);
      handleAmountChange(type, amount, token2);
      handleAnalyticsTokenSelected(token2);
    },
    [amount, setToken, handleAmountChange, handleAnalyticsTokenSelected, type]
  );
  const sourceTokenOptions = useMemo(() => {
    return (swappableTokens == null ? void 0 : swappableTokens.filter(
      ({ symbol }) => {
        var _a;
        return symbol !== ((_a = destination.token) == null ? void 0 : _a.symbol);
      }
    )) ?? [];
  }, [swappableTokens, destination.token]);
  const hasInsufficientBalance = type === "from" && Number(balance) < Number(amount);
  const formatUSD = (amount2) => {
    if (!amount2 || amount2 === "0") {
      return null;
    }
    const roundedAmount = Number(getRoundedAmount(amount2, 2));
    return `~$${roundedAmount.toFixed(2)}`;
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: cn(
        background.secondary,
        border.radius,
        "my-0.5 box-border flex h-[148px] w-full flex-col items-start p-4",
        className
      ),
      "data-testid": "ockSwapAmountInput_Container",
      children: [
        /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(
              text.label2,
              color.foregroundMuted,
              "flex w-full items-center justify-between"
            ),
            children: label
          }
        ),
        /* @__PURE__ */ jsxs("div", { className: "flex w-full items-center justify-between", children: [
          /* @__PURE__ */ jsx(
            TextInput,
            {
              className: cn(
                "mr-2 w-full border-[none] bg-transparent font-display text-[2.5rem]",
                "leading-none outline-none",
                hasInsufficientBalance && address ? color.error : color.foreground
              ),
              placeholder: "0.0",
              delayMs,
              value: formatAmount(amount),
              setValue: setAmount,
              disabled: source.loading,
              onChange: handleChange,
              inputValidator: isValidAmount
            }
          ),
          sourceTokenOptions.length > 0 ? /* @__PURE__ */ jsx(
            TokenSelectDropdown,
            {
              token: source.token,
              setToken: handleSetToken,
              options: sourceTokenOptions
            }
          ) : source.token && /* @__PURE__ */ jsx(TokenChip, { className: pressable.inverse, token: source.token })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "mt-4 flex w-full items-center justify-between", children: [
          /* @__PURE__ */ jsx("div", { className: cn(text.label2, color.foregroundMuted), children: formatUSD(amountUSD) }),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: cn(
                text.label2,
                color.foregroundMuted,
                "flex grow items-center justify-end"
              ),
              children: [
                balance && /* @__PURE__ */ jsx("span", { children: `Balance: ${getRoundedAmount(balance, 8)}` }),
                type === "from" && address && /* @__PURE__ */ jsx(
                  "button",
                  {
                    type: "button",
                    className: cn(
                      text.label1,
                      color.primary,
                      "flex cursor-pointer items-center justify-center px-2 py-1"
                    ),
                    "data-testid": "ockSwapAmountInput_MaxButton",
                    onClick: handleMaxButtonClick,
                    children: "Max"
                  }
                )
              ]
            }
          )
        ] })
      ]
    }
  );
}
export {
  SwapAmountInput
};
//# sourceMappingURL=SwapAmountInput.js.map
