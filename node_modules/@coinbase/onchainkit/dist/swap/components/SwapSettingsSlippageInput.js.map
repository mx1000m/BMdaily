{"version":3,"file":"SwapSettingsSlippageInput.js","sources":["../../../src/swap/components/SwapSettingsSlippageInput.tsx"],"sourcesContent":["'use client';\nimport { useAnalytics } from '@/core/analytics/hooks/useAnalytics';\nimport { SwapEvent } from '@/core/analytics/types';\nimport { useCallback, useState } from 'react';\nimport {\n  background,\n  border,\n  cn,\n  color,\n  pressable,\n  text,\n} from '../../styles/theme';\nimport type { SwapSettingsSlippageInputReact } from '../types';\nimport { useSwapContext } from './SwapProvider';\n\nconst SLIPPAGE_SETTINGS = {\n  AUTO: 'Auto',\n  CUSTOM: 'Custom',\n};\n\nexport function SwapSettingsSlippageInput({\n  className,\n}: SwapSettingsSlippageInputReact) {\n  const { sendAnalytics } = useAnalytics();\n  const {\n    config: { maxSlippage: defaultMaxSlippage },\n    updateLifecycleStatus,\n    lifecycleStatus,\n  } = useSwapContext();\n\n  // Set initial slippage values to match previous selection or default,\n  // ensuring consistency when dropdown is reopened\n  const [slippageSetting, setSlippageSetting] = useState(\n    lifecycleStatus.statusData.maxSlippage === defaultMaxSlippage\n      ? SLIPPAGE_SETTINGS.AUTO\n      : SLIPPAGE_SETTINGS.CUSTOM,\n  );\n\n  const handleAnalyticsSlippageChange = useCallback(\n    (previousSlippage: number, newSlippage: number) => {\n      sendAnalytics(SwapEvent.SlippageChanged, {\n        previousSlippage,\n        slippage: newSlippage,\n      });\n    },\n    [sendAnalytics],\n  );\n\n  const updateSlippage = useCallback(\n    (newSlippage: number) => {\n      const currentSlippage = lifecycleStatus.statusData.maxSlippage;\n      if (newSlippage !== currentSlippage) {\n        handleAnalyticsSlippageChange(currentSlippage, newSlippage);\n\n        updateLifecycleStatus({\n          statusName: 'slippageChange',\n          statusData: {\n            maxSlippage: newSlippage,\n          },\n        });\n      }\n    },\n    [\n      lifecycleStatus.statusData.maxSlippage,\n      updateLifecycleStatus,\n      handleAnalyticsSlippageChange,\n    ],\n  );\n\n  // Handles user input for custom slippage.\n  // Parses the input and updates slippage state.\n  const handleSlippageChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newSlippage = e.target.value;\n      const parsedSlippage = Number.parseFloat(newSlippage);\n      const isValidNumber = !Number.isNaN(parsedSlippage);\n\n      // Update slippage to parsed value if valid, otherwise set to 0\n      updateSlippage(isValidNumber ? parsedSlippage : 0);\n    },\n    [updateSlippage],\n  );\n\n  // Toggles between auto and custom slippage settings\n  // Resets to default slippage when auto is selected\n  const handleSlippageSettingChange = useCallback(\n    (setting: string) => {\n      setSlippageSetting(setting);\n      if (setting === SLIPPAGE_SETTINGS.AUTO) {\n        updateSlippage(defaultMaxSlippage);\n      }\n    },\n    [defaultMaxSlippage, updateSlippage],\n  );\n\n  return (\n    <section\n      className={cn(\n        background.default,\n        border.defaultActive,\n        border.radius,\n        'flex items-center gap-2 flex-grow max-sm:pt-4',\n        className,\n      )}\n    >\n      <fieldset\n        className={cn(\n          background.default,\n          border.defaultActive,\n          border.radius,\n          'flex h-9 flex-1 rounded-xl border p-1',\n        )}\n      >\n        <legend className=\"sr-only\">Slippage Setting</legend>\n        {Object.values(SLIPPAGE_SETTINGS).map((setting) => (\n          <button\n            key={setting}\n            type=\"button\"\n            className={cn(\n              pressable.default,\n              color.foreground,\n              text.label1,\n              border.radiusInner,\n              'flex-1 px-3 py-1 transition-colors',\n              // Highlight the button if it is selected\n              slippageSetting === setting\n                ? cn(background.inverse, color.primary, pressable.shadow)\n                : color.foregroundMuted,\n            )}\n            onClick={() => handleSlippageSettingChange(setting)}\n          >\n            {setting}\n          </button>\n        ))}\n      </fieldset>\n      <div\n        className={cn(\n          background.default,\n          border.defaultActive,\n          border.radius,\n          'flex h-9 w-24 items-center justify-between border px-2 py-1',\n          slippageSetting === SLIPPAGE_SETTINGS.AUTO && 'opacity-50',\n        )}\n      >\n        <label htmlFor=\"slippage-input\" className=\"sr-only\">\n          Slippage Percentage\n        </label>\n        <input\n          id=\"slippage-input\"\n          type=\"text\"\n          value={lifecycleStatus.statusData.maxSlippage}\n          onChange={handleSlippageChange}\n          disabled={slippageSetting === SLIPPAGE_SETTINGS.AUTO}\n          className={cn(\n            color.foreground,\n            text.label2,\n            'w-full flex-grow bg-transparent pl-1 font-normal leading-6 focus:outline-none',\n            slippageSetting === SLIPPAGE_SETTINGS.AUTO && 'cursor-not-allowed',\n          )}\n        />\n        <span\n          className={cn(\n            background.default,\n            color.foreground,\n            text.label2,\n            'ml-1 flex-shrink-0 font-normal leading-6',\n          )}\n        >\n          %\n        </span>\n      </div>\n    </section>\n  );\n}\n"],"names":[],"mappings":"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"}