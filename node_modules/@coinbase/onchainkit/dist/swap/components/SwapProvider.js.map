{"version":3,"file":"SwapProvider.js","sources":["../../../src/swap/components/SwapProvider.tsx"],"sourcesContent":["import { RequestContext } from '@/core/network/constants';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { base } from 'viem/chains';\nimport { useAccount, useConfig, useSendTransaction } from 'wagmi';\nimport { useSwitchChain } from 'wagmi';\nimport { useSendCalls } from 'wagmi/experimental';\nimport { buildSwapTransaction } from '../../api/buildSwapTransaction';\nimport { getSwapQuote } from '../../api/getSwapQuote';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport { SwapEvent } from '../../core/analytics/types';\nimport { useCapabilitiesSafe } from '../../internal/hooks/useCapabilitiesSafe';\nimport { useLifecycleStatus } from '../../internal/hooks/useLifecycleStatus';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { formatTokenAmount } from '../../internal/utils/formatTokenAmount';\nimport type { Token } from '../../token';\nimport { GENERIC_ERROR_MESSAGE } from '../../transaction/constants';\nimport { isUserRejectedRequestError } from '../../transaction/utils/isUserRejectedRequestError';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { FALLBACK_DEFAULT_MAX_SLIPPAGE } from '../constants';\nimport { useAwaitCalls } from '../hooks/useAwaitCalls';\nimport { useFromTo } from '../hooks/useFromTo';\nimport { useResetInputs } from '../hooks/useResetInputs';\nimport type {\n  LifecycleStatus,\n  SwapContextType,\n  SwapProviderReact,\n} from '../types';\nimport { isSwapError } from '../utils/isSwapError';\nimport { processSwapTransaction } from '../utils/processSwapTransaction';\n\nconst emptyContext = {} as SwapContextType;\n\nexport const SwapContext = createContext<SwapContextType>(emptyContext);\n\nexport function useSwapContext() {\n  const context = useContext(SwapContext);\n  if (context === emptyContext) {\n    throw new Error('useSwapContext must be used within a Swap component');\n  }\n  return context;\n}\n\nexport function SwapProvider({\n  children,\n  config = {\n    maxSlippage: FALLBACK_DEFAULT_MAX_SLIPPAGE,\n  },\n  experimental,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n}: SwapProviderReact) {\n  const { config: { paymaster } = { paymaster: undefined } } = useOnchainKit();\n  const { address, chainId } = useAccount();\n  const { switchChainAsync } = useSwitchChain();\n  // Feature flags\n  const { useAggregator } = experimental;\n  // Core Hooks\n  const accountConfig = useConfig();\n\n  const walletCapabilities = useCapabilitiesSafe({\n    chainId: base.id,\n  }); // Swap is only available on Base\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: 'init',\n      statusData: {\n        isMissingRequiredField: true,\n        maxSlippage: config.maxSlippage,\n      },\n    }); // Component lifecycle\n\n  const [isToastVisible, setIsToastVisible] = useState(false);\n  const [transactionHash, setTransactionHash] = useState('');\n  const [hasHandledSuccess, setHasHandledSuccess] = useState(false);\n  const { from, to } = useFromTo(address);\n  const { sendTransactionAsync } = useSendTransaction(); // Sending the transaction (and approval, if applicable)\n  const { sendCallsAsync } = useSendCalls(); // Atomic Batch transactions (and approval, if applicable)\n\n  // Refreshes balances and inputs post-swap\n  const resetInputs = useResetInputs({ from, to });\n  // For batched transactions, listens to and awaits calls from the Wallet server\n  const awaitCallsStatus = useAwaitCalls({\n    accountConfig,\n    lifecycleStatus,\n    updateLifecycleStatus,\n  });\n\n  const { sendAnalytics } = useAnalytics();\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      onError?.(lifecycleStatus.statusData);\n      sendAnalytics(SwapEvent.SwapFailure, {\n        error: lifecycleStatus.statusData.error,\n        metadata: lifecycleStatus.statusData,\n      });\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.(lifecycleStatus.statusData.transactionReceipt);\n      setTransactionHash(\n        lifecycleStatus.statusData?.transactionReceipt.transactionHash,\n      );\n      setHasHandledSuccess(true);\n      setIsToastVisible(true);\n      sendAnalytics(SwapEvent.SwapSuccess, {\n        paymaster: !!paymaster,\n        transactionHash:\n          lifecycleStatus.statusData.transactionReceipt?.transactionHash,\n        address: address || '',\n        amount: Number(from.amount),\n        from: from.token?.symbol || '',\n        to: to.token?.symbol || '',\n      });\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n    sendAnalytics,\n    paymaster,\n    from.amount,\n    from.token?.symbol,\n    to.token?.symbol,\n    address,\n  ]);\n\n  useEffect(() => {\n    // Reset inputs after status reset. `resetInputs` is dependent\n    // on 'from' and 'to' so moved to separate useEffect to\n    // prevents multiple calls to `onStatus`\n    if (lifecycleStatus.statusName === 'init' && hasHandledSuccess) {\n      setHasHandledSuccess(false);\n      resetInputs();\n    }\n  }, [hasHandledSuccess, lifecycleStatus.statusName, resetInputs]);\n\n  useEffect(() => {\n    // For batched transactions, `transactionApproved` will contain the calls ID\n    // We'll use the `useAwaitCalls` hook to listen to the call status from the wallet server\n    // This will update the lifecycle status to `success` once the calls are confirmed\n    if (\n      lifecycleStatus.statusName === 'transactionApproved' &&\n      lifecycleStatus.statusData.transactionType === 'Batched'\n    ) {\n      awaitCallsStatus();\n    }\n  }, [\n    awaitCallsStatus,\n    lifecycleStatus,\n    lifecycleStatus.statusData,\n    lifecycleStatus.statusName,\n  ]);\n\n  useEffect(() => {\n    // Reset status to init after success has been handled\n    if (lifecycleStatus.statusName === 'success' && hasHandledSuccess) {\n      updateLifecycleStatus({\n        statusName: 'init',\n        statusData: {\n          isMissingRequiredField: true,\n          maxSlippage: config.maxSlippage,\n        },\n      });\n    }\n  }, [\n    config.maxSlippage,\n    hasHandledSuccess,\n    lifecycleStatus.statusName,\n    updateLifecycleStatus,\n  ]);\n\n  const handleToggle = useCallback(() => {\n    from.setAmount(to.amount);\n    to.setAmount(from.amount);\n    from.setToken?.(to.token);\n    to.setToken?.(from.token);\n\n    updateLifecycleStatus({\n      statusName: 'amountChange',\n      statusData: {\n        amountFrom: from.amount,\n        amountTo: to.amount,\n        tokenFrom: from.token,\n        tokenTo: to.token,\n        // token is missing\n        isMissingRequiredField:\n          !from.token || !to.token || !from.amount || !to.amount,\n      },\n    });\n  }, [from, to, updateLifecycleStatus]);\n\n  const handleAmountChange = useCallback(\n    async (\n      type: 'from' | 'to',\n      amount: string,\n      sToken?: Token,\n      dToken?: Token,\n    ) => {\n      const source = type === 'from' ? from : to;\n      const destination = type === 'from' ? to : from;\n\n      source.token = sToken ?? source.token;\n      destination.token = dToken ?? destination.token;\n\n      // if token is missing alert user via isMissingRequiredField\n      if (source.token === undefined || destination.token === undefined) {\n        updateLifecycleStatus({\n          statusName: 'amountChange',\n          statusData: {\n            amountFrom: from.amount,\n            amountTo: to.amount,\n            tokenFrom: from.token,\n            tokenTo: to.token,\n            // token is missing\n            isMissingRequiredField: true,\n          },\n        });\n        return;\n      }\n      if (amount === '' || amount === '.' || Number.parseFloat(amount) === 0) {\n        destination.setAmount('');\n        destination.setAmountUSD('');\n        source.setAmountUSD('');\n        return;\n      }\n\n      // When toAmount changes we fetch quote for fromAmount\n      // so set isFromQuoteLoading to true\n      destination.setLoading(true);\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: {\n          // when fetching quote, the previous\n          // amount is irrelevant\n          amountFrom: type === 'from' ? amount : '',\n          amountTo: type === 'to' ? amount : '',\n          tokenFrom: from.token,\n          tokenTo: to.token,\n          // when fetching quote, the destination\n          // amount is missing\n          isMissingRequiredField: true,\n        },\n      });\n\n      try {\n        const maxSlippage = lifecycleStatus.statusData.maxSlippage;\n        const response = await getSwapQuote(\n          {\n            amount,\n            amountReference: 'from',\n            from: source.token,\n            maxSlippage: String(maxSlippage),\n            to: destination.token,\n            useAggregator,\n          },\n          RequestContext.Swap,\n        );\n        // If request resolves to error response set the quoteError\n        // property of error state to the SwapError response\n        if (isSwapError(response)) {\n          updateLifecycleStatus({\n            statusName: 'error',\n            statusData: {\n              code: response.code,\n              error: response.error,\n              message: '',\n            },\n          });\n          return;\n        }\n        const formattedAmount = formatTokenAmount(\n          response.toAmount,\n          response.to.decimals,\n        );\n        destination.setAmountUSD(response.toAmountUSD);\n        destination.setAmount(formattedAmount);\n        source.setAmountUSD(response.fromAmountUSD);\n        updateLifecycleStatus({\n          statusName: 'amountChange',\n          statusData: {\n            amountFrom: type === 'from' ? amount : formattedAmount,\n            amountTo: type === 'to' ? amount : formattedAmount,\n            tokenFrom: from.token,\n            tokenTo: to.token,\n            // if quote was fetched successfully, we\n            // have all required fields\n            isMissingRequiredField: !formattedAmount,\n          },\n        });\n      } catch (err) {\n        updateLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmSPc01', // Transaction module SwapProvider component 01 error\n            error: JSON.stringify(err),\n            message: '',\n          },\n        });\n      } finally {\n        // reset loading state when quote request resolves\n        destination.setLoading(false);\n      }\n    },\n    [from, to, lifecycleStatus, updateLifecycleStatus, useAggregator],\n  );\n\n  const handleSubmit = useCallback(async () => {\n    if (!address || !from.token || !to.token || !from.amount) {\n      return;\n    }\n\n    try {\n      sendAnalytics(SwapEvent.SwapInitiated, {\n        amount: Number(from.amount),\n      });\n\n      const maxSlippage = lifecycleStatus.statusData.maxSlippage;\n      const response = await buildSwapTransaction(\n        {\n          amount: from.amount,\n          fromAddress: address,\n          from: from.token,\n          maxSlippage: String(maxSlippage),\n          to: to.token,\n          useAggregator,\n        },\n        RequestContext.Swap,\n      );\n      if (isSwapError(response)) {\n        updateLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: response.code,\n            error: response.error,\n            message: response.message,\n          },\n        });\n        return;\n      }\n      await processSwapTransaction({\n        chainId,\n        config: accountConfig,\n        isSponsored,\n        paymaster: paymaster || '',\n        sendCallsAsync,\n        sendTransactionAsync,\n        swapTransaction: response,\n        switchChainAsync,\n        updateLifecycleStatus,\n        useAggregator,\n        walletCapabilities,\n      });\n    } catch (err) {\n      const errorMessage = isUserRejectedRequestError(err)\n        ? 'Request denied.'\n        : GENERIC_ERROR_MESSAGE;\n      updateLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmSPc02', // Transaction module SwapProvider component 02 error\n          error: JSON.stringify(err),\n          message: errorMessage,\n        },\n      });\n    }\n  }, [\n    accountConfig,\n    address,\n    chainId,\n    from.amount,\n    from.token,\n    isSponsored,\n    lifecycleStatus,\n    paymaster,\n    sendCallsAsync,\n    sendTransactionAsync,\n    switchChainAsync,\n    to.token,\n    updateLifecycleStatus,\n    useAggregator,\n    walletCapabilities,\n    sendAnalytics,\n  ]);\n\n  const value = useValue({\n    address,\n    config,\n    from,\n    handleAmountChange,\n    handleToggle,\n    handleSubmit,\n    lifecycleStatus,\n    updateLifecycleStatus,\n    to,\n    isToastVisible,\n    setIsToastVisible,\n    setTransactionHash,\n    transactionHash,\n  });\n\n  return <SwapContext.Provider value={value}>{children}</SwapContext.Provider>;\n}\n"],"names":["_a","_b"],"mappings":"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"}