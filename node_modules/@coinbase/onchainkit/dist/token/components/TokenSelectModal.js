'use client';
import { jsxs, Fragment, jsx } from "react/jsx-runtime";
import { useState, useCallback, useRef, useEffect } from "react";
import { cn, text, background } from "../../styles/theme.js";
import { TokenChip } from "./TokenChip.js";
import { TokenRow } from "./TokenRow.js";
import { TokenSearch } from "./TokenSearch.js";
import { TokenSelectButton } from "./TokenSelectButton.js";
const backdropStyle = {
  background: "rgba(226, 232, 240, 0.5)"
};
function TokenSelectModalInner({
  setToken,
  closeModal,
  options
}) {
  const [filteredTokens, setFilteredTokens] = useState(options);
  const modalRef = useRef(null);
  const handleClick = useCallback(
    (token) => {
      setToken(token);
      closeModal();
    },
    [setToken, closeModal]
  );
  const handleChange = useCallback(
    (text2) => {
      setFilteredTokens(
        options.filter(({ address, name, symbol }) => {
          return address.toLowerCase().startsWith(text2) || name.toLowerCase().includes(text2) || symbol.toLowerCase().includes(text2);
        })
      );
    },
    [options]
  );
  const handleBlur = useCallback(
    (event) => {
      const isOutsideModal = modalRef.current && !modalRef.current.contains(event.target);
      if (isOutsideModal) {
        closeModal();
      }
    },
    [closeModal]
  );
  useEffect(() => {
    setTimeout(() => {
      document.addEventListener("click", handleBlur);
    }, 0);
    return () => {
      document.removeEventListener("click", handleBlur);
    };
  }, [handleBlur]);
  return /* @__PURE__ */ jsx(
    "div",
    {
      "data-testid": "ockTokenSelectModal_Inner",
      className: "fixed top-0 left-0 z-50 flex h-full w-full items-center justify-center",
      style: backdropStyle,
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          ref: modalRef,
          className: cn(
            background.default,
            "flex w-[475px] flex-col gap-3 rounded-3xl p-6"
          ),
          children: [
            /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ jsx("span", { className: text.title3, children: "Select a token" }),
              /* @__PURE__ */ jsx(
                "button",
                {
                  "data-testid": "TokenSelectModal_CloseButton",
                  type: "button",
                  onClick: closeModal,
                  children: /* @__PURE__ */ jsx(
                    "svg",
                    {
                      role: "img",
                      "aria-label": "ock-close-icon",
                      width: "16",
                      height: "16",
                      viewBox: "0 0 16 16",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: /* @__PURE__ */ jsx(
                        "path",
                        {
                          d: "M2.3352 1L1 2.33521L6.66479 8L1 13.6648L2.3352 15L8 9.33521L13.6648 15L15 13.6648L9.33521 8L15 2.33521L13.6648 1L8 6.6648L2.3352 1Z",
                          fill: "#0A0B0D"
                        }
                      )
                    }
                  )
                }
              )
            ] }),
            /* @__PURE__ */ jsx(TokenSearch, { onChange: handleChange, delayMs: 0 }),
            filteredTokens.length > 0 && /* @__PURE__ */ jsx("div", { className: "flex flex-wrap gap-2", children: filteredTokens.slice(0, 4).map((token, idx) => /* @__PURE__ */ jsx(
              TokenChip,
              {
                className: "shadow-none",
                token,
                onClick: handleClick
              },
              `${token.name}${idx}`
            )) }),
            filteredTokens.length > 0 ? /* @__PURE__ */ jsxs("div", { className: "mt-3", children: [
              /* @__PURE__ */ jsx("div", { className: "text-black text-body", children: "Tokens" }),
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: "ock-scrollbar overflow-y-auto",
                  style: { minHeight: "300px", height: "300px" },
                  children: filteredTokens.map((token, idx) => /* @__PURE__ */ jsx(
                    TokenRow,
                    {
                      token,
                      onClick: handleClick
                    },
                    `${token.name}${idx}`
                  ))
                }
              )
            ] }) : /* @__PURE__ */ jsx(
              "div",
              {
                "data-testid": "ockTokenSelectModal_NoTokens",
                className: "text-black text-body",
                style: { minHeight: "368px" },
                children: "No tokens found"
              }
            )
          ]
        }
      )
    }
  );
}
function TokenSelectModal({
  options,
  setToken,
  token
}) {
  const [isOpen, setIsOpen] = useState(false);
  const closeModal = useCallback(() => {
    setIsOpen(false);
  }, []);
  const openModal = useCallback(() => {
    setIsOpen(true);
  }, []);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(TokenSelectButton, { onClick: openModal, isOpen, token }),
    isOpen && /* @__PURE__ */ jsx(
      TokenSelectModalInner,
      {
        options,
        setToken,
        closeModal
      }
    )
  ] });
}
export {
  TokenSelectModal
};
//# sourceMappingURL=TokenSelectModal.js.map
