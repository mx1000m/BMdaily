import { CreateWagmiConfigParams } from './types';
/**
 * createWagmiConfig returns a WagmiConfig (https://wagmi.sh/react/api/createConfig) using OnchainKit provided settings.
 * This function should only be used if the user does not provide WagmiProvider as a parent in the React context.
 */
export declare const createWagmiConfig: ({ apiKey, appName, appLogoUrl, connectors, }: CreateWagmiConfigParams) => import('wagmi').Config<readonly [{
    blockExplorers: {
        readonly default: {
            readonly name: "Basescan";
            readonly url: "https://basescan.org";
            readonly apiUrl: "https://api.basescan.org/api";
        };
    };
    blockTime: 2000;
    contracts: {
        readonly disputeGameFactory: {
            readonly 1: {
                readonly address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e";
            };
        };
        readonly l2OutputOracle: {
            readonly 1: {
                readonly address: "0x56315b90c40730925ec5485cf004d835058518A0";
            };
        };
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 5022;
        };
        readonly portal: {
            readonly 1: {
                readonly address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e";
                readonly blockCreated: 17482143;
            };
        };
        readonly l1StandardBridge: {
            readonly 1: {
                readonly address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35";
                readonly blockCreated: 17482143;
            };
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    ensTlds?: readonly string[] | undefined;
    id: 8453;
    name: "Base";
    nativeCurrency: {
        readonly name: "Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    experimental_preconfirmationTime?: number | undefined | undefined;
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://mainnet.base.org"];
        };
    };
    sourceId: 1;
    testnet?: boolean | undefined | undefined;
    custom?: Record<string, unknown> | undefined;
    fees?: import('viem').ChainFees<undefined> | undefined;
    formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcBlock) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: import('viem').Hex;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: import('viem').Address;
                mixHash: import('viem').Hash;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentBeaconBlockRoot?: `0x${string}` | undefined;
                parentHash: import('viem').Hash;
                receiptsRoot: import('viem').Hex;
                sealFields: import('viem').Hex[];
                sha3Uncles: import('viem').Hash;
                size: bigint;
                stateRoot: import('viem').Hash;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import('viem/chains').OpStackTransaction<boolean>[];
                transactionsRoot: import('viem').Hash;
                uncles: import('viem').Hash[];
                withdrawals?: import('viem').Withdrawal[] | undefined | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            } & {};
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcTransaction) => ({
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean;
                mint?: bigint | undefined | undefined;
                sourceHash: import('viem').Hex;
                type: "deposit";
            } | {
                r: import('viem').Hex;
                s: import('viem').Hex;
                v: bigint;
                to: import('viem').Address | null;
                from: import('viem').Address;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                accessList?: undefined | undefined;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId?: number | undefined;
                yParity?: undefined | undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas?: undefined | undefined;
                maxPriorityFeePerGas?: undefined | undefined;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas?: undefined | undefined;
                maxPriorityFeePerGas?: undefined | undefined;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes: readonly import('viem').Hex[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList: import('viem').SignedAuthorizationList;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip7702";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            }) & {};
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: import('viem').Hash;
                blockNumber: bigint;
                contractAddress: import('viem').Address | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: import('viem').Address;
                gasUsed: bigint;
                logs: import('viem').Log<bigint, number, false>[];
                logsBloom: import('viem').Hex;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: import('viem').Address | null;
                transactionHash: import('viem').Hash;
                transactionIndex: number;
                type: import('viem').TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            } & {};
            type: "transactionReceipt";
        };
    };
    serializers: {
        readonly transaction: typeof import('viem/chains').serializeTransactionOpStack;
    };
}, {
    blockExplorers: {
        readonly default: {
            readonly name: "Basescan";
            readonly url: "https://sepolia.basescan.org";
            readonly apiUrl: "https://api-sepolia.basescan.org/api";
        };
    };
    blockTime: 2000;
    contracts: {
        readonly disputeGameFactory: {
            readonly 11155111: {
                readonly address: "0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1";
            };
        };
        readonly l2OutputOracle: {
            readonly 11155111: {
                readonly address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254";
            };
        };
        readonly portal: {
            readonly 11155111: {
                readonly address: "0x49f53e41452c74589e85ca1677426ba426459e85";
                readonly blockCreated: 4446677;
            };
        };
        readonly l1StandardBridge: {
            readonly 11155111: {
                readonly address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120";
                readonly blockCreated: 4446677;
            };
        };
        readonly multicall3: {
            readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
            readonly blockCreated: 1059647;
        };
        readonly gasPriceOracle: {
            readonly address: "0x420000000000000000000000000000000000000F";
        };
        readonly l1Block: {
            readonly address: "0x4200000000000000000000000000000000000015";
        };
        readonly l2CrossDomainMessenger: {
            readonly address: "0x4200000000000000000000000000000000000007";
        };
        readonly l2Erc721Bridge: {
            readonly address: "0x4200000000000000000000000000000000000014";
        };
        readonly l2StandardBridge: {
            readonly address: "0x4200000000000000000000000000000000000010";
        };
        readonly l2ToL1MessagePasser: {
            readonly address: "0x4200000000000000000000000000000000000016";
        };
    };
    ensTlds?: readonly string[] | undefined;
    id: 84532;
    name: "Base Sepolia";
    nativeCurrency: {
        readonly name: "Sepolia Ether";
        readonly symbol: "ETH";
        readonly decimals: 18;
    };
    experimental_preconfirmationTime?: number | undefined | undefined;
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["https://sepolia.base.org"];
        };
    };
    sourceId: 11155111;
    testnet: true;
    custom?: Record<string, unknown> | undefined;
    fees?: import('viem').ChainFees<undefined> | undefined;
    formatters: {
        readonly block: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcBlock) => {
                baseFeePerGas: bigint | null;
                blobGasUsed: bigint;
                difficulty: bigint;
                excessBlobGas: bigint;
                extraData: import('viem').Hex;
                gasLimit: bigint;
                gasUsed: bigint;
                hash: `0x${string}` | null;
                logsBloom: `0x${string}` | null;
                miner: import('viem').Address;
                mixHash: import('viem').Hash;
                nonce: `0x${string}` | null;
                number: bigint | null;
                parentBeaconBlockRoot?: `0x${string}` | undefined;
                parentHash: import('viem').Hash;
                receiptsRoot: import('viem').Hex;
                sealFields: import('viem').Hex[];
                sha3Uncles: import('viem').Hash;
                size: bigint;
                stateRoot: import('viem').Hash;
                timestamp: bigint;
                totalDifficulty: bigint | null;
                transactions: `0x${string}`[] | import('viem/chains').OpStackTransaction<boolean>[];
                transactionsRoot: import('viem').Hash;
                uncles: import('viem').Hash[];
                withdrawals?: import('viem').Withdrawal[] | undefined | undefined;
                withdrawalsRoot?: `0x${string}` | undefined;
            } & {};
            type: "block";
        };
        readonly transaction: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcTransaction) => ({
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: boolean;
                mint?: bigint | undefined | undefined;
                sourceHash: import('viem').Hex;
                type: "deposit";
            } | {
                r: import('viem').Hex;
                s: import('viem').Hex;
                v: bigint;
                to: import('viem').Address | null;
                from: import('viem').Address;
                gas: bigint;
                nonce: number;
                value: bigint;
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                accessList?: undefined | undefined;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId?: number | undefined;
                yParity?: undefined | undefined;
                type: "legacy";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas?: undefined | undefined;
                maxPriorityFeePerGas?: undefined | undefined;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip2930";
                gasPrice: bigint;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas?: undefined | undefined;
                maxPriorityFeePerGas?: undefined | undefined;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip1559";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList?: undefined | undefined;
                blobVersionedHashes: readonly import('viem').Hex[];
                chainId: number;
                type: "eip4844";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas: bigint;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            } | {
                blockHash: `0x${string}` | null;
                blockNumber: bigint | null;
                from: import('viem').Address;
                gas: bigint;
                hash: import('viem').Hash;
                input: import('viem').Hex;
                nonce: number;
                r: import('viem').Hex;
                s: import('viem').Hex;
                to: import('viem').Address | null;
                transactionIndex: number | null;
                typeHex: import('viem').Hex | null;
                v: bigint;
                value: bigint;
                yParity: number;
                accessList: import('viem').AccessList;
                authorizationList: import('viem').SignedAuthorizationList;
                blobVersionedHashes?: undefined | undefined;
                chainId: number;
                type: "eip7702";
                gasPrice?: undefined | undefined;
                maxFeePerBlobGas?: undefined | undefined;
                maxFeePerGas: bigint;
                maxPriorityFeePerGas: bigint;
                isSystemTx?: undefined | undefined;
                mint?: undefined | undefined;
                sourceHash?: undefined | undefined;
            }) & {};
            type: "transaction";
        };
        readonly transactionReceipt: {
            exclude: [] | undefined;
            format: (args: import('viem/chains').OpStackRpcTransactionReceipt) => {
                blobGasPrice?: bigint | undefined;
                blobGasUsed?: bigint | undefined;
                blockHash: import('viem').Hash;
                blockNumber: bigint;
                contractAddress: import('viem').Address | null | undefined;
                cumulativeGasUsed: bigint;
                effectiveGasPrice: bigint;
                from: import('viem').Address;
                gasUsed: bigint;
                logs: import('viem').Log<bigint, number, false>[];
                logsBloom: import('viem').Hex;
                root?: `0x${string}` | undefined;
                status: "success" | "reverted";
                to: import('viem').Address | null;
                transactionHash: import('viem').Hash;
                transactionIndex: number;
                type: import('viem').TransactionType;
                l1GasPrice: bigint | null;
                l1GasUsed: bigint | null;
                l1Fee: bigint | null;
                l1FeeScalar: number | null;
            } & {};
            type: "transactionReceipt";
        };
    };
    serializers: {
        readonly transaction: typeof import('viem/chains').serializeTransactionOpStack;
    };
    readonly network: "base-sepolia";
}], {
    8453: import('viem').HttpTransport<undefined, false>;
    84532: import('viem').HttpTransport<undefined, false>;
}, import('wagmi').CreateConnectorFn[]>;
//# sourceMappingURL=createWagmiConfig.d.ts.map