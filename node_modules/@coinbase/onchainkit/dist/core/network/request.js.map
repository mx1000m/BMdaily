{"version":3,"file":"request.js","sources":["../../../src/core/network/request.ts"],"sourcesContent":["import { clientMetaManager } from '../clientMeta/clientMetaManager';\nimport {\n  CONTEXT_HEADER,\n  JSON_HEADERS,\n  JSON_RPC_VERSION,\n  POST_METHOD,\n  RequestContext,\n} from './constants';\nimport { getRPCUrl } from './getRPCUrl';\n\nexport type JSONRPCError = {\n  code: number;\n  message: string;\n};\n\nexport type JSONRPCRequest<T> = {\n  id: number;\n  jsonrpc: string;\n  method: string;\n  params: T[];\n};\n\nexport type JSONRPCResult<T> = {\n  error?: JSONRPCError;\n  id: number;\n  jsonrpc: string;\n  result: T;\n};\n\n/**\n * Builds a JSON-RPC request body.\n *\n * @param method - The method name.\n * @param params - The parameters for the method.\n * @returns The JSON-RPC request body.\n * @template T - The type of the parameters.\n */\nexport function buildRequestBody<T>(\n  method: string,\n  params: T[],\n): JSONRPCRequest<T> {\n  return {\n    id: 1,\n    jsonrpc: JSON_RPC_VERSION,\n    method: method,\n    params: params,\n  };\n}\n\n/**\n * Builds the headers for a JSON-RPC request.\n *\n * @params context - Tracks the context where the request originated\n * @returns The headers for the JSON-RPC request.\n */\nasync function buildRequestHeaders(\n  context?: RequestContext,\n): Promise<Record<string, string>> {\n  const headers: Record<string, string> = {\n    ...JSON_HEADERS,\n  };\n\n  const clientMeta = await clientMetaManager.getClientMeta().catch(() => null);\n\n  if (clientMeta) {\n    headers['OnchainKit-Client-Fid'] = clientMeta.clientFid?.toString() ?? '';\n    headers['OnchainKit-Mode'] = clientMeta.mode;\n  }\n\n  if (context) {\n    // if an invalid context is provided, default to 'api'\n    if (!Object.values(RequestContext).includes(context)) {\n      return {\n        ...headers,\n        [CONTEXT_HEADER]: RequestContext.API,\n      };\n    }\n\n    return {\n      ...headers,\n      [CONTEXT_HEADER]: context,\n    };\n  }\n  return headers;\n}\n\n/**\n * Sends a JSON-RPC request to configured RPC URL.\n * Defaults to using the Coinbase Developer Platform Node.\n *\n * @param method - The method name.\n * @param params - The parameters for the method.\n * @returns A promise that resolves to the JSON-RPC response.\n * @throws If an error occurs while sending the request.\n */\nexport async function sendRequest<T, V>(\n  method: string,\n  params: T[],\n  _context?: RequestContext,\n): Promise<JSONRPCResult<V>> {\n  try {\n    const body = buildRequestBody<T>(method, params);\n    const url = getRPCUrl();\n    const response = await fetch(url, {\n      body: JSON.stringify(body),\n      headers: await buildRequestHeaders(_context),\n      method: POST_METHOD,\n    });\n    const data: JSONRPCResult<V> = await response.json();\n    return data;\n  } catch (error) {\n    console.log(\n      `sendRequest: error sending request: ${(error as Error).message}`,\n    );\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;AAqCgB,SAAA,iBACd,QACA,QACmB;AACZ,SAAA;AAAA,IACL,IAAI;AAAA,IACJ,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF;AAQA,eAAe,oBACb,SACiC;;AACjC,QAAM,UAAkC;AAAA,IACtC,GAAG;AAAA,EACL;AAEA,QAAM,aAAa,MAAM,kBAAkB,gBAAgB,MAAM,MAAM,IAAI;AAE3E,MAAI,YAAY;AACd,YAAQ,uBAAuB,MAAI,gBAAW,cAAX,mBAAsB,eAAc;AAC/D,YAAA,iBAAiB,IAAI,WAAW;AAAA,EAAA;AAG1C,MAAI,SAAS;AAEX,QAAI,CAAC,OAAO,OAAO,cAAc,EAAE,SAAS,OAAO,GAAG;AAC7C,aAAA;AAAA,QACL,GAAG;AAAA,QACH,CAAC,cAAc,GAAG,eAAe;AAAA,MACnC;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,GAAG;AAAA,MACH,CAAC,cAAc,GAAG;AAAA,IACpB;AAAA,EAAA;AAEK,SAAA;AACT;AAWsB,eAAA,YACpB,QACA,QACA,UAC2B;AACvB,MAAA;AACI,UAAA,OAAO,iBAAoB,QAAQ,MAAM;AAC/C,UAAM,MAAM,UAAU;AAChB,UAAA,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,MAAM,KAAK,UAAU,IAAI;AAAA,MACzB,SAAS,MAAM,oBAAoB,QAAQ;AAAA,MAC3C,QAAQ;AAAA,IAAA,CACT;AACK,UAAA,OAAyB,MAAM,SAAS,KAAK;AAC5C,WAAA;AAAA,WACA,OAAO;AACN,YAAA;AAAA,MACN,uCAAwC,MAAgB,OAAO;AAAA,IACjE;AACM,UAAA;AAAA,EAAA;AAEV;"}