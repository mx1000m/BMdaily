{"version":3,"file":"attestations.js","sources":["../../../src/core/network/attestations.ts"],"sourcesContent":["import type { Attestation, EASSchemaUid } from '@/identity/types';\nimport { gql } from 'graphql-request';\nimport { getAddress } from 'viem';\nimport type { Address, Chain } from 'viem';\nimport { createEasGraphQLClient } from './createEasGraphQLClient';\n\n/**\n * Type representing the filter options used for querying EAS Attestations.\n * @typedef {Object} GetAttestationQueryVariablesFilters\n * @property {number} [expirationTime] - Optional Unix timestamp to filter attestations based on expiration time.\n * @property {number} [limit] - Optional limit for the number of results returned.\n * @property {boolean} [revoked] - Optional boolean to filter attestations based on their revoked status.\n * @property {EASSchemaUid[]} [schemas] - Optional array of schema UIDs to filter attestations.\n */\ntype GetAttestationQueryVariablesFilters = {\n  expirationTime?: number;\n  limit: number;\n  revoked: boolean;\n  schemas?: EASSchemaUid[];\n};\n\n/** Alias type for filter options when fetching attestations by filter. */\nexport type GetAttestationsByFilterOptions =\n  GetAttestationQueryVariablesFilters;\n\n/**\n * Type representing the variables passed to the EAS Attestations GraphQL query.\n * @typedef {Object} AttestationsQueryVariables\n * @property {string[]} distinct - Fields for which to get distinct records.\n * @property {number} take - Number of records to retrieve.\n * @property {Record<string, any>} where - Conditions for filtering the attestations.\n */\nexport type AttestationsQueryVariables = {\n  distinct: string[];\n  take: number;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  where: Record<string, any>;\n};\n\n/**\n * Type representing the response of the EAS Attestation GraphQL query.\n * @typedef {Object} GetAttestationQueryResponse\n * @property {Attestation[]} attestations - Array of attestation objects.\n */\nexport type GetAttestationQueryResponse = {\n  attestations: Attestation[];\n};\n\n/** Type representing the response when fetching attestations by filter. */\nexport type GetAttestationsByFilterResponse = Attestation[];\n\n/** GraphQL query definition for fetching EAS Attestations for users. */\nexport const attestationQuery = gql`\n  query AttestationsForUsers(\n    $where: AttestationWhereInput\n    $distinct: [AttestationScalarFieldEnum!]\n    $take: Int\n  ) {\n    attestations(where: $where, distinct: $distinct, take: $take) {\n      id\n      txid\n      schemaId\n      attester\n      recipient\n      revoked\n      revocationTime\n      expirationTime\n      time\n      timeCreated\n      decodedDataJson\n    }\n  }\n`;\n\n/**\n * Generates query variables for the EAS Attestation GraphQL query based on the given address and filters.\n *\n * @param {Address} address - The Ethereum address of the recipient.\n * @param {GetAttestationQueryVariablesFilters} filters - Filters to apply to the query.\n * @returns {AttestationsQueryVariables} The query variables for the GraphQL query.\n */\nexport function getAttestationQueryVariables(\n  address: Address,\n  filters: GetAttestationQueryVariablesFilters,\n): AttestationsQueryVariables {\n  const checksummedAddress = getAddress(address);\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  const conditions: Record<string, any> = {\n    recipient: { equals: checksummedAddress },\n    revoked: { equals: filters.revoked },\n  };\n\n  if (typeof filters.expirationTime === 'number') {\n    conditions.OR = [\n      { expirationTime: { equals: 0 } },\n      { expirationTime: { gt: filters.expirationTime } },\n    ];\n  }\n\n  if (filters?.schemas && filters.schemas.length > 0) {\n    conditions.schemaId = { in: filters.schemas };\n  }\n\n  return {\n    where: { AND: [conditions] },\n    distinct: ['schemaId'],\n    take: filters.limit,\n  };\n}\n\n/**\n * Fetches Ethereum Attestation Service (EAS) attestations for a given address and chain,\n * optionally filtered by the provided filter options.\n *\n * @param {Address} address - The Ethereum address for which attestations are being queried.\n * @param {Chain} chain - The blockchain chain of interest.\n * @param {GetAttestationsByFilterOptions} filters - Filter options for querying attestations.\n * @returns {Promise<GetAttestationsByFilterResponse>} A promise that resolves to an array of EAS Attestations.\n */\nexport async function getAttestationsByFilter<TChain extends Chain>(\n  address: Address,\n  chain: TChain,\n  filters: GetAttestationsByFilterOptions,\n): Promise<GetAttestationsByFilterResponse> {\n  const easGraphqlClient = createEasGraphQLClient(chain);\n  const attestationQueryVariables = getAttestationQueryVariables(\n    address,\n    filters,\n  );\n\n  const { attestations } = await easGraphqlClient.request<\n    GetAttestationQueryResponse,\n    AttestationsQueryVariables\n  >(attestationQuery, attestationQueryVariables);\n\n  return attestations;\n}\n"],"names":[],"mappings":";;;AAoDO,MAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BhB,SAAA,6BACd,SACA,SAC4B;AACtB,QAAA,qBAAqB,WAAW,OAAO;AAE7C,QAAM,aAAkC;AAAA,IACtC,WAAW,EAAE,QAAQ,mBAAmB;AAAA,IACxC,SAAS,EAAE,QAAQ,QAAQ,QAAQ;AAAA,EACrC;AAEI,MAAA,OAAO,QAAQ,mBAAmB,UAAU;AAC9C,eAAW,KAAK;AAAA,MACd,EAAE,gBAAgB,EAAE,QAAQ,IAAI;AAAA,MAChC,EAAE,gBAAgB,EAAE,IAAI,QAAQ,eAAiB,EAAA;AAAA,IACnD;AAAA,EAAA;AAGF,OAAI,mCAAS,YAAW,QAAQ,QAAQ,SAAS,GAAG;AAClD,eAAW,WAAW,EAAE,IAAI,QAAQ,QAAQ;AAAA,EAAA;AAGvC,SAAA;AAAA,IACL,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE;AAAA,IAC3B,UAAU,CAAC,UAAU;AAAA,IACrB,MAAM,QAAQ;AAAA,EAChB;AACF;AAWsB,eAAA,wBACpB,SACA,OACA,SAC0C;AACpC,QAAA,mBAAmB,uBAAuB,KAAK;AACrD,QAAM,4BAA4B;AAAA,IAChC;AAAA,IACA;AAAA,EACF;AAEA,QAAM,EAAE,aAAa,IAAI,MAAM,iBAAiB,QAG9C,kBAAkB,yBAAyB;AAEtC,SAAA;AACT;"}