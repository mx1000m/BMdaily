{"version":3,"file":"useThrottle.js","sources":["../../../src/internal/hooks/useThrottle.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\ntype AnyFunction = (...args: unknown[]) => unknown;\n\n/**\n * A hook that returns a throttled version of a callback function.\n * Throttling ensures the callback is executed at most once within the specified delay period.\n *\n * @param callback - The function to throttle\n * @param delay - The number of milliseconds to wait before allowing another execution\n *\n * @returns A throttled version of the callback that maintains the same arguments\n * and automatically cleans up any pending executions on unmount\n *\n * More details on throttle: https://developer.mozilla.org/en-US/docs/Glossary/Throttle\n */\nexport const useThrottle = <T extends AnyFunction>(\n  callback: T,\n  delay: number,\n): ((...args: Parameters<T>) => void) => {\n  const lastCallTime = useRef<number>(0);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n  const lastArgsRef = useRef<Parameters<T>>();\n  const callbackRef = useRef(callback);\n  callbackRef.current = callback;\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return useCallback(\n    (...args: Parameters<T>) => {\n      const now = Date.now();\n      const timeSinceLastCall = now - lastCallTime.current;\n\n      if (timeSinceLastCall >= delay) {\n        // Execute immediately if enough time has passed\n        callbackRef.current(...args);\n        lastCallTime.current = now;\n      } else if (timeoutRef.current) {\n        // Update the scheduled execution with the latest arguments\n        lastArgsRef.current = args;\n      } else if (!timeoutRef.current) {\n        // Store args for delayed execution\n        lastArgsRef.current = args;\n        // Schedule next execution at the end of delay period\n        timeoutRef.current = setTimeout(() => {\n          if (lastArgsRef.current) {\n            callbackRef.current(...lastArgsRef.current);\n            lastCallTime.current = Date.now();\n          }\n          timeoutRef.current = undefined;\n        }, delay - timeSinceLastCall);\n      }\n    },\n    [delay],\n  );\n};\n"],"names":[],"mappings":";AAgBa,MAAA,cAAc,CACzB,UACA,UACuC;AACjC,QAAA,eAAe,OAAe,CAAC;AACrC,QAAM,aAAa,OAAuB;AAC1C,QAAM,cAAc,OAAsB;AACpC,QAAA,cAAc,OAAO,QAAQ;AACnC,cAAY,UAAU;AAGtB,YAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAI,WAAW,SAAS;AACtB,qBAAa,WAAW,OAAO;AAAA,MAAA;AAAA,IAEnC;AAAA,EACF,GAAG,EAAE;AAEE,SAAA;AAAA,IACL,IAAI,SAAwB;AACpB,YAAA,MAAM,KAAK,IAAI;AACf,YAAA,oBAAoB,MAAM,aAAa;AAE7C,UAAI,qBAAqB,OAAO;AAElB,oBAAA,QAAQ,GAAG,IAAI;AAC3B,qBAAa,UAAU;AAAA,MAAA,WACd,WAAW,SAAS;AAE7B,oBAAY,UAAU;AAAA,MAAA,WACb,CAAC,WAAW,SAAS;AAE9B,oBAAY,UAAU;AAEX,mBAAA,UAAU,WAAW,MAAM;AACpC,cAAI,YAAY,SAAS;AACX,wBAAA,QAAQ,GAAG,YAAY,OAAO;AAC7B,yBAAA,UAAU,KAAK,IAAI;AAAA,UAAA;AAElC,qBAAW,UAAU;AAAA,QAAA,GACpB,QAAQ,iBAAiB;AAAA,MAAA;AAAA,IAEhC;AAAA,IACA,CAAC,KAAK;AAAA,EACR;AACF;"}