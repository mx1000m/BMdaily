{"version":3,"file":"usePriceQuote.js","sources":["../../../src/internal/hooks/usePriceQuote.ts"],"sourcesContent":["import { getPriceQuote } from '@/api';\nimport type { GetPriceQuoteResponse, PriceQuoteToken } from '@/api/types';\nimport { RequestContext } from '@/core/network/constants';\nimport { DEFAULT_QUERY_OPTIONS } from '@/internal/constants';\nimport { isApiError } from '@/internal/utils/isApiResponseError';\nimport {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from '@tanstack/react-query';\n\ntype UsePriceQuoteParams<T> = {\n  token: PriceQuoteToken | undefined;\n  queryOptions?: Omit<UseQueryOptions<T>, 'queryKey' | 'queryFn'>;\n};\n\nexport function usePriceQuote(\n  params: UsePriceQuoteParams<GetPriceQuoteResponse>,\n  _context: RequestContext = RequestContext.Hook,\n): UseQueryResult<GetPriceQuoteResponse> {\n  const { token, queryOptions } = params;\n\n  return useQuery({\n    queryKey: ['getPriceQuote', token],\n    queryFn: async () => {\n      if (!token) {\n        return {\n          priceQuotes: [],\n        };\n      }\n\n      const response = await getPriceQuote({ tokens: [token] }, _context);\n\n      if (isApiError(response)) {\n        throw response;\n      }\n\n      return response;\n    },\n    ...DEFAULT_QUERY_OPTIONS,\n    ...queryOptions,\n  });\n}\n"],"names":[],"mappings":";;;;;;;AAgBO,SAAS,cACd,QACA,WAA2B,eAAe,MACH;AACjC,QAAA,EAAE,OAAO,aAAA,IAAiB;AAEhC,SAAO,SAAS;AAAA,IACd,UAAU,CAAC,iBAAiB,KAAK;AAAA,IACjC,SAAS,YAAY;AACnB,UAAI,CAAC,OAAO;AACH,eAAA;AAAA,UACL,aAAa,CAAA;AAAA,QACf;AAAA,MAAA;AAGI,YAAA,WAAW,MAAM,cAAc,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,QAAQ;AAE9D,UAAA,WAAW,QAAQ,GAAG;AAClB,cAAA;AAAA,MAAA;AAGD,aAAA;AAAA,IACT;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,EAAA,CACJ;AACH;"}