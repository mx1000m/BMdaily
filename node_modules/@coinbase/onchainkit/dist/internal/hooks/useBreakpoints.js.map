{"version":3,"file":"useBreakpoints.js","sources":["../../../src/internal/hooks/useBreakpoints.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n// Tailwind breakpoints\nconst BREAKPOINTS = {\n  sm: '(max-width: 640px)',\n  md: '(min-width: 641px) and (max-width: 768px)',\n  lg: '(min-width: 769px) and (max-width: 1023px)',\n  xl: '(min-width: 1024px) and (max-width: 1279px)',\n  '2xl': '(min-width: 1280px)',\n};\n\nexport function useBreakpoints() {\n  const [currentBreakpoint, setCurrentBreakpoint] = useState<\n    string | undefined\n  >(undefined);\n\n  // handles SSR case where window would be undefined,\n  // once component mounts on client, hook sets correct breakpoint\n  useEffect(() => {\n    // get the current breakpoint based on media queries\n    const getCurrentBreakpoint = () => {\n      const entries = Object.entries(BREAKPOINTS) as Array<[string, string]>;\n      for (const [key, query] of entries) {\n        if (window.matchMedia(query).matches) {\n          return key;\n        }\n      }\n      return 'md';\n    };\n\n    // set initial breakpoint\n    setCurrentBreakpoint(getCurrentBreakpoint());\n\n    // listen changes in the window size\n    const handleResize = () => {\n      setCurrentBreakpoint(getCurrentBreakpoint());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return currentBreakpoint;\n}\n"],"names":[],"mappings":";AAGA,MAAM,cAAc;AAAA,EAClB,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,OAAO;AACT;AAEO,SAAS,iBAAiB;AAC/B,QAAM,CAAC,mBAAmB,oBAAoB,IAAI,SAEhD,MAAS;AAIX,YAAU,MAAM;AAEd,UAAM,uBAAuB,MAAM;AAC3B,YAAA,UAAU,OAAO,QAAQ,WAAW;AAC1C,iBAAW,CAAC,KAAK,KAAK,KAAK,SAAS;AAClC,YAAI,OAAO,WAAW,KAAK,EAAE,SAAS;AAC7B,iBAAA;AAAA,QAAA;AAAA,MACT;AAEK,aAAA;AAAA,IACT;AAGA,yBAAqB,sBAAsB;AAG3C,UAAM,eAAe,MAAM;AACzB,2BAAqB,sBAAsB;AAAA,IAC7C;AAEO,WAAA,iBAAiB,UAAU,YAAY;AAC9C,WAAO,MAAM,OAAO,oBAAoB,UAAU,YAAY;AAAA,EAChE,GAAG,EAAE;AAEE,SAAA;AACT;"}