{"version":3,"file":"useLifecycleStatus.js","sources":["../../../src/internal/hooks/useLifecycleStatus.ts"],"sourcesContent":["import type {\n  AbstractLifecycleStatus,\n  LifecycleStatusUpdate,\n  UseLifecycleStatusReturn,\n} from '@/internal/types';\nimport { useCallback, useState } from 'react';\n\nexport function useLifecycleStatus<T extends AbstractLifecycleStatus>(\n  initialState: T,\n): UseLifecycleStatusReturn<T> {\n  const [lifecycleStatus, setLifecycleStatus] = useState<T>(initialState); // Component lifecycle\n\n  // Update lifecycle status, statusData will be persisted for the full lifecycle\n  const updateLifecycleStatus = useCallback(\n    (newStatus: LifecycleStatusUpdate<T>) => {\n      setLifecycleStatus((prevStatus: T) => {\n        // do not persist errors\n        const persistedStatusData =\n          prevStatus.statusName === 'error'\n            ? // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (({ error, code, message, ...statusData }) => statusData)(\n                prevStatus.statusData,\n              )\n            : prevStatus.statusData;\n        return {\n          statusName: newStatus.statusName,\n          statusData: {\n            ...persistedStatusData,\n            ...newStatus.statusData,\n          },\n        } as T;\n      });\n    },\n    [],\n  );\n\n  return [lifecycleStatus, updateLifecycleStatus];\n}\n"],"names":[],"mappings":";AAOO,SAAS,mBACd,cAC6B;AAC7B,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAAY,YAAY;AAGtE,QAAM,wBAAwB;AAAA,IAC5B,CAAC,cAAwC;AACvC,yBAAmB,CAAC,eAAkB;AAE9B,cAAA,sBACJ,WAAW,eAAe;AAAA;AAAA,WAErB,CAAC,EAAE,OAAO,MAAM,SAAS,GAAG,iBAAiB;AAAA,YAC5C,WAAW;AAAA,UAAA;AAAA,YAEb,WAAW;AACV,eAAA;AAAA,UACL,YAAY,UAAU;AAAA,UACtB,YAAY;AAAA,YACV,GAAG;AAAA,YACH,GAAG,UAAU;AAAA,UAAA;AAAA,QAEjB;AAAA,MAAA,CACD;AAAA,IACH;AAAA,IACA,CAAA;AAAA,EACF;AAEO,SAAA,CAAC,iBAAiB,qBAAqB;AAChD;"}