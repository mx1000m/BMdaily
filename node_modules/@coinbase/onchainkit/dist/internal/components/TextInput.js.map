{"version":3,"file":"TextInput.js","sources":["../../../src/internal/components/TextInput.tsx"],"sourcesContent":["import {\n  type ChangeEvent,\n  type InputHTMLAttributes,\n  forwardRef,\n  useCallback,\n} from 'react';\nimport { useDebounce } from '../hooks/useDebounce';\n\ntype TextInputReact = {\n  'aria-label'?: string;\n  className: string;\n  delayMs?: number;\n  disabled?: boolean;\n  /** specify 'decimal' to trigger numeric keyboards on mobile devices */\n  inputMode?: InputHTMLAttributes<HTMLInputElement>['inputMode'];\n  onBlur?: () => void;\n  onChange: (s: string) => void;\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  placeholder: string;\n  setValue?: (s: string) => void;\n  value: string;\n  inputValidator?: (s: string) => boolean;\n};\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputReact>(\n  (\n    {\n      'aria-label': ariaLabel,\n      className,\n      delayMs = 0,\n      disabled = false,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      setValue,\n      inputMode,\n      value,\n      inputValidator = () => true,\n    },\n    ref,\n  ) => {\n    const handleDebounce = useDebounce((value) => {\n      onChange(value);\n    }, delayMs);\n\n    const handleChange = useCallback(\n      (evt: ChangeEvent<HTMLInputElement>) => {\n        const value = evt.target.value;\n\n        if (inputValidator(value)) {\n          setValue?.(value);\n          if (delayMs > 0) {\n            handleDebounce(value);\n          } else {\n            onChange(value);\n          }\n        }\n      },\n      [onChange, handleDebounce, delayMs, setValue, inputValidator],\n    );\n\n    return (\n      <input\n        aria-label={ariaLabel}\n        data-testid=\"ockTextInput_Input\"\n        ref={ref}\n        type=\"text\"\n        className={className}\n        inputMode={inputMode}\n        placeholder={placeholder}\n        value={value}\n        onBlur={onBlur}\n        onChange={handleChange}\n        onFocus={onFocus}\n        disabled={disabled}\n        autoComplete=\"off\" // autocomplete attribute handles browser autocomplete\n        data-1p-ignore={true} // data-1p-ignore attribute handles password manager autocomplete\n      />\n    );\n  },\n);\n\nTextInput.displayName = 'TextInput';\n"],"names":["value"],"mappings":";;;AAwBO,MAAM,YAAY;AAAA,EACvB,CACE;AAAA,IACE,cAAc;AAAA,IACd;AAAA,IACA,UAAU;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB,MAAM;AAAA,KAEzB,QACG;AACG,UAAA,iBAAiB,YAAY,CAACA,WAAU;AAC5C,eAASA,MAAK;AAAA,OACb,OAAO;AAEV,UAAM,eAAe;AAAA,MACnB,CAAC,QAAuC;AAChCA,cAAAA,SAAQ,IAAI,OAAO;AAErB,YAAA,eAAeA,MAAK,GAAG;AACzB,+CAAWA;AACX,cAAI,UAAU,GAAG;AACf,2BAAeA,MAAK;AAAA,UAAA,OACf;AACL,qBAASA,MAAK;AAAA,UAAA;AAAA,QAChB;AAAA,MAEJ;AAAA,MACA,CAAC,UAAU,gBAAgB,SAAS,UAAU,cAAc;AAAA,IAC9D;AAGE,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,cAAY;AAAA,QACZ,eAAY;AAAA,QACZ;AAAA,QACA,MAAK;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,cAAa;AAAA,QACb,kBAAgB;AAAA,MAAA;AAAA,IAClB;AAAA,EAAA;AAGN;AAEA,UAAU,cAAc;"}