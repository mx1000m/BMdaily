{"version":3,"file":"AmountInput.js","sources":["../../../../src/internal/components/amount-input/AmountInput.tsx"],"sourcesContent":["import { useInputResize } from '@/internal/hooks/useInputResize';\nimport { cn, text } from '@/styles/theme';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useAmountInput } from '../../hooks/useAmountInput';\nimport { isValidAmount } from '../../utils/isValidAmount';\nimport { TextInput } from '../TextInput';\nimport { CurrencyLabel } from './CurrencyLabel';\n\ntype AmountInputProps = {\n  asset: string;\n  currency: string;\n  fiatAmount: string;\n  cryptoAmount: string;\n  selectedInputType: 'fiat' | 'crypto';\n  setFiatAmount: (value: string) => void;\n  setCryptoAmount: (value: string) => void;\n  exchangeRate: string;\n  delayMs?: number;\n  className?: string;\n  textClassName?: string;\n};\n\nexport function AmountInput({\n  fiatAmount,\n  cryptoAmount,\n  asset,\n  selectedInputType,\n  currency,\n  setFiatAmount,\n  setCryptoAmount,\n  exchangeRate,\n  delayMs,\n  className,\n  textClassName,\n}: AmountInputProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const measureRef = useRef<HTMLSpanElement>(null);\n  const labelRef = useRef<HTMLSpanElement>(null);\n\n  const currencyOrAsset = selectedInputType === 'fiat' ? currency : asset;\n  const value = selectedInputType === 'fiat' ? fiatAmount : cryptoAmount;\n\n  const updateScale = useInputResize(\n    containerRef,\n    wrapperRef,\n    inputRef,\n    measureRef,\n    labelRef,\n  );\n\n  const { handleChange } = useAmountInput({\n    setFiatAmount,\n    setCryptoAmount,\n    selectedInputType,\n    exchangeRate,\n  });\n\n  const handleAmountChange = useCallback(\n    (value: string) => {\n      handleChange(value, () => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n      });\n    },\n    [handleChange],\n  );\n\n  useEffect(() => {\n    updateScale();\n  }, [value, updateScale]);\n\n  const selectedInputTypeRef = useRef(selectedInputType);\n\n  useEffect(() => {\n    /**\n     * We need to focus the input when the input type changes\n     * but not on the initial render.\n     */\n    if (selectedInputTypeRef.current !== selectedInputType) {\n      selectedInputTypeRef.current = selectedInputType;\n      handleFocusInput();\n    }\n  }, [selectedInputType]);\n\n  const handleFocusInput = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      data-testid=\"ockAmountInputContainer\"\n      className={cn('relative h-24 cursor-text', className)}\n    >\n      <div className=\"absolute inset-x-0 top-6 bottom-4\">\n        <div className=\"relative flex h-14\">\n          <div ref={wrapperRef} className=\"flex flex-shrink-0 items-center\">\n            <TextInput\n              className={cn(\n                text.body,\n                'border-none bg-transparent',\n                'text-6xl leading-none outline-none',\n                '[appearance:textfield]',\n                '[&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none',\n                '[&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none',\n                textClassName,\n              )}\n              value={value}\n              onChange={handleAmountChange}\n              delayMs={delayMs}\n              inputValidator={isValidAmount}\n              ref={inputRef}\n              inputMode=\"decimal\"\n              placeholder=\"0\"\n            />\n            <div className=\"ml-1\">\n              <CurrencyLabel\n                ref={labelRef}\n                label={currencyOrAsset}\n                className={textClassName}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hidden span for measuring text width\n          Without this span the input field would not adjust its width based on the text width and would look like this:\n          [0.12--------Empty Space-------][ETH] - As you can see the currency symbol is far away from the inputted value\n\n          With this span we can measure the width of the text in the input field and set the width of the input field to match the text width\n          [0.12][ETH] - Now the currency symbol is displayed next to the input field\n      */}\n      <span\n        data-testid=\"ockHiddenSpan\"\n        ref={measureRef}\n        className={cn(\n          text.body,\n          'border-none bg-transparent',\n          'text-6xl leading-none outline-none',\n          'pointer-events-none absolute whitespace-nowrap opacity-0',\n          'left-[-99999px]', // Hide the span from the DOM\n        )}\n      >\n        {value ? `${value}.` : '0.'}\n      </span>\n    </div>\n  );\n}\n"],"names":["value"],"mappings":";;;;;;;;AAsBO,SAAS,YAAY;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAqB;AACb,QAAA,eAAe,OAAuB,IAAI;AAC1C,QAAA,aAAa,OAAuB,IAAI;AACxC,QAAA,WAAW,OAAyB,IAAI;AACxC,QAAA,aAAa,OAAwB,IAAI;AACzC,QAAA,WAAW,OAAwB,IAAI;AAEvC,QAAA,kBAAkB,sBAAsB,SAAS,WAAW;AAC5D,QAAA,QAAQ,sBAAsB,SAAS,aAAa;AAE1D,QAAM,cAAc;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEM,QAAA,EAAE,aAAa,IAAI,eAAe;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,QAAM,qBAAqB;AAAA,IACzB,CAACA,WAAkB;AACjB,mBAAaA,QAAO,MAAM;AACxB,YAAI,SAAS,SAAS;AACpB,mBAAS,QAAQ,MAAM;AAAA,QAAA;AAAA,MACzB,CACD;AAAA,IACH;AAAA,IACA,CAAC,YAAY;AAAA,EACf;AAEA,YAAU,MAAM;AACF,gBAAA;AAAA,EAAA,GACX,CAAC,OAAO,WAAW,CAAC;AAEjB,QAAA,uBAAuB,OAAO,iBAAiB;AAErD,YAAU,MAAM;AAKV,QAAA,qBAAqB,YAAY,mBAAmB;AACtD,2BAAqB,UAAU;AACd,uBAAA;AAAA,IAAA;AAAA,EACnB,GACC,CAAC,iBAAiB,CAAC;AAEtB,QAAM,mBAAmB,MAAM;AAC7B,QAAI,SAAS,SAAS;AACpB,eAAS,QAAQ,MAAM;AAAA,IAAA;AAAA,EAE3B;AAGE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAK;AAAA,MACL,eAAY;AAAA,MACZ,WAAW,GAAG,6BAA6B,SAAS;AAAA,MAEpD,UAAA;AAAA,QAAA,oBAAC,OAAI,EAAA,WAAU,qCACb,UAAA,oBAAC,OAAI,EAAA,WAAU,sBACb,UAAA,qBAAC,OAAI,EAAA,KAAK,YAAY,WAAU,mCAC9B,UAAA;AAAA,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW;AAAA,gBACT,KAAK;AAAA,gBACL;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA;AAAA,cACA,UAAU;AAAA,cACV;AAAA,cACA,gBAAgB;AAAA,cAChB,KAAK;AAAA,cACL,WAAU;AAAA,cACV,aAAY;AAAA,YAAA;AAAA,UACd;AAAA,UACA,oBAAC,OAAI,EAAA,WAAU,QACb,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,KAAK;AAAA,cACL,OAAO;AAAA,cACP,WAAW;AAAA,YAAA;AAAA,UAAA,EAEf,CAAA;AAAA,QAAA,EACF,CAAA,EACF,CAAA,GACF;AAAA,QASA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,eAAY;AAAA,YACZ,KAAK;AAAA,YACL,WAAW;AAAA,cACT,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAAA,YACF;AAAA,YAEC,UAAA,QAAQ,GAAG,KAAK,MAAM;AAAA,UAAA;AAAA,QAAA;AAAA,MACzB;AAAA,IAAA;AAAA,EACF;AAEJ;"}