{"version":3,"file":"useDotsPath.js","sources":["../../../../src/internal/components/QrCode/useDotsPath.ts"],"sourcesContent":["import { useMemo } from 'react';\n\ntype LogoConfig = {\n  hasLogo: boolean;\n  logoSize: number;\n  logoMargin: number;\n  logoBorderRadius: number;\n  matrixLength: number;\n  dotSize: number;\n};\n\nconst squareMask = [\n  [1, 1, 1, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1],\n];\n\nconst dotMask = [\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n];\n\nfunction getDistance(x1: number, y1: number, x2: number, y2: number) {\n  return Math.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2);\n}\n\nfunction shouldSkipMaskedCell(\n  i: number,\n  j: number,\n  matrixLength: number,\n): boolean {\n  return Boolean(\n    squareMask[i]?.[j] ||\n      squareMask[i - matrixLength + CORNER_SIZE]?.[j] ||\n      squareMask[i]?.[j - matrixLength + CORNER_SIZE] ||\n      dotMask[i]?.[j] ||\n      dotMask[i - matrixLength + CORNER_SIZE]?.[j] ||\n      dotMask[i]?.[j - matrixLength + CORNER_SIZE],\n  );\n}\n\nfunction shouldSkipLogoArea(\n  i: number,\n  j: number,\n  {\n    hasLogo,\n    logoSize,\n    logoMargin,\n    logoBorderRadius,\n    matrixLength,\n    dotSize,\n  }: LogoConfig,\n): boolean {\n  if (!hasLogo) {\n    return false;\n  }\n\n  const logoAndMarginTotalSize = logoSize + logoMargin * 2;\n  const logoSizeInDots = logoAndMarginTotalSize / dotSize;\n  const midpoint = Math.floor(matrixLength / 2);\n  const isRoundLogo = logoBorderRadius >= logoSize / 2;\n\n  if (isRoundLogo) {\n    const logoRadiusInDots = logoSizeInDots / 2;\n    const distFromMiddleInDots = getDistance(j, i, midpoint, midpoint);\n    return distFromMiddleInDots - 0.5 <= logoRadiusInDots;\n  }\n\n  const numDotsOffCenterToHide = Math.ceil(logoSizeInDots / 2);\n  return (\n    i <= midpoint + numDotsOffCenterToHide &&\n    i >= midpoint - numDotsOffCenterToHide &&\n    j <= midpoint + numDotsOffCenterToHide &&\n    j >= midpoint - numDotsOffCenterToHide\n  );\n}\n\nfunction getDotPath(centerX: number, centerY: number, radius: number): string {\n  return `\n    M ${centerX - radius} ${centerY}\n    A ${radius} ${radius} 0 1 1 ${centerX + radius} ${centerY}\n    A ${radius} ${radius} 0 1 1 ${centerX - radius} ${centerY}`;\n}\n\nexport const CORNER_SIZE = 7;\n\ntype UseDotsPathProps = {\n  matrix: number[][];\n  size: number;\n  logoSize: number;\n  logoMargin: number;\n  logoBorderRadius: number;\n  hasLogo: boolean;\n};\n\nexport function useDotsPath({\n  matrix,\n  size,\n  logoSize,\n  logoMargin,\n  logoBorderRadius,\n  hasLogo,\n}: UseDotsPathProps): string {\n  const dotsPath = useMemo(() => {\n    const cellSize = size / matrix.length;\n    let path = '';\n    const matrixLength = matrix.length;\n    const dotSize = size / matrixLength;\n\n    matrix.forEach((row, i) => {\n      row.forEach((column, j) => {\n        if (\n          shouldSkipMaskedCell(i, j, matrixLength) ||\n          shouldSkipLogoArea(i, j, {\n            hasLogo,\n            logoSize,\n            logoMargin,\n            logoBorderRadius,\n            matrixLength,\n            dotSize,\n          })\n        ) {\n          return;\n        }\n\n        if (column) {\n          const centerX = cellSize * j + cellSize / 2;\n          const centerY = cellSize * i + cellSize / 2;\n          path += getDotPath(centerX, centerY, cellSize / 2);\n        }\n      });\n    });\n\n    return path;\n  }, [hasLogo, logoBorderRadius, logoMargin, logoSize, matrix, size]);\n\n  return dotsPath;\n}\n"],"names":[],"mappings":"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"}