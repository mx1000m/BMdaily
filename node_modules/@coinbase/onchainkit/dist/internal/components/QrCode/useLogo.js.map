{"version":3,"file":"useLogo.js","sources":["../../../../src/internal/components/QrCode/useLogo.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { coinbaseWalletSvg } from '../../svg/coinbaseWalletSvg';\n\ntype RenderLogoProps = {\n  size: number;\n  logo: { uri: string } | React.ReactNode | undefined;\n  logoSize: number;\n  logoBackgroundColor: string;\n  logoMargin: number;\n  logoBorderRadius: number;\n};\n\nconst defaultSvgString = ReactDOMServer.renderToString(coinbaseWalletSvg);\nconst defaultSvgDataUri = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(\n  defaultSvgString,\n)}`;\n\nexport function useLogo({\n  size,\n  logo = defaultSvgDataUri,\n  logoSize,\n  logoBackgroundColor,\n  logoMargin,\n  logoBorderRadius,\n}: RenderLogoProps) {\n  const svgLogo = useMemo(() => {\n    const transformedLogo = React.isValidElement(logo)\n      ? `data:image/svg+xml;charset=utf-8,${encodeURIComponent(\n          ReactDOMServer.renderToString(logo),\n        )}`\n      : logo;\n\n    const logoPosition = (size - logoSize - logoMargin * 2) / 2;\n    const logoBackgroundSize = logoSize + logoMargin * 2;\n\n    return (\n      <g transform={`translate(${logoPosition}, ${logoPosition})`}>\n        <defs>\n          <clipPath id=\"clip-logo\">\n            <rect\n              width={logoSize}\n              height={logoSize}\n              rx={logoBorderRadius}\n              ry={logoBorderRadius}\n            />\n          </clipPath>\n        </defs>\n        <g>\n          <rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n            fill={logoBackgroundColor}\n          />\n        </g>\n        <g transform={`translate(${logoMargin}, ${logoMargin})`}>\n          <image\n            data-testid=\"qr-code-logo\"\n            width={logoSize}\n            height={logoSize}\n            preserveAspectRatio=\"xMidYMid slice\"\n            href={String(transformedLogo)}\n            clipPath=\"url(#clip-logo)\"\n          />\n        </g>\n      </g>\n    );\n  }, [logo, logoBackgroundColor, logoBorderRadius, logoMargin, logoSize, size]);\n  return svgLogo;\n}\n"],"names":[],"mappings":";;;;AAaA,MAAM,mBAAmB,eAAe,eAAe,iBAAiB;AACxE,MAAM,oBAAoB,oCAAoC;AAAA,EAC5D;AACF,CAAC;AAEM,SAAS,QAAQ;AAAA,EACtB;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAoB;AACZ,QAAA,UAAU,QAAQ,MAAM;AAC5B,UAAM,kBAAkB,MAAM,eAAe,IAAI,IAC7C,oCAAoC;AAAA,MAClC,eAAe,eAAe,IAAI;AAAA,IACnC,CAAA,KACD;AAEJ,UAAM,gBAAgB,OAAO,WAAW,aAAa,KAAK;AACpD,UAAA,qBAAqB,WAAW,aAAa;AAEnD,gCACG,KAAE,EAAA,WAAW,aAAa,YAAY,KAAK,YAAY,KACtD,UAAA;AAAA,MAAA,oBAAC,QACC,EAAA,UAAA,oBAAC,YAAS,EAAA,IAAG,aACX,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,IAAI;AAAA,UACJ,IAAI;AAAA,QAAA;AAAA,SAER,EACF,CAAA;AAAA,0BACC,KACC,EAAA,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,MAAM;AAAA,QAAA;AAAA,MAAA,GAEV;AAAA,0BACC,KAAE,EAAA,WAAW,aAAa,UAAU,KAAK,UAAU,KAClD,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,eAAY;AAAA,UACZ,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,qBAAoB;AAAA,UACpB,MAAM,OAAO,eAAe;AAAA,UAC5B,UAAS;AAAA,QAAA;AAAA,MAAA,EAEb,CAAA;AAAA,IAAA,GACF;AAAA,EAAA,GAED,CAAC,MAAM,qBAAqB,kBAAkB,YAAY,UAAU,IAAI,CAAC;AACrE,SAAA;AACT;"}