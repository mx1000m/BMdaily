{"version":3,"file":"FocusTrap.js","sources":["../../../src/internal/components/FocusTrap.tsx"],"sourcesContent":["import type React from 'react';\nimport { useEffect, useRef } from 'react';\n\nconst FOCUSABLE_ELEMENTS_SELECTOR =\n  'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])';\n\ninterface FocusTrapProps {\n  active?: boolean;\n  children?: React.ReactNode;\n}\n\n/**\n * FocusTrap ensures keyboard focus remains within a contained area for accessibility\n */\nexport function FocusTrap({ active = true, children }: FocusTrapProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (!active) {\n      return;\n    }\n    // Store currently focused element to restore later\n    previousFocusRef.current = document.activeElement as HTMLElement;\n\n    if (containerRef.current) {\n      // Query all interactive elements that can receive focus\n      const firstFocusable = containerRef.current.querySelector<HTMLElement>(\n        FOCUSABLE_ELEMENTS_SELECTOR,\n      );\n      firstFocusable?.focus();\n    }\n\n    return () => {\n      // Restore focus to previous element when trap is destroyed\n      previousFocusRef.current?.focus();\n    };\n  }, [active]);\n\n  const getFocusableElements = () =>\n    containerRef.current?.querySelectorAll<HTMLElement>(\n      FOCUSABLE_ELEMENTS_SELECTOR,\n    );\n\n  const handleTabNavigation = (\n    event: React.KeyboardEvent,\n    elements: NodeListOf<HTMLElement>,\n  ) => {\n    const firstElement = elements[0];\n    const lastElement = elements[elements.length - 1];\n    const isFirstElement = document.activeElement === firstElement;\n    const isLastElement = document.activeElement === lastElement;\n\n    if (event.shiftKey && isFirstElement) {\n      event.preventDefault();\n      lastElement.focus();\n    } else if (!event.shiftKey && isLastElement) {\n      event.preventDefault();\n      firstElement.focus();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (!active || event.key !== 'Tab') {\n      return;\n    }\n\n    const focusableElements = getFocusableElements();\n    if (!focusableElements?.length) {\n      return;\n    }\n\n    handleTabNavigation(event, focusableElements);\n  };\n\n  return (\n    <div\n      data-testid=\"ockFocusTrap\"\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      {children}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;AAGA,MAAM,8BACJ;AAUK,SAAS,UAAU,EAAE,SAAS,MAAM,YAA4B;AAC/D,QAAA,eAAe,OAAuB,IAAI;AAC1C,QAAA,mBAAmB,OAA2B,IAAI;AAExD,YAAU,MAAM;AACd,QAAI,CAAC,QAAQ;AACX;AAAA,IAAA;AAGF,qBAAiB,UAAU,SAAS;AAEpC,QAAI,aAAa,SAAS;AAElB,YAAA,iBAAiB,aAAa,QAAQ;AAAA,QAC1C;AAAA,MACF;AACA,uDAAgB;AAAA,IAAM;AAGxB,WAAO,MAAM;;AAEX,6BAAiB,YAAjB,mBAA0B;AAAA,IAC5B;AAAA,EAAA,GACC,CAAC,MAAM,CAAC;AAEL,QAAA,uBAAuB,MAAA;;AAC3B,8BAAa,YAAb,mBAAsB;AAAA,MACpB;AAAA;AAAA;AAGE,QAAA,sBAAsB,CAC1B,OACA,aACG;AACG,UAAA,eAAe,SAAS,CAAC;AAC/B,UAAM,cAAc,SAAS,SAAS,SAAS,CAAC;AAC1C,UAAA,iBAAiB,SAAS,kBAAkB;AAC5C,UAAA,gBAAgB,SAAS,kBAAkB;AAE7C,QAAA,MAAM,YAAY,gBAAgB;AACpC,YAAM,eAAe;AACrB,kBAAY,MAAM;AAAA,IACT,WAAA,CAAC,MAAM,YAAY,eAAe;AAC3C,YAAM,eAAe;AACrB,mBAAa,MAAM;AAAA,IAAA;AAAA,EAEvB;AAEM,QAAA,gBAAgB,CAAC,UAA+B;AACpD,QAAI,CAAC,UAAU,MAAM,QAAQ,OAAO;AAClC;AAAA,IAAA;AAGF,UAAM,oBAAoB,qBAAqB;AAC3C,QAAA,EAAC,uDAAmB,SAAQ;AAC9B;AAAA,IAAA;AAGF,wBAAoB,OAAO,iBAAiB;AAAA,EAC9C;AAGE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,eAAY;AAAA,MACZ,WAAW;AAAA,MACX,KAAK;AAAA,MAEJ;AAAA,IAAA;AAAA,EACH;AAEJ;"}