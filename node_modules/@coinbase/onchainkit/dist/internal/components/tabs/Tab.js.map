{"version":3,"file":"Tab.js","sources":["../../../../src/internal/components/tabs/Tab.tsx"],"sourcesContent":["import { background, cn, color, text } from '@/styles/theme';\nimport { useCallback } from 'react';\nimport { useTabsContext } from './Tabs';\n\ntype TabReact = {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n  'aria-label'?: string;\n  onClick?: () => void;\n};\n\nexport function Tab({\n  value,\n  children,\n  className,\n  'aria-label': ariaLabel,\n  onClick,\n}: TabReact) {\n  const { selectedTab, setSelectedTab } = useTabsContext();\n\n  const isSelected = selectedTab === value;\n\n  const handleClick = useCallback(() => {\n    setSelectedTab(value);\n    onClick?.();\n  }, [value, setSelectedTab, onClick]);\n\n  return (\n    <button\n      className={cn(\n        text.headline,\n        isSelected ? color.inverse : color.foreground,\n        isSelected ? background.primary : background.default,\n        'w-1/2 text-center',\n        'cursor-pointer px-3 py-2',\n        'focus:outline-none focus-visible:ring-2 focus-visible:ring-[var(--ock-text-foreground)] focus-visible:ring-inset',\n        className,\n      )}\n      onClick={handleClick}\n      aria-label={ariaLabel}\n      aria-selected={isSelected}\n      aria-controls={`${value}-panel`}\n      role=\"tab\"\n      type=\"button\"\n      tabIndex={isSelected ? 0 : -1}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAYO,SAAS,IAAI;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd;AACF,GAAa;AACX,QAAM,EAAE,aAAa,eAAe,IAAI,eAAe;AAEvD,QAAM,aAAa,gBAAgB;AAE7B,QAAA,cAAc,YAAY,MAAM;AACpC,mBAAe,KAAK;AACV;AAAA,EACT,GAAA,CAAC,OAAO,gBAAgB,OAAO,CAAC;AAGjC,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW;AAAA,QACT,KAAK;AAAA,QACL,aAAa,MAAM,UAAU,MAAM;AAAA,QACnC,aAAa,WAAW,UAAU,WAAW;AAAA,QAC7C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAS;AAAA,MACT,cAAY;AAAA,MACZ,iBAAe;AAAA,MACf,iBAAe,GAAG,KAAK;AAAA,MACvB,MAAK;AAAA,MACL,MAAK;AAAA,MACL,UAAU,aAAa,IAAI;AAAA,MAE1B;AAAA,IAAA;AAAA,EACH;AAEJ;"}