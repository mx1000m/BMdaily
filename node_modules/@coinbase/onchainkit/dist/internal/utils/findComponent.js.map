{"version":3,"file":"findComponent.js","sources":["../../../src/internal/utils/findComponent.ts"],"sourcesContent":["import { isValidElement } from 'react';\nimport type { ComponentType, ReactElement, ReactNode } from 'react';\n\n/** Type for Next.js Server Component Payload\n * Temporary patch until we update to default children and remove internal findComponent */\nexport interface ServerComponentPayload {\n  _payload: {\n    /** [modulePath, chunks, componentName] */\n    value: [string, string[], string];\n  };\n}\n\nexport function findComponent<T>(Component: ComponentType<T>) {\n  return (child: ReactNode): child is ReactElement<T> => {\n    const childType = (child as ReactElement<T>)?.type;\n\n    // Handle server component payload\n    if (childType && typeof childType === 'object' && '_payload' in childType) {\n      const serverPayload = childType as ServerComponentPayload;\n      return serverPayload._payload.value[2] === Component.name;\n    }\n\n    // Handle client component\n    return isValidElement(child) && child.type === Component;\n  };\n}\n"],"names":[],"mappings":";AAYO,SAAS,cAAiB,WAA6B;AAC5D,SAAO,CAAC,UAA+C;AACrD,UAAM,YAAa,+BAA2B;AAG9C,QAAI,aAAa,OAAO,cAAc,YAAY,cAAc,WAAW;AACzE,YAAM,gBAAgB;AACtB,aAAO,cAAc,SAAS,MAAM,CAAC,MAAM,UAAU;AAAA,IAAA;AAIvD,WAAO,eAAe,KAAK,KAAK,MAAM,SAAS;AAAA,EACjD;AACF;"}