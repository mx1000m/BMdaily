'use client';
import { jsx } from "react/jsx-runtime";
import { setOnchainKitConfig } from "./core/OnchainKitConfig.js";
import { createContext, useState, useEffect, useCallback, useMemo, useContext } from "react";
import { DefaultOnchainKitProviders } from "./DefaultOnchainKitProviders.js";
import OnchainKitProviderBoundary from "./OnchainKitProviderBoundary.js";
import { DEFAULT_PRIVACY_URL, DEFAULT_TERMS_URL } from "./core/constants.js";
import { COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID } from "./identity/constants.js";
import { checkHashLength } from "./internal/utils/checkHashLength.js";
import { generateUUIDWithInsecureFallback } from "./utils/crypto.js";
import { OnchainKitContext } from "./useOnchainKit.js";
import { clientMetaManager } from "./core/clientMeta/clientMetaManager.js";
import sdk from "@farcaster/frame-sdk";
import { farcasterFrame } from "@farcaster/miniapp-wagmi-connector";
import { coinbaseWallet } from "wagmi/connectors";
import { AutoConnect } from "./minikit/components/AutoConnect.js";
const emptyContext = {};
const MiniKitContext = createContext(emptyContext);
function MiniKitProvider({
  children,
  notificationProxyUrl = "/api/notify",
  autoConnect = true,
  ...onchainKitProps
}) {
  var _a, _b, _c, _d, _e, _f;
  const [context, setContext] = useState(null);
  useEffect(() => {
    sdk.on("miniAppAdded", ({ notificationDetails }) => {
      if (notificationDetails) {
        updateClientContext({
          details: notificationDetails,
          frameAdded: true
        });
      }
    });
    sdk.on("miniAppAddRejected", ({ reason }) => {
      console.error("Mini app add rejected", reason);
    });
    sdk.on("miniAppRemoved", () => {
      updateClientContext({
        details: void 0,
        frameAdded: false
      });
    });
    sdk.on("notificationsEnabled", ({ notificationDetails }) => {
      updateClientContext({
        details: notificationDetails
      });
    });
    sdk.on("notificationsDisabled", () => {
      updateClientContext({
        details: void 0
      });
    });
    async function fetchContext() {
      try {
        const context2 = await sdk.context;
        setContext(context2);
      } catch (error) {
        console.error("Error fetching context:", error);
      }
    }
    fetchContext();
    return () => {
      sdk.removeAllListeners();
    };
  }, []);
  const updateClientContext = useCallback(
    ({ details, frameAdded }) => {
      setContext((prevContext) => {
        if (!prevContext) {
          return null;
        }
        return {
          ...prevContext,
          client: {
            ...prevContext.client,
            notificationDetails: details ?? void 0,
            added: frameAdded ?? prevContext.client.added
          }
        };
      });
    },
    []
  );
  const connectors = useMemo(() => {
    var _a2, _b2;
    return [
      context ? farcasterFrame() : coinbaseWallet({
        appName: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,
        appLogoUrl: process.env.NEXT_PUBLIC_ICON_URL,
        preference: (_b2 = (_a2 = onchainKitProps.config) == null ? void 0 : _a2.wallet) == null ? void 0 : _b2.preference
      })
    ];
  }, [context, (_b = (_a = onchainKitProps.config) == null ? void 0 : _a.wallet) == null ? void 0 : _b.preference]);
  const value = useMemo(() => {
    return {
      context,
      updateClientContext,
      notificationProxyUrl,
      __isMiniKit: true
    };
  }, [updateClientContext, notificationProxyUrl, context]);
  return /* @__PURE__ */ jsx(MiniKitContext.Provider, { value, children: /* @__PURE__ */ jsx(DefaultOnchainKitProviders, { connectors, children: /* @__PURE__ */ jsx(OnchainKitProvider, { ...onchainKitProps, children: /* @__PURE__ */ jsx(AutoConnect, { enabled: autoConnect, children: /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        paddingTop: ((_c = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _c.top) ?? 0,
        paddingBottom: ((_d = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _d.bottom) ?? 0,
        paddingLeft: ((_e = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _e.left) ?? 0,
        paddingRight: ((_f = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _f.right) ?? 0
      },
      children
    }
  ) }) }) }) });
}
function OnchainKitProvider({
  address,
  analytics,
  apiKey,
  chain,
  children,
  config,
  projectId,
  rpcUrl,
  schemaId
}) {
  var _a;
  if (schemaId && !checkHashLength(schemaId, 64)) {
    throw Error('EAS schemaId must be 64 characters prefixed with "0x"');
  }
  const sessionId = useMemo(() => generateUUIDWithInsecureFallback(), []);
  const isMiniKit = !!((_a = useContext(MiniKitContext)) == null ? void 0 : _a.__isMiniKit);
  useEffect(() => {
    if (clientMetaManager.isInitialized()) return;
    clientMetaManager.init({ isMiniKit });
  }, [isMiniKit]);
  const value = useMemo(() => {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
    const defaultPaymasterUrl = apiKey ? `https://api.developer.coinbase.com/rpc/v1/${chain.name.replace(" ", "-").toLowerCase()}/${apiKey}` : null;
    const onchainKitConfig = {
      address: address ?? null,
      apiKey: apiKey ?? null,
      chain,
      config: {
        analytics: analytics ?? true,
        analyticsUrl: (config == null ? void 0 : config.analyticsUrl) ?? null,
        appearance: {
          name: ((_a2 = config == null ? void 0 : config.appearance) == null ? void 0 : _a2.name) ?? "Dapp",
          logo: ((_b = config == null ? void 0 : config.appearance) == null ? void 0 : _b.logo) ?? "",
          mode: ((_c = config == null ? void 0 : config.appearance) == null ? void 0 : _c.mode) ?? "auto",
          theme: ((_d = config == null ? void 0 : config.appearance) == null ? void 0 : _d.theme) ?? "default"
        },
        paymaster: (config == null ? void 0 : config.paymaster) || defaultPaymasterUrl,
        wallet: {
          display: ((_e = config == null ? void 0 : config.wallet) == null ? void 0 : _e.display) ?? "classic",
          preference: ((_f = config == null ? void 0 : config.wallet) == null ? void 0 : _f.preference) ?? "all",
          signUpEnabled: ((_g = config == null ? void 0 : config.wallet) == null ? void 0 : _g.signUpEnabled) ?? true,
          termsUrl: ((_h = config == null ? void 0 : config.wallet) == null ? void 0 : _h.termsUrl) || DEFAULT_TERMS_URL,
          privacyUrl: ((_i = config == null ? void 0 : config.wallet) == null ? void 0 : _i.privacyUrl) || DEFAULT_PRIVACY_URL,
          supportedWallets: {
            rabby: ((_k = (_j = config == null ? void 0 : config.wallet) == null ? void 0 : _j.supportedWallets) == null ? void 0 : _k.rabby) ?? false,
            trust: ((_m = (_l = config == null ? void 0 : config.wallet) == null ? void 0 : _l.supportedWallets) == null ? void 0 : _m.trust) ?? false,
            frame: ((_o = (_n = config == null ? void 0 : config.wallet) == null ? void 0 : _n.supportedWallets) == null ? void 0 : _o.frame) ?? false
          }
        }
      },
      projectId: projectId ?? null,
      rpcUrl: rpcUrl ?? null,
      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
      sessionId
    };
    setOnchainKitConfig(onchainKitConfig);
    return onchainKitConfig;
  }, [
    address,
    analytics,
    apiKey,
    chain,
    config,
    projectId,
    rpcUrl,
    schemaId,
    sessionId
  ]);
  return /* @__PURE__ */ jsx(OnchainKitContext.Provider, { value, children: /* @__PURE__ */ jsx(DefaultOnchainKitProviders, { children: /* @__PURE__ */ jsx(OnchainKitProviderBoundary, { children }) }) });
}
export {
  MiniKitProvider as M,
  OnchainKitProvider as O,
  MiniKitContext as a,
  emptyContext as e
};
//# sourceMappingURL=OnchainKitProvider-C29aWJbj.js.map
