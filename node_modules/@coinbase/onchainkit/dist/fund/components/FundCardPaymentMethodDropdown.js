'use client';
import { jsxs, jsx } from "react/jsx-runtime";
import { isApplePaySupported } from "../../buy/utils/isApplePaySupported.js";
import { Skeleton } from "../../internal/components/Skeleton.js";
import { useOutsideClick } from "../../internal/hooks/useOutsideClick.js";
import { formatFiatAmount } from "../../internal/utils/formatFiatAmount.js";
import { useState, useMemo, useCallback, useEffect, useRef } from "react";
import { useAnalytics } from "../../core/analytics/hooks/useAnalytics.js";
import { FundEvent } from "../../core/analytics/types.js";
import { cn, background, border } from "../../styles/theme.js";
import { FundCardPaymentMethodSelectRow } from "./FundCardPaymentMethodSelectRow.js";
import { FundCardPaymentMethodSelectorToggle } from "./FundCardPaymentMethodSelectorToggle.js";
import { useFundContext } from "./FundCardProvider.js";
function FundCardPaymentMethodDropdown({
  className
}) {
  const [isOpen, setIsOpen] = useState(false);
  const {
    selectedPaymentMethod,
    setSelectedPaymentMethod,
    paymentMethods,
    fundAmountFiat,
    isPaymentMethodsLoading,
    currency
  } = useFundContext();
  const { sendAnalytics } = useAnalytics();
  const filteredPaymentMethods = useMemo(() => {
    return paymentMethods.filter(
      (method) => method.id !== "APPLE_PAY" || isApplePaySupported()
    );
  }, [paymentMethods]);
  const getPaymentMethodDisabledReason = useCallback(
    (method) => {
      const amount = Number(fundAmountFiat);
      if (method.minAmount && amount < method.minAmount) {
        return `Minimum amount of ${formatFiatAmount({
          amount: method.minAmount,
          currency,
          minimumFractionDigits: 0
        })} required`;
      }
      if (method.maxAmount && amount > method.maxAmount) {
        return `Maximum amount allowed is ${formatFiatAmount({
          amount: method.maxAmount,
          currency,
          minimumFractionDigits: 0
        })}`;
      }
      return void 0;
    },
    [fundAmountFiat, currency]
  );
  const isPaymentMethodDisabled = useCallback(
    (method) => {
      if (!fundAmountFiat) {
        return false;
      }
      return Boolean(getPaymentMethodDisabledReason(method));
    },
    [fundAmountFiat, getPaymentMethodDisabledReason]
  );
  useEffect(() => {
    if (selectedPaymentMethod && isPaymentMethodDisabled(selectedPaymentMethod)) {
      const coinbaseMethod = paymentMethods.find((m) => m.id === "");
      if (coinbaseMethod) {
        setSelectedPaymentMethod(coinbaseMethod);
      }
    }
  }, [
    selectedPaymentMethod,
    paymentMethods,
    setSelectedPaymentMethod,
    isPaymentMethodDisabled
  ]);
  const handlePaymentMethodSelect = useCallback(
    (paymentMethod2) => {
      if (!isPaymentMethodDisabled(paymentMethod2)) {
        sendAnalytics(FundEvent.FundOptionSelected, {
          option: paymentMethod2.id
        });
        setSelectedPaymentMethod(paymentMethod2);
        setIsOpen(false);
      }
    },
    [setSelectedPaymentMethod, isPaymentMethodDisabled, sendAnalytics]
  );
  const handleToggle = useCallback(() => {
    setIsOpen(!isOpen);
  }, [isOpen]);
  const dropdownRef = useRef(null);
  const dropdownContainerRef = useRef(null);
  const buttonRef = useRef(null);
  useOutsideClick(dropdownContainerRef, () => {
    if (isOpen) {
      setIsOpen(false);
    }
  });
  const handleEscKeyPress = useCallback(
    (event) => {
      if (event.key === "Escape") {
        setIsOpen(false);
      }
    },
    []
  );
  const paymentMethod = selectedPaymentMethod || filteredPaymentMethods[0];
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: cn("relative py-4", className),
      ref: dropdownContainerRef,
      "data-testid": "ockFundCardPaymentMethodDropdownContainer",
      onKeyUp: handleEscKeyPress,
      children: [
        isPaymentMethodsLoading || !paymentMethod ? /* @__PURE__ */ jsx(Skeleton, { className: "h-12 w-full" }) : /* @__PURE__ */ jsx(
          FundCardPaymentMethodSelectorToggle,
          {
            ref: buttonRef,
            onClick: handleToggle,
            isOpen,
            paymentMethod
          }
        ),
        isOpen && /* @__PURE__ */ jsx(
          "div",
          {
            ref: dropdownRef,
            "data-testid": "ockFundCardPaymentMethodDropdown",
            className: cn(
              border.radius,
              border.lineDefault,
              "ock-scrollbar absolute z-10 mt-2 flex w-full flex-col overflow-y-hidden"
            ),
            children: /* @__PURE__ */ jsx("div", { className: cn(background.default, "overflow-y-auto p-2"), children: filteredPaymentMethods.map((paymentMethod2) => {
              const isDisabled = isPaymentMethodDisabled(paymentMethod2);
              return /* @__PURE__ */ jsx(
                FundCardPaymentMethodSelectRow,
                {
                  testId: `ockFundCardPaymentMethodSelectRow__${paymentMethod2.id}`,
                  paymentMethod: paymentMethod2,
                  onClick: handlePaymentMethodSelect,
                  disabled: isDisabled,
                  disabledReason: getPaymentMethodDisabledReason(paymentMethod2)
                },
                paymentMethod2.name
              );
            }) })
          }
        )
      ]
    }
  );
}
export {
  FundCardPaymentMethodDropdown
};
//# sourceMappingURL=FundCardPaymentMethodDropdown.js.map
