{"version":3,"file":"FundCardProvider.js","sources":["../../../src/fund/components/FundCardProvider.tsx"],"sourcesContent":["'use client';\nimport type { LifecycleStatusUpdate } from '@/internal/types';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport { FundEvent } from '../../core/analytics/types';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { useEmitLifecycleStatus } from '../hooks/useEmitLifecycleStatus';\nimport { useOnrampExchangeRate } from '../hooks/useOnrampExchangeRate';\nimport { usePaymentMethods } from '../hooks/usePaymentMethods';\nimport type {\n  AmountInputType,\n  FundButtonStateReact,\n  FundCardProviderReact,\n  LifecycleStatus,\n  OnrampError,\n  PaymentMethod,\n  PresetAmountInputs,\n} from '../types';\n\ntype FundCardContextType = {\n  asset: string;\n  currency: string;\n  selectedPaymentMethod?: PaymentMethod;\n  setSelectedPaymentMethod: (paymentMethod: PaymentMethod) => void;\n  selectedInputType: AmountInputType;\n  setSelectedInputType: (inputType: AmountInputType) => void;\n  fundAmountFiat: string;\n  setFundAmountFiat: (amount: string) => void;\n  fundAmountCrypto: string;\n  setFundAmountCrypto: (amount: string) => void;\n  exchangeRate: number;\n  setExchangeRate: (exchangeRate: number) => void;\n  exchangeRateLoading: boolean;\n  setExchangeRateLoading: (loading: boolean) => void;\n  submitButtonState: FundButtonStateReact;\n  setSubmitButtonState: (state: FundButtonStateReact) => void;\n  paymentMethods: PaymentMethod[];\n  setPaymentMethods: (paymentMethods: PaymentMethod[]) => void;\n  isPaymentMethodsLoading: boolean;\n  setIsPaymentMethodsLoading: (loading: boolean) => void;\n  headerText?: string;\n  buttonText?: string;\n  country: string;\n  subdivision?: string;\n  inputType?: 'fiat' | 'crypto';\n  lifecycleStatus: LifecycleStatus;\n\n  presetAmountInputs?: PresetAmountInputs;\n  updateLifecycleStatus: (\n    newStatus: LifecycleStatusUpdate<LifecycleStatus>,\n  ) => void;\n  onError?: (error: OnrampError) => void;\n};\n\nconst FundContext = createContext<FundCardContextType | undefined>(undefined);\n\nexport function FundCardProvider({\n  children,\n  asset,\n  currency = 'USD',\n  headerText = `Buy ${asset.toUpperCase()}`,\n  buttonText,\n  country,\n  subdivision,\n  inputType,\n  onError,\n  onStatus,\n  onSuccess,\n  presetAmountInputs,\n}: FundCardProviderReact) {\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<\n    PaymentMethod | undefined\n  >();\n  const [selectedInputType, setSelectedInputType] = useState<AmountInputType>(\n    inputType || 'fiat',\n  );\n  const [fundAmountFiat, setFundAmountFiat] = useState<string>('');\n  const [fundAmountCrypto, setFundAmountCrypto] = useState<string>('');\n  const [exchangeRate, setExchangeRate] = useState<number>(0);\n  const [exchangeRateLoading, setExchangeRateLoading] = useState<boolean>(true);\n\n  const [submitButtonState, setSubmitButtonState] =\n    useState<FundButtonStateReact>('default');\n\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\n  const [isPaymentMethodsLoading, setIsPaymentMethodsLoading] =\n    useState<boolean>(true);\n  const { lifecycleStatus, updateLifecycleStatus } = useEmitLifecycleStatus({\n    onError,\n    onSuccess,\n    onStatus,\n  });\n\n  const { fetchExchangeRate } = useOnrampExchangeRate({\n    asset,\n    currency,\n    country,\n    subdivision,\n    setExchangeRate,\n    onError,\n  });\n\n  const { sendAnalytics } = useAnalytics();\n\n  const handleAnalyticsAmountChanged = useCallback(\n    (amount: number, currency: string) => {\n      sendAnalytics(FundEvent.FundAmountChanged, {\n        amount,\n        currency,\n      });\n    },\n    [sendAnalytics],\n  );\n\n  const handleAnalyticsOptionSelected = useCallback(\n    (option: string) => {\n      sendAnalytics(FundEvent.FundOptionSelected, {\n        option,\n      });\n    },\n    [sendAnalytics],\n  );\n\n  const handleSetFundAmountFiat = useCallback(\n    (amount: string) => {\n      const newAmount = Number.parseFloat(amount);\n\n      if (!Number.isNaN(newAmount)) {\n        handleAnalyticsAmountChanged(newAmount, currency);\n      }\n\n      setFundAmountFiat(amount);\n    },\n    [currency, handleAnalyticsAmountChanged],\n  );\n\n  const handleSetSelectedPaymentMethod = useCallback(\n    (paymentMethod: PaymentMethod) => {\n      handleAnalyticsOptionSelected(paymentMethod.id);\n      setSelectedPaymentMethod(paymentMethod);\n    },\n    [handleAnalyticsOptionSelected],\n  );\n\n  const handleFetchExchangeRate = useCallback(async () => {\n    setExchangeRateLoading(true);\n    await fetchExchangeRate();\n    setExchangeRateLoading(false);\n  }, [fetchExchangeRate]);\n\n  useEffect(() => {\n    handleFetchExchangeRate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetches and sets the payment methods to the context\n  usePaymentMethods({\n    country,\n    subdivision,\n    currency,\n    setPaymentMethods,\n    setIsPaymentMethodsLoading,\n    onError,\n  });\n\n  const value = useValue<FundCardContextType>({\n    asset,\n    currency,\n    selectedPaymentMethod,\n    setSelectedPaymentMethod: handleSetSelectedPaymentMethod,\n    fundAmountFiat,\n    setFundAmountFiat: handleSetFundAmountFiat,\n    fundAmountCrypto,\n    setFundAmountCrypto,\n    selectedInputType,\n    setSelectedInputType,\n    exchangeRate,\n    setExchangeRate,\n    exchangeRateLoading,\n    setExchangeRateLoading,\n    submitButtonState,\n    setSubmitButtonState,\n    paymentMethods,\n    setPaymentMethods,\n    isPaymentMethodsLoading,\n    setIsPaymentMethodsLoading,\n    headerText,\n    buttonText,\n    country,\n    subdivision,\n    lifecycleStatus,\n    updateLifecycleStatus,\n    presetAmountInputs,\n    onError,\n  });\n  return <FundContext.Provider value={value}>{children}</FundContext.Provider>;\n}\n\nexport function useFundContext() {\n  const context = useContext(FundContext);\n\n  if (!context) {\n    throw new Error('useFundContext must be used within a FundCardProvider');\n  }\n\n  return context;\n}\n"],"names":["currency"],"mappings":"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"}