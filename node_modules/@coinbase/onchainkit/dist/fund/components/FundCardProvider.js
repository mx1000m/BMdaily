'use client';
import { jsx } from "react/jsx-runtime";
import { createContext, useState, useCallback, useEffect, useContext } from "react";
import { useAnalytics } from "../../core/analytics/hooks/useAnalytics.js";
import { FundEvent } from "../../core/analytics/types.js";
import { useValue } from "../../internal/hooks/useValue.js";
import { useEmitLifecycleStatus } from "../hooks/useEmitLifecycleStatus.js";
import { useOnrampExchangeRate } from "../hooks/useOnrampExchangeRate.js";
import { usePaymentMethods } from "../hooks/usePaymentMethods.js";
const FundContext = createContext(void 0);
function FundCardProvider({
  children,
  asset,
  currency = "USD",
  headerText = `Buy ${asset.toUpperCase()}`,
  buttonText,
  country,
  subdivision,
  inputType,
  onError,
  onStatus,
  onSuccess,
  presetAmountInputs
}) {
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState();
  const [selectedInputType, setSelectedInputType] = useState(
    inputType || "fiat"
  );
  const [fundAmountFiat, setFundAmountFiat] = useState("");
  const [fundAmountCrypto, setFundAmountCrypto] = useState("");
  const [exchangeRate, setExchangeRate] = useState(0);
  const [exchangeRateLoading, setExchangeRateLoading] = useState(true);
  const [submitButtonState, setSubmitButtonState] = useState("default");
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [isPaymentMethodsLoading, setIsPaymentMethodsLoading] = useState(true);
  const { lifecycleStatus, updateLifecycleStatus } = useEmitLifecycleStatus({
    onError,
    onSuccess,
    onStatus
  });
  const { fetchExchangeRate } = useOnrampExchangeRate({
    asset,
    currency,
    country,
    subdivision,
    setExchangeRate,
    onError
  });
  const { sendAnalytics } = useAnalytics();
  const handleAnalyticsAmountChanged = useCallback(
    (amount, currency2) => {
      sendAnalytics(FundEvent.FundAmountChanged, {
        amount,
        currency: currency2
      });
    },
    [sendAnalytics]
  );
  const handleAnalyticsOptionSelected = useCallback(
    (option) => {
      sendAnalytics(FundEvent.FundOptionSelected, {
        option
      });
    },
    [sendAnalytics]
  );
  const handleSetFundAmountFiat = useCallback(
    (amount) => {
      const newAmount = Number.parseFloat(amount);
      if (!Number.isNaN(newAmount)) {
        handleAnalyticsAmountChanged(newAmount, currency);
      }
      setFundAmountFiat(amount);
    },
    [currency, handleAnalyticsAmountChanged]
  );
  const handleSetSelectedPaymentMethod = useCallback(
    (paymentMethod) => {
      handleAnalyticsOptionSelected(paymentMethod.id);
      setSelectedPaymentMethod(paymentMethod);
    },
    [handleAnalyticsOptionSelected]
  );
  const handleFetchExchangeRate = useCallback(async () => {
    setExchangeRateLoading(true);
    await fetchExchangeRate();
    setExchangeRateLoading(false);
  }, [fetchExchangeRate]);
  useEffect(() => {
    handleFetchExchangeRate();
  }, []);
  usePaymentMethods({
    country,
    subdivision,
    currency,
    setPaymentMethods,
    setIsPaymentMethodsLoading,
    onError
  });
  const value = useValue({
    asset,
    currency,
    selectedPaymentMethod,
    setSelectedPaymentMethod: handleSetSelectedPaymentMethod,
    fundAmountFiat,
    setFundAmountFiat: handleSetFundAmountFiat,
    fundAmountCrypto,
    setFundAmountCrypto,
    selectedInputType,
    setSelectedInputType,
    exchangeRate,
    setExchangeRate,
    exchangeRateLoading,
    setExchangeRateLoading,
    submitButtonState,
    setSubmitButtonState,
    paymentMethods,
    setPaymentMethods,
    isPaymentMethodsLoading,
    setIsPaymentMethodsLoading,
    headerText,
    buttonText,
    country,
    subdivision,
    lifecycleStatus,
    updateLifecycleStatus,
    presetAmountInputs,
    onError
  });
  return /* @__PURE__ */ jsx(FundContext.Provider, { value, children });
}
function useFundContext() {
  const context = useContext(FundContext);
  if (!context) {
    throw new Error("useFundContext must be used within a FundCardProvider");
  }
  return context;
}
export {
  FundCardProvider,
  useFundContext
};
//# sourceMappingURL=FundCardProvider.js.map
