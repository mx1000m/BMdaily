'use client';
import { jsx } from "react/jsx-runtime";
import { AmountInput } from "../../internal/components/amount-input/AmountInput.js";
import { useThrottle } from "../../internal/hooks/useThrottle.js";
import { useCallback } from "react";
import { useAnalytics } from "../../core/analytics/hooks/useAnalytics.js";
import { FundEvent } from "../../core/analytics/types.js";
import { useOnrampExchangeRate } from "../hooks/useOnrampExchangeRate.js";
import { useFundContext } from "./FundCardProvider.js";
const THROTTLE_DELAY_MS = 5e3;
const FundCardAmountInput = ({
  className
}) => {
  const {
    fundAmountFiat,
    fundAmountCrypto,
    asset,
    selectedInputType,
    currency,
    exchangeRate,
    setFundAmountFiat,
    setFundAmountCrypto,
    country,
    subdivision,
    setExchangeRate,
    onError
  } = useFundContext();
  const { fetchExchangeRate } = useOnrampExchangeRate({
    asset,
    currency,
    country,
    subdivision,
    setExchangeRate,
    onError
  });
  const throttledFetchExchangeRate = useThrottle(
    fetchExchangeRate,
    THROTTLE_DELAY_MS
  );
  const { sendAnalytics } = useAnalytics();
  const handleFiatAmountChange = useCallback(
    (amount) => {
      setFundAmountFiat(amount);
      throttledFetchExchangeRate();
      sendAnalytics(FundEvent.FundAmountChanged, {
        amount: Number(amount),
        currency
      });
    },
    [currency, sendAnalytics, setFundAmountFiat, throttledFetchExchangeRate]
  );
  return /* @__PURE__ */ jsx(
    AmountInput,
    {
      fiatAmount: fundAmountFiat,
      cryptoAmount: fundAmountCrypto,
      asset,
      selectedInputType,
      currency,
      className,
      setFiatAmount: handleFiatAmountChange,
      setCryptoAmount: setFundAmountCrypto,
      exchangeRate: String(exchangeRate)
    }
  );
};
export {
  FundCardAmountInput,
  FundCardAmountInput as default
};
//# sourceMappingURL=FundCardAmountInput.js.map
