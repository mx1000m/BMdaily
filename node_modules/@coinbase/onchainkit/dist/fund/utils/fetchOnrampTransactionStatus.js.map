{"version":3,"file":"fetchOnrampTransactionStatus.js","sources":["../../../src/fund/utils/fetchOnrampTransactionStatus.ts"],"sourcesContent":["import { convertSnakeToCamelCase } from '../../internal/utils/convertSnakeToCamelCase';\nimport { getApiKey } from '../../internal/utils/getApiKey';\nimport { ONRAMP_API_BASE_URL } from '../constants';\nimport type { OnrampTransaction } from '../types';\n\ntype OnrampTransactionStatusResponseData = {\n  /** List of `OnrampTransactions` in reverse chronological order. */\n  transactions: OnrampTransaction[];\n  /** A reference to the next page of transactions. */\n  nextPageKey: string;\n  /** The total number of transactions made by the user. */\n  totalCount: string;\n};\n\nexport async function fetchOnrampTransactionStatus({\n  partnerUserId,\n  nextPageKey,\n  pageSize,\n  apiKey,\n}: {\n  partnerUserId: string;\n  nextPageKey: string;\n  pageSize: string;\n  apiKey?: string;\n}): Promise<OnrampTransactionStatusResponseData> {\n  const cpdApiKey = apiKey || getApiKey();\n\n  const response = await fetch(\n    `${ONRAMP_API_BASE_URL}/buy/user/${partnerUserId}/transactions?page_key=${nextPageKey}&page_size=${pageSize}`,\n    {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${cpdApiKey}`,\n      },\n    },\n  );\n\n  const responseJson = await response.json();\n\n  return convertSnakeToCamelCase<OnrampTransactionStatusResponseData>(\n    responseJson,\n  );\n}\n"],"names":[],"mappings":";;;AAcA,eAAsB,6BAA6B;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKiD;AACzC,QAAA,YAAY,UAAU,UAAU;AAEtC,QAAM,WAAW,MAAM;AAAA,IACrB,GAAG,mBAAmB,aAAa,aAAa,0BAA0B,WAAW,cAAc,QAAQ;AAAA,IAC3G;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU,SAAS;AAAA,MAAA;AAAA,IACpC;AAAA,EAEJ;AAEM,QAAA,eAAe,MAAM,SAAS,KAAK;AAElC,SAAA;AAAA,IACL;AAAA,EACF;AACF;"}