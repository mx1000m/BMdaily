{"version":3,"file":"setupOnrampEventListeners.js","sources":["../../../src/fund/utils/setupOnrampEventListeners.ts"],"sourcesContent":["import { DEFAULT_ONRAMP_URL } from '../constants';\nimport type { EventMetadata, OnrampError, SuccessEventData } from '../types';\nimport { subscribeToWindowMessage } from './subscribeToWindowMessage';\n\ntype SetupOnrampEventListenersParams = {\n  host?: string;\n  onSuccess?: (data?: SuccessEventData) => void;\n  onExit?: (error?: OnrampError) => void;\n  onEvent?: (event: EventMetadata) => void;\n};\n\n/**\n * Subscribes to events from the Coinbase Onramp widget.\n * @param onEvent - Callback for when any event is received.\n * @param onExit - Callback for when an exit event is received.\n * @param onSuccess - Callback for when a success event is received.\n * @returns a function to unsubscribe from the event listener.\n */\nexport function setupOnrampEventListeners({\n  onEvent,\n  onExit,\n  onSuccess,\n  host = DEFAULT_ONRAMP_URL,\n}: SetupOnrampEventListenersParams) {\n  const unsubscribe = subscribeToWindowMessage({\n    allowedOrigin: host,\n    onMessage: (data) => {\n      const metadata = data as EventMetadata;\n\n      if (metadata.eventName === 'success') {\n        onSuccess?.(metadata.data);\n      }\n      if (metadata.eventName === 'exit') {\n        onExit?.(metadata.error);\n      }\n      onEvent?.(metadata);\n    },\n  });\n\n  return unsubscribe;\n}\n"],"names":[],"mappings":";;AAkBO,SAAS,0BAA0B;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AACT,GAAoC;AAClC,QAAM,cAAc,yBAAyB;AAAA,IAC3C,eAAe;AAAA,IACf,WAAW,CAAC,SAAS;AACnB,YAAM,WAAW;AAEb,UAAA,SAAS,cAAc,WAAW;AACpC,+CAAY,SAAS;AAAA,MAAI;AAEvB,UAAA,SAAS,cAAc,QAAQ;AACjC,yCAAS,SAAS;AAAA,MAAK;AAEzB,yCAAU;AAAA,IAAQ;AAAA,EACpB,CACD;AAEM,SAAA;AACT;"}