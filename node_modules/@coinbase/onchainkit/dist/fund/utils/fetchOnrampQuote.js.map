{"version":3,"file":"fetchOnrampQuote.js","sources":["../../../src/fund/utils/fetchOnrampQuote.ts"],"sourcesContent":["import { convertSnakeToCamelCase } from '../../internal/utils/convertSnakeToCamelCase';\nimport { getApiKey } from '../../internal/utils/getApiKey';\nimport { ONRAMP_API_BASE_URL } from '../constants';\nimport type { OnrampQuoteResponseData } from '../types';\n\n/**\n * Provides a quote based on the asset the user would like to purchase, plus the network, the fiat payment, the payment currency, payment method, and country.\n *\n * @param purchaseCurrency ID of the crypto asset the user wants to purchase. Retrieved from the options API. `required`\n * @param purchaseNetwork Name of the network that the purchase currency should be purchased on.\n * Retrieved from the options API. If omitted, the default network for the crypto currency is used.\n * @param paymentCurrency Fiat currency of the payment amount, e.g., `USD`. `required`\n * @param paymentMethod ID of payment method used to complete the purchase. Retrieved from the options API. `required`\n * @param paymentAmount Fiat amount the user wants to spend to purchase the crypto currency, inclusive of fees with two decimals of precision, e.g., `100.00`. `required`\n * @param country ISO 3166-1 two-digit country code string representing the purchasing user’s country of residence, e.g., US. `required`\n * @param subdivision ISO 3166-2 two-digit country subdivision code representing the purchasing user’s subdivision of residence within their country, e.g. `NY`.\n * Required if the `country=“US”` because certain states (e.g., `NY`) have state specific asset restrictions.\n */\nexport async function fetchOnrampQuote({\n  purchaseCurrency,\n  purchaseNetwork,\n  paymentCurrency,\n  paymentMethod,\n  paymentAmount,\n  country,\n  subdivision,\n  apiKey,\n}: {\n  purchaseCurrency: string;\n  purchaseNetwork?: string;\n  paymentCurrency: string;\n  paymentMethod: string;\n  paymentAmount: string;\n  country: string;\n  subdivision?: string;\n  apiKey?: string;\n}): Promise<OnrampQuoteResponseData> {\n  const cpdApiKey = apiKey || getApiKey();\n\n  const response = await fetch(`${ONRAMP_API_BASE_URL}/buy/quote`, {\n    method: 'POST',\n    body: JSON.stringify({\n      purchase_currency: purchaseCurrency,\n      purchase_network: purchaseNetwork,\n      payment_currency: paymentCurrency,\n      payment_method: paymentMethod,\n      payment_amount: paymentAmount,\n      country,\n      subdivision,\n    }),\n    headers: {\n      Authorization: `Bearer ${cpdApiKey}`,\n    },\n  });\n\n  const responseJson = await response.json();\n\n  return convertSnakeToCamelCase<OnrampQuoteResponseData>(responseJson);\n}\n"],"names":[],"mappings":";;;AAkBA,eAAsB,iBAAiB;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GASqC;AAC7B,QAAA,YAAY,UAAU,UAAU;AAEtC,QAAM,WAAW,MAAM,MAAM,GAAG,mBAAmB,cAAc;AAAA,IAC/D,QAAQ;AAAA,IACR,MAAM,KAAK,UAAU;AAAA,MACnB,mBAAmB;AAAA,MACnB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB;AAAA,MACA;AAAA,IAAA,CACD;AAAA,IACD,SAAS;AAAA,MACP,eAAe,UAAU,SAAS;AAAA,IAAA;AAAA,EACpC,CACD;AAEK,QAAA,eAAe,MAAM,SAAS,KAAK;AAEzC,SAAO,wBAAiD,YAAY;AACtE;"}