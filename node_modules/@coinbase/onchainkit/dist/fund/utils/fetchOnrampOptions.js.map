{"version":3,"file":"fetchOnrampOptions.js","sources":["../../../src/fund/utils/fetchOnrampOptions.ts"],"sourcesContent":["import { convertSnakeToCamelCase } from '../../internal/utils/convertSnakeToCamelCase';\nimport { getApiKey } from '../../internal/utils/getApiKey';\nimport { ONRAMP_API_BASE_URL } from '../constants';\nimport type { OnrampOptionsResponseData } from '../types';\n\n/**\n * Returns supported fiat currencies and available crypto assets that can be passed into the Buy Quote API.\n *\n * @param country ISO 3166-1 two-digit country code string representing the purchasing user’s country of residence, e.g., US. `required`\n * @param subdivision ISO 3166-2 two-digit country subdivision code representing the purchasing user’s subdivision of residence within their country, e.g. `NY`.\n */\nexport async function fetchOnrampOptions({\n  country,\n  subdivision,\n  apiKey,\n}: {\n  country: string;\n  subdivision?: string;\n  apiKey?: string;\n}): Promise<OnrampOptionsResponseData> {\n  const cpdApiKey = apiKey || getApiKey();\n\n  let queryParams = `?country=${country}`;\n\n  if (subdivision) {\n    queryParams = `${queryParams}&subdivision=${subdivision}`;\n  }\n\n  const response = await fetch(\n    `${ONRAMP_API_BASE_URL}/buy/options${queryParams}`,\n    {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${cpdApiKey}`,\n      },\n    },\n  );\n\n  const responseJson = await response.json();\n\n  return convertSnakeToCamelCase<OnrampOptionsResponseData>(responseJson);\n}\n"],"names":[],"mappings":";;;AAWA,eAAsB,mBAAmB;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AACF,GAIuC;AAC/B,QAAA,YAAY,UAAU,UAAU;AAElC,MAAA,cAAc,YAAY,OAAO;AAErC,MAAI,aAAa;AACD,kBAAA,GAAG,WAAW,gBAAgB,WAAW;AAAA,EAAA;AAGzD,QAAM,WAAW,MAAM;AAAA,IACrB,GAAG,mBAAmB,eAAe,WAAW;AAAA,IAChD;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU,SAAS;AAAA,MAAA;AAAA,IACpC;AAAA,EAEJ;AAEM,QAAA,eAAe,MAAM,SAAS,KAAK;AAEzC,SAAO,wBAAmD,YAAY;AACxE;"}