{"version":3,"file":"AutoConnect.js","sources":["../../../src/minikit/components/AutoConnect.tsx"],"sourcesContent":["'use client';\nimport { PropsWithChildren, useEffect, useRef } from 'react';\nimport { useConnect, useAccount } from 'wagmi';\nimport { useIsInMiniApp } from '../hooks/useIsInMiniApp';\n\nconst FARCASTER_CONNECTOR_TYPES = new Set([\n  'farcasterFrame',\n  'farcasterMiniApp',\n]);\n\n/**\n * Automatically connects to the Farcaster connector if the user is in a Mini App\n */\nexport function AutoConnect({\n  children,\n  enabled = true,\n}: PropsWithChildren<{ enabled?: boolean }>) {\n  const { isConnected, isConnecting } = useAccount();\n  const { connectors, connect } = useConnect();\n  const hasAttemptedConnection = useRef(false);\n  const connector = connectors[0];\n  const { isInMiniApp, isSuccess: isInMiniAppSuccess } = useIsInMiniApp();\n\n  useEffect(() => {\n    if (\n      !enabled ||\n      hasAttemptedConnection.current ||\n      !FARCASTER_CONNECTOR_TYPES.has(connector?.type) ||\n      !isInMiniAppSuccess\n    ) {\n      return;\n    }\n\n    hasAttemptedConnection.current = true;\n\n    async function handleAutoConnect() {\n      if (!isInMiniApp || isConnected || isConnecting) return;\n\n      connect({ connector });\n    }\n\n    handleAutoConnect();\n  }, [\n    connectors,\n    connect,\n    isConnected,\n    isConnecting,\n    connector,\n    enabled,\n    isInMiniAppSuccess,\n    isInMiniApp,\n  ]);\n\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;AAKA,MAAM,gDAAgC,IAAI;AAAA,EACxC;AAAA,EACA;AACF,CAAC;AAKM,SAAS,YAAY;AAAA,EAC1B;AAAA,EACA,UAAU;AACZ,GAA6C;AAC3C,QAAM,EAAE,aAAa,aAAa,IAAI,WAAW;AACjD,QAAM,EAAE,YAAY,QAAQ,IAAI,WAAW;AACrC,QAAA,yBAAyB,OAAO,KAAK;AACrC,QAAA,YAAY,WAAW,CAAC;AAC9B,QAAM,EAAE,aAAa,WAAW,mBAAA,IAAuB,eAAe;AAEtE,YAAU,MAAM;AAEZ,QAAA,CAAC,WACD,uBAAuB,WACvB,CAAC,0BAA0B,IAAI,uCAAW,IAAI,KAC9C,CAAC,oBACD;AACA;AAAA,IAAA;AAGF,2BAAuB,UAAU;AAEjC,mBAAe,oBAAoB;AAC7B,UAAA,CAAC,eAAe,eAAe,aAAc;AAEzC,cAAA,EAAE,WAAW;AAAA,IAAA;AAGL,sBAAA;AAAA,EAAA,GACjB;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,yCAAU,UAAS;AACrB;"}