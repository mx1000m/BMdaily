{"version":3,"file":"useAuthenticate.js","sources":["../../../src/minikit/hooks/useAuthenticate.ts"],"sourcesContent":["import sdk from '@farcaster/frame-sdk';\nimport type { SignIn as SignInCore } from '@farcaster/frame-sdk';\nimport { useCallback } from 'react';\nimport { useMiniKit } from './useMiniKit';\n\ntype ParsedSignInMessage = {\n  address: string;\n  chainID: string;\n  domain: string;\n  issuedAt: string;\n  nonce: string;\n  resources: string[];\n  uri: string;\n  version: string;\n};\n\n/**\n * Parse the sign in message\n * @param message - The sign in message to parse\n * @returns {ParsedSignInMessage} - The parsed sign in message\n */\nexport function parseSignInMessage(message: string): ParsedSignInMessage {\n  const [domainLine, address, ...rest] = message.split('\\n');\n  const [domain] = domainLine.split(\n    ' wants you to sign in with your Ethereum account:',\n  );\n\n  const parsedData: ParsedSignInMessage = {\n    domain,\n    address,\n    chainID: '',\n    issuedAt: '',\n    nonce: '',\n    resources: [],\n    uri: '',\n    version: '',\n  };\n\n  return rest.reduce((acc, line) => {\n    if (line.includes(': ')) {\n      const [key, value] = line.split(': ');\n      const camelKey = key.replace(/^([^\\s]+)(?:\\s+)?/, (_, firstWord) =>\n        firstWord.toLowerCase(),\n      );\n      acc[camelKey as keyof Omit<ParsedSignInMessage, 'resources'>] = value;\n      return acc;\n    }\n\n    if (line.startsWith('- ')) {\n      acc.resources.push(line.slice(2));\n      return acc;\n    }\n\n    return acc;\n  }, parsedData);\n}\n\ntype ValidateSignInMessageProps = {\n  message: string;\n  domain?: string;\n  fid?: number;\n  nonce?: string;\n};\n\n/**\n * Validate the sign in message\n * @param message - The sign in message to validate\n * @param domain [optional] - The domain of the frame to validate against, if not provided, the domain will not be validated\n * @param fid [optional] - The fid of the frame to validate against, if not provided, the fid will not be validated\n * @param nonce [optional] - The nonce to validate against, if not provided, the nonce will not be validated\n * @returns void\n */\nfunction validateSignInMessage({\n  message,\n  domain,\n  fid,\n  nonce,\n}: ValidateSignInMessageProps) {\n  const parsed = parseSignInMessage(message);\n  if (domain) {\n    const domainUrlObj = new URL(domain);\n\n    // domain in message should match frame's domain\n    if (domainUrlObj.hostname !== parsed.domain) {\n      throw new Error('Domain mismatch');\n    }\n  }\n\n  // validate nonce\n  if (nonce && parsed.nonce !== nonce) {\n    throw new Error('Nonce mismatch');\n  }\n\n  // validate fid\n  if (fid) {\n    const fidRegex = new RegExp(`^farcaster://fid/${fid}$`);\n    const fidMatch = parsed.resources.find((resource) =>\n      fidRegex.test(resource),\n    );\n    if (!fidMatch) {\n      throw new Error('Fid mismatch');\n    }\n  }\n}\n\ntype UseAuthenticateProps = Omit<SignInCore.SignInOptions, 'nonce'> & {\n  nonce?: string;\n};\n\n/**\n * Authenticates the user's account.\n * @param domain [optional] - The domain of the frame to authenticate against, if not provided, the domain will not be validated\n * @param skipValidation [optional] - Whether to skip validation of the nonce and fid, by default it will validate the nonce and fid\n * @returns `signIn` - A function that wraps the frames SDK signIn action and returns the result of the signIn action\n */\nexport const useAuthenticate = (domain?: string, skipValidation = false) => {\n  const { context } = useMiniKit();\n\n  const signIn = useCallback(\n    async (signInOptions: UseAuthenticateProps = {}) => {\n      try {\n        if (!signInOptions?.nonce) {\n          signInOptions.nonce = [...Array(8)]\n            .map(() => Math.floor(Math.random() * 36).toString(36))\n            .join('');\n        }\n        const result = await sdk.actions.signIn(\n          signInOptions as SignInCore.SignInOptions,\n        );\n        if (!skipValidation) {\n          validateSignInMessage({\n            message: result.message,\n            domain,\n            fid: context?.user?.fid,\n            nonce: signInOptions.nonce,\n          });\n        }\n\n        return result;\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    },\n    [context?.user?.fid, domain, skipValidation],\n  );\n\n  return { signIn };\n};\n"],"names":["_a"],"mappings":";;;AAqBO,SAAS,mBAAmB,SAAsC;AACjE,QAAA,CAAC,YAAY,SAAS,GAAG,IAAI,IAAI,QAAQ,MAAM,IAAI;AACnD,QAAA,CAAC,MAAM,IAAI,WAAW;AAAA,IAC1B;AAAA,EACF;AAEA,QAAM,aAAkC;AAAA,IACtC;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,UAAU;AAAA,IACV,OAAO;AAAA,IACP,WAAW,CAAC;AAAA,IACZ,KAAK;AAAA,IACL,SAAS;AAAA,EACX;AAEA,SAAO,KAAK,OAAO,CAAC,KAAK,SAAS;AAC5B,QAAA,KAAK,SAAS,IAAI,GAAG;AACvB,YAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,IAAI;AACpC,YAAM,WAAW,IAAI;AAAA,QAAQ;AAAA,QAAqB,CAAC,GAAG,cACpD,UAAU,YAAY;AAAA,MACxB;AACA,UAAI,QAAwD,IAAI;AACzD,aAAA;AAAA,IAAA;AAGL,QAAA,KAAK,WAAW,IAAI,GAAG;AACzB,UAAI,UAAU,KAAK,KAAK,MAAM,CAAC,CAAC;AACzB,aAAA;AAAA,IAAA;AAGF,WAAA;AAAA,KACN,UAAU;AACf;AAiBA,SAAS,sBAAsB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA+B;AACvB,QAAA,SAAS,mBAAmB,OAAO;AACzC,MAAI,QAAQ;AACJ,UAAA,eAAe,IAAI,IAAI,MAAM;AAG/B,QAAA,aAAa,aAAa,OAAO,QAAQ;AACrC,YAAA,IAAI,MAAM,iBAAiB;AAAA,IAAA;AAAA,EACnC;AAIE,MAAA,SAAS,OAAO,UAAU,OAAO;AAC7B,UAAA,IAAI,MAAM,gBAAgB;AAAA,EAAA;AAIlC,MAAI,KAAK;AACP,UAAM,WAAW,IAAI,OAAO,oBAAoB,GAAG,GAAG;AAChD,UAAA,WAAW,OAAO,UAAU;AAAA,MAAK,CAAC,aACtC,SAAS,KAAK,QAAQ;AAAA,IACxB;AACA,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,cAAc;AAAA,IAAA;AAAA,EAChC;AAEJ;AAYO,MAAM,kBAAkB,CAAC,QAAiB,iBAAiB,UAAU;;AACpE,QAAA,EAAE,QAAQ,IAAI,WAAW;AAE/B,QAAM,SAAS;AAAA,IACb,OAAO,gBAAsC,CAAA,MAAO;;AAC9C,UAAA;AACE,YAAA,EAAC,+CAAe,QAAO;AACX,wBAAA,QAAQ,CAAC,GAAG,MAAM,CAAC,CAAC,EAC/B,IAAI,MAAM,KAAK,MAAM,KAAK,OAAA,IAAW,EAAE,EAAE,SAAS,EAAE,CAAC,EACrD,KAAK,EAAE;AAAA,QAAA;AAEN,cAAA,SAAS,MAAM,IAAI,QAAQ;AAAA,UAC/B;AAAA,QACF;AACA,YAAI,CAAC,gBAAgB;AACG,gCAAA;AAAA,YACpB,SAAS,OAAO;AAAA,YAChB;AAAA,YACA,MAAKA,MAAA,mCAAS,SAAT,gBAAAA,IAAe;AAAA,YACpB,OAAO,cAAc;AAAA,UAAA,CACtB;AAAA,QAAA;AAGI,eAAA;AAAA,eACA,OAAO;AACd,gBAAQ,MAAM,KAAK;AACZ,eAAA;AAAA,MAAA;AAAA,IAEX;AAAA,IACA,EAAC,wCAAS,SAAT,mBAAe,KAAK,QAAQ,cAAc;AAAA,EAC7C;AAEA,SAAO,EAAE,OAAO;AAClB;"}