{"version":3,"file":"useMiniKit.js","sources":["../../../src/minikit/hooks/useMiniKit.ts"],"sourcesContent":["import { MiniKitContext, emptyContext } from '@/minikit/MiniKitProvider';\nimport sdk from '@farcaster/frame-sdk';\nimport { useContext, useState } from 'react';\nimport type { MiniKitContextType } from '../types';\nimport type { ReadyOptions } from '@farcaster/frame-sdk';\n\ntype UseMiniKitReturn = {\n  setFrameReady: (\n    readyOptions?: Partial<ReadyOptions>,\n  ) => Promise<MiniKitContextType>;\n  isFrameReady: boolean;\n  context: MiniKitContextType['context'];\n  updateClientContext: MiniKitContextType['updateClientContext'];\n  notificationProxyUrl: MiniKitContextType['notificationProxyUrl'];\n};\n\n/**\n * Allows for the use of the MiniKit context.\n * @returns The MiniKitContext object, consisting of:\n * - `setFrameReady` - A function to set the frame as ready, which will hide the splash screen.\n * - `isFrameReady` - A boolean indicating if the frame has been set as ready.\n * - `context` - The MiniKit context.\n * - `updateClientContext` - A function to update the client context.\n * - `notificationProxyUrl` - The notification proxy URL.\n */\nexport const useMiniKit = (): UseMiniKitReturn => {\n  const [isFrameReady, setIsFrameReady] = useState(false);\n  const context = useContext(MiniKitContext);\n  if (context === emptyContext) {\n    throw new Error('useMiniKit must be used within a MiniKitProvider');\n  }\n\n  const setFrameReady = async (readyOptions: Partial<ReadyOptions> = {}) => {\n    sdk.actions.ready(readyOptions);\n    setIsFrameReady(true);\n    return context;\n  };\n\n  return {\n    setFrameReady,\n    isFrameReady,\n    context: context.context,\n    updateClientContext: context.updateClientContext,\n    notificationProxyUrl: context.notificationProxyUrl,\n  };\n};\n"],"names":[],"mappings":";;;AAyBO,MAAM,aAAa,MAAwB;AAChD,QAAM,CAAC,cAAc,eAAe,IAAI,SAAS,KAAK;AAChD,QAAA,UAAU,WAAW,cAAc;AACzC,MAAI,YAAY,cAAc;AACtB,UAAA,IAAI,MAAM,kDAAkD;AAAA,EAAA;AAGpE,QAAM,gBAAgB,OAAO,eAAsC,OAAO;AACpE,QAAA,QAAQ,MAAM,YAAY;AAC9B,oBAAgB,IAAI;AACb,WAAA;AAAA,EACT;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,SAAS,QAAQ;AAAA,IACjB,qBAAqB,QAAQ;AAAA,IAC7B,sBAAsB,QAAQ;AAAA,EAChC;AACF;"}