import sdk from "@farcaster/frame-sdk";
import { useCallback } from "react";
import { useMiniKit } from "./useMiniKit.js";
function parseSignInMessage(message) {
  const [domainLine, address, ...rest] = message.split("\n");
  const [domain] = domainLine.split(
    " wants you to sign in with your Ethereum account:"
  );
  const parsedData = {
    domain,
    address,
    chainID: "",
    issuedAt: "",
    nonce: "",
    resources: [],
    uri: "",
    version: ""
  };
  return rest.reduce((acc, line) => {
    if (line.includes(": ")) {
      const [key, value] = line.split(": ");
      const camelKey = key.replace(
        /^([^\s]+)(?:\s+)?/,
        (_, firstWord) => firstWord.toLowerCase()
      );
      acc[camelKey] = value;
      return acc;
    }
    if (line.startsWith("- ")) {
      acc.resources.push(line.slice(2));
      return acc;
    }
    return acc;
  }, parsedData);
}
function validateSignInMessage({
  message,
  domain,
  fid,
  nonce
}) {
  const parsed = parseSignInMessage(message);
  if (domain) {
    const domainUrlObj = new URL(domain);
    if (domainUrlObj.hostname !== parsed.domain) {
      throw new Error("Domain mismatch");
    }
  }
  if (nonce && parsed.nonce !== nonce) {
    throw new Error("Nonce mismatch");
  }
  if (fid) {
    const fidRegex = new RegExp(`^farcaster://fid/${fid}$`);
    const fidMatch = parsed.resources.find(
      (resource) => fidRegex.test(resource)
    );
    if (!fidMatch) {
      throw new Error("Fid mismatch");
    }
  }
}
const useAuthenticate = (domain, skipValidation = false) => {
  var _a;
  const { context } = useMiniKit();
  const signIn = useCallback(
    async (signInOptions = {}) => {
      var _a2;
      try {
        if (!(signInOptions == null ? void 0 : signInOptions.nonce)) {
          signInOptions.nonce = [...Array(8)].map(() => Math.floor(Math.random() * 36).toString(36)).join("");
        }
        const result = await sdk.actions.signIn(
          signInOptions
        );
        if (!skipValidation) {
          validateSignInMessage({
            message: result.message,
            domain,
            fid: (_a2 = context == null ? void 0 : context.user) == null ? void 0 : _a2.fid,
            nonce: signInOptions.nonce
          });
        }
        return result;
      } catch (error) {
        console.error(error);
        return false;
      }
    },
    [(_a = context == null ? void 0 : context.user) == null ? void 0 : _a.fid, domain, skipValidation]
  );
  return { signIn };
};
export {
  parseSignInMessage,
  useAuthenticate
};
//# sourceMappingURL=useAuthenticate.js.map
