{"version":3,"file":"useComposeCast.js","sources":["../../../src/minikit/hooks/useComposeCast.tsx"],"sourcesContent":["import sdk, { ComposeCast } from '@farcaster/frame-sdk';\nimport { useMutation } from '@tanstack/react-query';\n\ntype ComposeCastParams<TClose extends boolean | undefined = undefined> = {\n  /** Text used to prepopulate the cast body. */\n  text?: string;\n  /** Suggested embeds. Max two. */\n  embeds?: [] | [string] | [string, string];\n  /** Parent cast to reply to. */\n  parent?: {\n    type: 'cast';\n    hash: string;\n  };\n  /** Whether the app should be closed after this action is called. */\n  close?: TClose;\n  /** Channel key to post the cast to. */\n  channelKey?: string;\n};\n\n/**\n * Opens the cast composer with the suggested text and embeds.\n */\nexport function useComposeCast() {\n  const { mutate, mutateAsync, ...rest } = useMutation({\n    mutationFn: async (\n      params: ComposeCastParams,\n    ): Promise<ComposeCast.Result> => {\n      return await sdk.actions.composeCast(params);\n    },\n  });\n\n  return {\n    ...rest,\n    composeCast: mutate,\n    composeCastAsync: mutateAsync,\n  };\n}\n"],"names":[],"mappings":";;AAsBO,SAAS,iBAAiB;AAC/B,QAAM,EAAE,QAAQ,aAAa,GAAG,KAAA,IAAS,YAAY;AAAA,IACnD,YAAY,OACV,WACgC;AAChC,aAAO,MAAM,IAAI,QAAQ,YAAY,MAAM;AAAA,IAAA;AAAA,EAC7C,CACD;AAEM,SAAA;AAAA,IACL,GAAG;AAAA,IACH,aAAa;AAAA,IACb,kBAAkB;AAAA,EACpB;AACF;"}