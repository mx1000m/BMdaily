{"version":3,"file":"buildMintTransactionData.js","sources":["../../../src/nft/utils/buildMintTransactionData.ts"],"sourcesContent":["import { buildMintTransaction as buildMintTransactionApi } from '@/api/buildMintTransaction';\nimport type { BuildMintTransactionParams } from '@/api/types';\nimport { RequestContext } from '@/core/network/constants';\nimport type { Address } from 'viem';\nimport type { Call } from '../../transaction/types';\n\nasync function getMintTransaction({\n  mintAddress,\n  tokenId,\n  network,\n  quantity,\n  takerAddress,\n}: BuildMintTransactionParams): Promise<Call[]> {\n  const mintTransactions = await buildMintTransactionApi(\n    {\n      mintAddress,\n      tokenId,\n      network,\n      quantity,\n      takerAddress,\n    },\n    RequestContext.NFT,\n  );\n\n  if ('error' in mintTransactions) {\n    throw mintTransactions.message;\n  }\n\n  return [\n    {\n      to: mintTransactions.call_data.to,\n      data: mintTransactions.call_data.data,\n      value: BigInt(mintTransactions.call_data.value),\n    },\n  ];\n}\n\nexport function buildMintTransactionData({\n  contractAddress,\n  takerAddress,\n  tokenId,\n  quantity,\n  network,\n}: { contractAddress: Address } & Omit<\n  BuildMintTransactionParams,\n  'mintAddress'\n>): Promise<Call[]> {\n  return getMintTransaction({\n    mintAddress: contractAddress,\n    takerAddress,\n    tokenId,\n    quantity,\n    network,\n  });\n}\n"],"names":["buildMintTransactionApi"],"mappings":";;AAMA,eAAe,mBAAmB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAgD;AAC9C,QAAM,mBAAmB,MAAMA;AAAAA,IAC7B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,eAAe;AAAA,EACjB;AAEA,MAAI,WAAW,kBAAkB;AAC/B,UAAM,iBAAiB;AAAA,EAAA;AAGlB,SAAA;AAAA,IACL;AAAA,MACE,IAAI,iBAAiB,UAAU;AAAA,MAC/B,MAAM,iBAAiB,UAAU;AAAA,MACjC,OAAO,OAAO,iBAAiB,UAAU,KAAK;AAAA,IAAA;AAAA,EAElD;AACF;AAEO,SAAS,yBAAyB;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAGoB;AAClB,SAAO,mBAAmB;AAAA,IACxB,aAAa;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH;"}