{"version":3,"file":"useTokenDetails.js","sources":["../../../src/nft/hooks/useTokenDetails.ts"],"sourcesContent":["import { getTokenDetails } from '@/api/getTokenDetails';\nimport type { TokenDetails } from '@/api/types';\nimport { RequestContext } from '@/core/network/constants';\nimport { isNFTError } from '@/nft/utils/isNFTError';\nimport { type UseQueryResult, useQuery } from '@tanstack/react-query';\nimport type { UseTokenDetailsParams } from '../types';\n\nexport function useTokenDetails(\n  params: UseTokenDetailsParams<TokenDetails>,\n  _context: RequestContext = RequestContext.Hook,\n): UseQueryResult<TokenDetails> {\n  const { contractAddress, tokenId, queryOptions } = params;\n\n  return useQuery({\n    queryKey: ['useTokenDetails', contractAddress, tokenId],\n    queryFn: async () => {\n      const tokenDetails = await getTokenDetails(\n        {\n          contractAddress,\n          tokenId,\n        },\n        _context,\n      );\n\n      if (isNFTError(tokenDetails)) {\n        throw tokenDetails;\n      }\n\n      return tokenDetails;\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n    ...queryOptions,\n  });\n}\n"],"names":[],"mappings":";;;;AAOO,SAAS,gBACd,QACA,WAA2B,eAAe,MACZ;AAC9B,QAAM,EAAE,iBAAiB,SAAS,aAAiB,IAAA;AAEnD,SAAO,SAAS;AAAA,IACd,UAAU,CAAC,mBAAmB,iBAAiB,OAAO;AAAA,IACtD,SAAS,YAAY;AACnB,YAAM,eAAe,MAAM;AAAA,QACzB;AAAA,UACE;AAAA,UACA;AAAA,QACF;AAAA,QACA;AAAA,MACF;AAEI,UAAA,WAAW,YAAY,GAAG;AACtB,cAAA;AAAA,MAAA;AAGD,aAAA;AAAA,IACT;AAAA,IACA,OAAO;AAAA,IACP,sBAAsB;AAAA,IACtB,GAAG;AAAA,EAAA,CACJ;AACH;"}