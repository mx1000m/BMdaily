{"version":3,"file":"useMintAnalytics.js","sources":["../../../src/nft/hooks/useMintAnalytics.ts"],"sourcesContent":["import { useAnalytics } from '@/core/analytics/hooks/useAnalytics';\nimport { MintEvent } from '@/core/analytics/types';\nimport { useNFTContext } from '@/nft/components/NFTProvider';\nimport type { LifecycleStatus } from '@/transaction/types';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useAccount } from 'wagmi';\n\nexport const useMintAnalytics = () => {\n  const [transactionState, setTransactionState] = useState<\n    LifecycleStatus['statusName'] | null\n  >(null);\n  const successSent = useRef(false);\n  const errorSent = useRef(false);\n  const { sendAnalytics } = useAnalytics();\n  const { address } = useAccount();\n\n  const { contractAddress, tokenId, quantity, isSponsored } = useNFTContext();\n\n  const analyticsData = useMemo(() => {\n    if (!tokenId || !address) {\n      return null;\n    }\n\n    return {\n      address,\n      contractAddress,\n      tokenId,\n      quantity,\n      isSponsored: isSponsored ?? false,\n    };\n  }, [address, contractAddress, tokenId, quantity, isSponsored]);\n\n  useEffect(() => {\n    if (!analyticsData) {\n      return;\n    }\n\n    if (transactionState === 'buildingTransaction') {\n      successSent.current = false;\n      errorSent.current = false;\n      sendAnalytics(MintEvent.MintInitiated, analyticsData);\n    }\n\n    if (transactionState === 'success' && !successSent.current) {\n      successSent.current = true;\n      sendAnalytics(MintEvent.MintSuccess, {\n        ...analyticsData,\n        amountMinted: quantity,\n      });\n    }\n\n    if (transactionState === 'error' && !errorSent.current) {\n      errorSent.current = true;\n      sendAnalytics(MintEvent.MintFailure, {\n        error: 'Transaction failed',\n        metadata: analyticsData,\n      });\n    }\n  }, [transactionState, quantity, analyticsData, sendAnalytics]);\n\n  const handleQuantityChange = (newQuantity: number) => {\n    sendAnalytics(MintEvent.MintQuantityChanged, {\n      quantity: newQuantity,\n    });\n  };\n\n  return {\n    setTransactionState,\n    handleQuantityChange,\n  };\n};\n"],"names":[],"mappings":";;;;;AAOO,MAAM,mBAAmB,MAAM;AACpC,QAAM,CAAC,kBAAkB,mBAAmB,IAAI,SAE9C,IAAI;AACA,QAAA,cAAc,OAAO,KAAK;AAC1B,QAAA,YAAY,OAAO,KAAK;AACxB,QAAA,EAAE,cAAc,IAAI,aAAa;AACjC,QAAA,EAAE,QAAQ,IAAI,WAAW;AAE/B,QAAM,EAAE,iBAAiB,SAAS,UAAU,YAAA,IAAgB,cAAc;AAEpE,QAAA,gBAAgB,QAAQ,MAAM;AAC9B,QAAA,CAAC,WAAW,CAAC,SAAS;AACjB,aAAA;AAAA,IAAA;AAGF,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,eAAe;AAAA,IAC9B;AAAA,EAAA,GACC,CAAC,SAAS,iBAAiB,SAAS,UAAU,WAAW,CAAC;AAE7D,YAAU,MAAM;AACd,QAAI,CAAC,eAAe;AAClB;AAAA,IAAA;AAGF,QAAI,qBAAqB,uBAAuB;AAC9C,kBAAY,UAAU;AACtB,gBAAU,UAAU;AACN,oBAAA,UAAU,eAAe,aAAa;AAAA,IAAA;AAGtD,QAAI,qBAAqB,aAAa,CAAC,YAAY,SAAS;AAC1D,kBAAY,UAAU;AACtB,oBAAc,UAAU,aAAa;AAAA,QACnC,GAAG;AAAA,QACH,cAAc;AAAA,MAAA,CACf;AAAA,IAAA;AAGH,QAAI,qBAAqB,WAAW,CAAC,UAAU,SAAS;AACtD,gBAAU,UAAU;AACpB,oBAAc,UAAU,aAAa;AAAA,QACnC,OAAO;AAAA,QACP,UAAU;AAAA,MAAA,CACX;AAAA,IAAA;AAAA,KAEF,CAAC,kBAAkB,UAAU,eAAe,aAAa,CAAC;AAEvD,QAAA,uBAAuB,CAAC,gBAAwB;AACpD,kBAAc,UAAU,qBAAqB;AAAA,MAC3C,UAAU;AAAA,IAAA,CACX;AAAA,EACH;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;"}