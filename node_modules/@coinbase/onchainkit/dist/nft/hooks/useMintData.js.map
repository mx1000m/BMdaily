{"version":3,"file":"useMintData.js","sources":["../../../src/nft/hooks/useMintData.ts"],"sourcesContent":["import type { NFTError } from '@/api/types';\nimport { RequestContext } from '@/core/network/constants';\nimport { convertIpfsToHttps } from '@/nft/utils/ipfs';\nimport { useEffect, useState } from 'react';\nimport { useAccount } from 'wagmi';\nimport { useNFTLifecycleContext } from '../components/NFTLifecycleProvider';\nimport type { NFTData } from '../types';\nimport { useMintDetails } from './useMintDetails';\n\nexport function useMintData(\n  contractAddress: `0x${string}`,\n  tokenId?: string,\n): NFTData | NFTError {\n  const { updateLifecycleStatus } = useNFTLifecycleContext();\n  const [error, setError] = useState<NFTError | null>(null);\n  const { address } = useAccount();\n\n  useEffect(() => {\n    if (error) {\n      updateLifecycleStatus({\n        statusName: 'error',\n        statusData: error,\n      });\n    }\n  }, [error, updateLifecycleStatus]);\n\n  const { error: mintError, data: mintData } = useMintDetails(\n    {\n      contractAddress,\n      takerAddress: address,\n      ...(tokenId ? { tokenId } : {}),\n    },\n    RequestContext.NFT,\n  );\n\n  if (mintError && !error) {\n    setError({\n      code: 'NmMD01',\n      message: mintError.message,\n      error: 'Error fetching mint data',\n    });\n    return mintError;\n  }\n\n  return {\n    name: mintData?.name,\n    description: mintData?.description,\n    imageUrl: convertIpfsToHttps(mintData?.imageUrl),\n    animationUrl: convertIpfsToHttps(mintData?.animationUrl),\n    mimeType: mintData?.mimeType,\n    contractType: mintData?.contractType,\n    maxMintsPerWallet:\n      mintData?.maxMintsPerWallet === 0\n        ? undefined\n        : mintData?.maxMintsPerWallet,\n    price: mintData?.price,\n    mintFee: mintData?.mintFee,\n    isEligibleToMint: mintData?.isEligibleToMint,\n    creatorAddress: mintData?.creatorAddress,\n    totalOwners: mintData?.totalOwners,\n    network: mintData?.network,\n  };\n}\n"],"names":[],"mappings":";;;;;;AASgB,SAAA,YACd,iBACA,SACoB;AACd,QAAA,EAAE,sBAAsB,IAAI,uBAAuB;AACzD,QAAM,CAAC,OAAO,QAAQ,IAAI,SAA0B,IAAI;AAClD,QAAA,EAAE,QAAQ,IAAI,WAAW;AAE/B,YAAU,MAAM;AACd,QAAI,OAAO;AACa,4BAAA;AAAA,QACpB,YAAY;AAAA,QACZ,YAAY;AAAA,MAAA,CACb;AAAA,IAAA;AAAA,EACH,GACC,CAAC,OAAO,qBAAqB,CAAC;AAEjC,QAAM,EAAE,OAAO,WAAW,MAAM,SAAa,IAAA;AAAA,IAC3C;AAAA,MACE;AAAA,MACA,cAAc;AAAA,MACd,GAAI,UAAU,EAAE,YAAY,CAAA;AAAA,IAC9B;AAAA,IACA,eAAe;AAAA,EACjB;AAEI,MAAA,aAAa,CAAC,OAAO;AACd,aAAA;AAAA,MACP,MAAM;AAAA,MACN,SAAS,UAAU;AAAA,MACnB,OAAO;AAAA,IAAA,CACR;AACM,WAAA;AAAA,EAAA;AAGF,SAAA;AAAA,IACL,MAAM,qCAAU;AAAA,IAChB,aAAa,qCAAU;AAAA,IACvB,UAAU,mBAAmB,qCAAU,QAAQ;AAAA,IAC/C,cAAc,mBAAmB,qCAAU,YAAY;AAAA,IACvD,UAAU,qCAAU;AAAA,IACpB,cAAc,qCAAU;AAAA,IACxB,oBACE,qCAAU,uBAAsB,IAC5B,SACA,qCAAU;AAAA,IAChB,OAAO,qCAAU;AAAA,IACjB,SAAS,qCAAU;AAAA,IACnB,kBAAkB,qCAAU;AAAA,IAC5B,gBAAgB,qCAAU;AAAA,IAC1B,aAAa,qCAAU;AAAA,IACvB,SAAS,qCAAU;AAAA,EACrB;AACF;"}