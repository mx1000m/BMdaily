{"version":3,"file":"NFTCard.js","sources":["../../../src/nft/components/NFTCard.tsx"],"sourcesContent":["'use client';\nimport { useIsMounted } from '@/internal/hooks/useIsMounted';\nimport { useTheme } from '@/internal/hooks/useTheme';\nimport { NFTLifecycleProvider } from '@/nft/components/NFTLifecycleProvider';\nimport { NFTProvider } from '@/nft/components/NFTProvider';\nimport { useNFTData as defaultUseNFTData } from '@/nft/hooks/useNFTData';\nimport { LifecycleType, type NFTCardReact } from '@/nft/types';\nimport { useCallback } from 'react';\nimport { useAccount } from 'wagmi';\nimport { border, cn, color, pressable } from '../../styles/theme';\nimport NFTErrorBoundary from './NFTErrorBoundary';\nimport { NFTErrorFallback } from './NFTErrorFallback';\nimport {\n  NFTLastSoldPrice,\n  NFTMedia,\n  NFTNetwork,\n  NFTOwner,\n  NFTTitle,\n} from './view';\n\nfunction NFTCardDefaultContent() {\n  return (\n    <>\n      <NFTMedia />\n      <NFTTitle />\n      <NFTOwner />\n      <NFTLastSoldPrice />\n      <NFTNetwork />\n    </>\n  );\n}\n\nexport function NFTCard({\n  children = <NFTCardDefaultContent />,\n  className,\n  contractAddress,\n  tokenId,\n  useNFTData = defaultUseNFTData,\n  onStatus,\n  onError,\n  onSuccess,\n}: NFTCardReact) {\n  const componentTheme = useTheme();\n\n  const isMounted = useIsMounted();\n\n  const { chain } = useAccount();\n\n  const handleOnClick = useCallback(() => {\n    const network = chain?.name.toLowerCase() ?? 'base';\n    const zoraUrl = `https://zora.co/collect/${network}:${contractAddress}/${tokenId}`;\n    window.open(zoraUrl, '_blank', 'noopener,noreferrer');\n  }, [chain, contractAddress, tokenId]);\n\n  // prevents SSR hydration issue\n  if (!isMounted) {\n    return null;\n  }\n\n  return (\n    <NFTErrorBoundary fallback={NFTErrorFallback}>\n      <NFTLifecycleProvider\n        type={LifecycleType.VIEW}\n        onStatus={onStatus}\n        onError={onError}\n        onSuccess={onSuccess}\n      >\n        <NFTProvider\n          contractAddress={contractAddress}\n          tokenId={tokenId}\n          useNFTData={useNFTData}\n        >\n          <button\n            type=\"button\"\n            className={cn(\n              componentTheme,\n              color.foreground,\n              pressable.default,\n              border.radius,\n              'flex w-full max-w-[500px] flex-col items-stretch gap-1.5 border p-4 text-left',\n              `hover:border-[${border.defaultActive}]`,\n              className,\n            )}\n            data-testid=\"ockNFTCard_Container\"\n            onClick={handleOnClick}\n          >\n            {children}\n          </button>\n        </NFTProvider>\n      </NFTLifecycleProvider>\n    </NFTErrorBoundary>\n  );\n}\n"],"names":["useNFTData","defaultUseNFTData"],"mappings":";;;;;;;;;;;;;;;;;AAoBA,SAAS,wBAAwB;AAC/B,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAA,oBAAC,UAAS,EAAA;AAAA,wBACT,UAAS,EAAA;AAAA,wBACT,UAAS,EAAA;AAAA,wBACT,kBAAiB,EAAA;AAAA,wBACjB,YAAW,CAAA,CAAA;AAAA,EAAA,GACd;AAEJ;AAEO,SAAS,QAAQ;AAAA,EACtB,+BAAY,uBAAsB,EAAA;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACAA,YAAAA,eAAaC;AAAAA,EACb;AAAA,EACA;AAAA,EACA;AACF,GAAiB;AACf,QAAM,iBAAiB,SAAS;AAEhC,QAAM,YAAY,aAAa;AAEzB,QAAA,EAAE,MAAM,IAAI,WAAW;AAEvB,QAAA,gBAAgB,YAAY,MAAM;AACtC,UAAM,WAAU,+BAAO,KAAK,kBAAiB;AAC7C,UAAM,UAAU,2BAA2B,OAAO,IAAI,eAAe,IAAI,OAAO;AACzE,WAAA,KAAK,SAAS,UAAU,qBAAqB;AAAA,EACnD,GAAA,CAAC,OAAO,iBAAiB,OAAO,CAAC;AAGpC,MAAI,CAAC,WAAW;AACP,WAAA;AAAA,EAAA;AAIP,SAAA,oBAAC,kBAAiB,EAAA,UAAU,kBAC1B,UAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,MAAM,cAAc;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MAEA,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UAAA,YACAD;AAAAA,UAEA,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAW;AAAA,gBACT;AAAA,gBACA,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,OAAO;AAAA,gBACP;AAAA,gBACA,iBAAiB,OAAO,aAAa;AAAA,gBACrC;AAAA,cACF;AAAA,cACA,eAAY;AAAA,cACZ,SAAS;AAAA,cAER;AAAA,YAAA;AAAA,UAAA;AAAA,QACH;AAAA,MAAA;AAAA,IACF;AAAA,EAAA,GAEJ;AAEJ;"}