{"version":3,"file":"NFTProvider.js","sources":["../../../src/nft/components/NFTProvider.tsx"],"sourcesContent":["import { createContext, useCallback, useContext, useState } from 'react';\nimport { useValue } from '../../internal/hooks/useValue';\nimport type { NFTContextType, NFTProviderReact } from '../types';\n\nconst emptyContext = {} as NFTContextType;\n\nexport const NFTContext = createContext<NFTContextType>(emptyContext);\n\nexport function useNFTContext() {\n  const context = useContext(NFTContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useNFTContext must be used within an NFTView or NFTMint component',\n    );\n  }\n  return context;\n}\n\nexport function NFTProvider({\n  children,\n  contractAddress,\n  tokenId,\n  isSponsored,\n  useNFTData,\n  buildMintTransaction,\n}: NFTProviderReact) {\n  const [quantity, setQuantity] = useState(1);\n\n  const nftData = useNFTData(contractAddress, tokenId);\n\n  const handleSetQuantity = useCallback((quantity: string) => {\n    setQuantity(Number.parseInt(quantity, 10));\n  }, []);\n\n  const value = useValue({\n    contractAddress,\n    tokenId,\n    isSponsored,\n    quantity,\n    setQuantity: handleSetQuantity,\n    buildMintTransaction,\n    ...nftData,\n  });\n\n  return <NFTContext.Provider value={value}>{children}</NFTContext.Provider>;\n}\n"],"names":["quantity"],"mappings":";;;AAIA,MAAM,eAAe,CAAC;AAET,MAAA,aAAa,cAA8B,YAAY;AAE7D,SAAS,gBAAgB;AACxB,QAAA,UAAU,WAAW,UAAU;AACrC,MAAI,YAAY,cAAc;AAC5B,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAEK,SAAA;AACT;AAEO,SAAS,YAAY;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAqB;AACnB,QAAM,CAAC,UAAU,WAAW,IAAI,SAAS,CAAC;AAEpC,QAAA,UAAU,WAAW,iBAAiB,OAAO;AAE7C,QAAA,oBAAoB,YAAY,CAACA,cAAqB;AAC1D,gBAAY,OAAO,SAASA,WAAU,EAAE,CAAC;AAAA,EAC3C,GAAG,EAAE;AAEL,QAAM,QAAQ,SAAS;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAa;AAAA,IACb;AAAA,IACA,GAAG;AAAA,EAAA,CACJ;AAED,SAAQ,oBAAA,WAAW,UAAX,EAAoB,OAAe,SAAS,CAAA;AACtD;"}