import { jsxs, jsx } from "react/jsx-runtime";
import { useNFTContext } from "../NFTProvider.js";
import { useState, useCallback, useEffect } from "react";
import { defaultNFTSvg } from "../../../internal/svg/defaultNFTSvg.js";
import { cn } from "../../../styles/theme.js";
function NFTImage({
  className,
  square = true,
  onLoading,
  onLoaded,
  onError
}) {
  const { imageUrl, description } = useNFTContext();
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState(false);
  const loadImage = useCallback(() => {
    if (imageUrl) {
      onLoading == null ? void 0 : onLoading(imageUrl);
      const img = new Image();
      img.onload = () => {
        setLoaded(true);
        onLoaded == null ? void 0 : onLoaded();
      };
      img.onerror = (error2) => {
        onError == null ? void 0 : onError({
          error: typeof error2 === "string" ? error2 : error2.type,
          code: "NmNIc01",
          // NFT module NFTImage component 01 error
          message: "Error loading image"
        });
        setError(true);
      };
      img.src = imageUrl;
    }
  }, [imageUrl, onLoading, onLoaded, onError]);
  useEffect(() => {
    loadImage();
  }, [loadImage]);
  const handleRetry = useCallback(
    async (e) => {
      e.stopPropagation();
      setError(false);
      loadImage();
    },
    [loadImage]
  );
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: cn(
        "grid w-full",
        "[&>*]:col-start-1 [&>*]:col-end-1 [&>*]:row-start-1 [&>*]:row-end-1",
        { "aspect-square": square },
        className
      ),
      children: [
        /* @__PURE__ */ jsx("div", { className: "flex items-center justify-center", children: defaultNFTSvg }),
        /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(
              "grid h-full w-full content-center justify-center overflow-hidden",
              { "aspect-square": square }
            ),
            children: /* @__PURE__ */ jsx(
              "img",
              {
                "data-testid": "ockNFTImage",
                src: imageUrl,
                alt: description,
                decoding: "async",
                className: cn(
                  "transition-opacity duration-500 ease-in-out",
                  loaded ? "opacity-100" : "opacity-0",
                  { "h-full w-full object-cover": square }
                )
              }
            )
          }
        ),
        error && /* @__PURE__ */ jsx("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ jsx("button", { type: "button", onClick: handleRetry, className: "z-10 mt-[60%]", children: "retry" }) })
      ]
    }
  );
}
export {
  NFTImage
};
//# sourceMappingURL=NFTImage.js.map
