{"version":3,"file":"NFTMintButton.js","sources":["../../../../src/nft/components/mint/NFTMintButton.tsx"],"sourcesContent":["import { Spinner } from '@/internal/components/Spinner';\nimport { useNFTLifecycleContext } from '@/nft/components/NFTLifecycleProvider';\nimport { useNFTContext } from '@/nft/components/NFTProvider';\nimport { useMintAnalytics } from '@/nft/hooks/useMintAnalytics';\nimport { cn, color, text } from '@/styles/theme';\nimport {\n  Transaction,\n  TransactionButton,\n  type TransactionButtonReact,\n  type LifecycleStatus as TransactionLifecycleStatus,\n  TransactionSponsor,\n  TransactionStatus,\n  TransactionStatusAction,\n  TransactionStatusLabel,\n} from '@/transaction';\nimport type { Call } from '@/transaction/types';\nimport { ConnectWallet } from '@/wallet';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAccount, useChainId } from 'wagmi';\n\ntype NFTMintButtonReact = {\n  className?: string;\n  label?: string;\n} & Pick<\n  TransactionButtonReact,\n  'disabled' | 'pendingOverride' | 'successOverride' | 'errorOverride'\n>;\n\nexport function NFTMintButton({\n  className,\n  label = 'Mint',\n  disabled,\n  pendingOverride,\n  successOverride,\n  errorOverride,\n}: NFTMintButtonReact) {\n  const chainId = useChainId();\n  const { address } = useAccount();\n  const {\n    contractAddress,\n    tokenId,\n    network,\n    isEligibleToMint,\n    buildMintTransaction,\n    isSponsored,\n    quantity,\n    name,\n  } = useNFTContext();\n  const { updateLifecycleStatus } = useNFTLifecycleContext();\n  const [callData, setCallData] = useState<Call[]>([]);\n  const [mintError, setMintError] = useState<string | null>(null);\n  const { setTransactionState } = useMintAnalytics();\n\n  const handleTransactionError = useCallback(\n    (error: string) => {\n      updateLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          error: 'Error building mint transaction',\n          code: 'NmNBc01', // NFT module NFTMintButton component 01 error\n          message: error,\n        },\n      });\n      setMintError(error);\n    },\n    [updateLifecycleStatus],\n  );\n\n  const fetchTransactions = useCallback(async () => {\n    // don't fetch transactions until data is available\n    if (name && address && buildMintTransaction && isEligibleToMint) {\n      try {\n        setCallData([]);\n        setMintError(null);\n        setTransactionState('buildingTransaction');\n        const mintTransaction = await buildMintTransaction({\n          takerAddress: address,\n          contractAddress,\n          tokenId,\n          network,\n          quantity,\n        });\n        setCallData(mintTransaction);\n      } catch (error) {\n        handleTransactionError(error as string);\n      }\n    } else {\n      setCallData([]);\n    }\n  }, [\n    address,\n    buildMintTransaction,\n    contractAddress,\n    handleTransactionError,\n    isEligibleToMint,\n    name,\n    network,\n    quantity,\n    setTransactionState,\n    tokenId,\n  ]);\n\n  useEffect(() => {\n    // need to fetch calls on quantity change instead of onClick to avoid smart wallet\n    // popups getting blocked by safari\n    fetchTransactions();\n  }, [fetchTransactions]);\n\n  const handleOnStatus = useCallback(\n    (transactionStatus: TransactionLifecycleStatus) => {\n      setTransactionState(transactionStatus.statusName);\n\n      if (transactionStatus.statusName === 'transactionPending') {\n        updateLifecycleStatus({ statusName: 'transactionPending' });\n      }\n\n      if (\n        transactionStatus.statusName === 'transactionLegacyExecuted' ||\n        transactionStatus.statusName === 'success' ||\n        transactionStatus.statusName === 'error'\n      ) {\n        updateLifecycleStatus(transactionStatus);\n      }\n    },\n    [updateLifecycleStatus, setTransactionState],\n  );\n\n  const transactionButtonLabel = useMemo(() => {\n    if (isEligibleToMint === false || mintError) {\n      return 'Minting not available';\n    }\n\n    if (callData.length === 0) {\n      return <Spinner />;\n    }\n\n    return label;\n  }, [callData, isEligibleToMint, label, mintError]);\n\n  if (!buildMintTransaction) {\n    return null;\n  }\n\n  if (!address) {\n    return <ConnectWallet className={cn('w-full', className)} />;\n  }\n\n  return (\n    <>\n      <Transaction\n        isSponsored={isSponsored}\n        chainId={chainId}\n        calls={callData}\n        onStatus={handleOnStatus}\n      >\n        <TransactionButton\n          className={className}\n          text={transactionButtonLabel}\n          pendingOverride={pendingOverride}\n          successOverride={successOverride}\n          errorOverride={errorOverride}\n          disabled={disabled || transactionButtonLabel !== label}\n        />\n        {!mintError && <TransactionSponsor />}\n        <TransactionStatus>\n          <TransactionStatusLabel />\n          <TransactionStatusAction />\n        </TransactionStatus>\n      </Transaction>\n      {mintError && (\n        <div className={cn(text.label2, color.foregroundMuted, 'pb-2')}>\n          {mintError}\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BO,SAAS,cAAc;AAAA,EAC5B;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAuB;AACrB,QAAM,UAAU,WAAW;AACrB,QAAA,EAAE,QAAQ,IAAI,WAAW;AACzB,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,cAAc;AACZ,QAAA,EAAE,sBAAsB,IAAI,uBAAuB;AACzD,QAAM,CAAC,UAAU,WAAW,IAAI,SAAiB,CAAA,CAAE;AACnD,QAAM,CAAC,WAAW,YAAY,IAAI,SAAwB,IAAI;AACxD,QAAA,EAAE,oBAAoB,IAAI,iBAAiB;AAEjD,QAAM,yBAAyB;AAAA,IAC7B,CAAC,UAAkB;AACK,4BAAA;AAAA,QACpB,YAAY;AAAA,QACZ,YAAY;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX,CACD;AACD,mBAAa,KAAK;AAAA,IACpB;AAAA,IACA,CAAC,qBAAqB;AAAA,EACxB;AAEM,QAAA,oBAAoB,YAAY,YAAY;AAE5C,QAAA,QAAQ,WAAW,wBAAwB,kBAAkB;AAC3D,UAAA;AACF,oBAAY,CAAA,CAAE;AACd,qBAAa,IAAI;AACjB,4BAAoB,qBAAqB;AACnC,cAAA,kBAAkB,MAAM,qBAAqB;AAAA,UACjD,cAAc;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AACD,oBAAY,eAAe;AAAA,eACpB,OAAO;AACd,+BAAuB,KAAe;AAAA,MAAA;AAAA,IACxC,OACK;AACL,kBAAY,CAAA,CAAE;AAAA,IAAA;AAAA,EAChB,GACC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,YAAU,MAAM;AAGI,sBAAA;AAAA,EAAA,GACjB,CAAC,iBAAiB,CAAC;AAEtB,QAAM,iBAAiB;AAAA,IACrB,CAAC,sBAAkD;AACjD,0BAAoB,kBAAkB,UAAU;AAE5C,UAAA,kBAAkB,eAAe,sBAAsB;AACnC,8BAAA,EAAE,YAAY,sBAAsB;AAAA,MAAA;AAI1D,UAAA,kBAAkB,eAAe,+BACjC,kBAAkB,eAAe,aACjC,kBAAkB,eAAe,SACjC;AACA,8BAAsB,iBAAiB;AAAA,MAAA;AAAA,IAE3C;AAAA,IACA,CAAC,uBAAuB,mBAAmB;AAAA,EAC7C;AAEM,QAAA,yBAAyB,QAAQ,MAAM;AACvC,QAAA,qBAAqB,SAAS,WAAW;AACpC,aAAA;AAAA,IAAA;AAGL,QAAA,SAAS,WAAW,GAAG;AACzB,iCAAQ,SAAQ,EAAA;AAAA,IAAA;AAGX,WAAA;AAAA,KACN,CAAC,UAAU,kBAAkB,OAAO,SAAS,CAAC;AAEjD,MAAI,CAAC,sBAAsB;AAClB,WAAA;AAAA,EAAA;AAGT,MAAI,CAAC,SAAS;AACZ,+BAAQ,eAAc,EAAA,WAAW,GAAG,UAAU,SAAS,GAAG;AAAA,EAAA;AAG5D,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,QAEV,UAAA;AAAA,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC;AAAA,cACA,MAAM;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACA,UAAU,YAAY,2BAA2B;AAAA,YAAA;AAAA,UACnD;AAAA,UACC,CAAC,aAAa,oBAAC,oBAAmB,EAAA;AAAA,+BAClC,mBACC,EAAA,UAAA;AAAA,YAAA,oBAAC,wBAAuB,EAAA;AAAA,gCACvB,yBAAwB,CAAA,CAAA;AAAA,UAAA,EAC3B,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,IACC,aACE,oBAAA,OAAA,EAAI,WAAW,GAAG,KAAK,QAAQ,MAAM,iBAAiB,MAAM,GAC1D,UACH,UAAA,CAAA;AAAA,EAAA,GAEJ;AAEJ;"}