import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { Spinner } from "../../../internal/components/Spinner.js";
import { useNFTLifecycleContext } from "../NFTLifecycleProvider.js";
import { useNFTContext } from "../NFTProvider.js";
import { useMintAnalytics } from "../../hooks/useMintAnalytics.js";
import { cn, color, text } from "../../../styles/theme.js";
import { Transaction } from "../../../transaction/components/Transaction.js";
import { TransactionButton } from "../../../transaction/components/TransactionButton.js";
import { TransactionSponsor } from "../../../transaction/components/TransactionSponsor.js";
import { TransactionStatus } from "../../../transaction/components/TransactionStatus.js";
import { TransactionStatusAction } from "../../../transaction/components/TransactionStatusAction.js";
import { TransactionStatusLabel } from "../../../transaction/components/TransactionStatusLabel.js";
import { useState, useCallback, useEffect, useMemo } from "react";
import "../../../transaction/components/TransactionProvider.js";
import { useChainId, useAccount } from "wagmi";
import "wagmi/experimental";
import "../../../core/network/getChainExplorer.js";
import "../../../useOnchainKit.js";
import { ConnectWallet } from "../../../wallet/components/ConnectWallet.js";
import "../../../identity/components/IdentityProvider.js";
import "viem";
import "viem/chains";
import "viem/ens";
import "../../../identity/constants.js";
import "@tanstack/react-query";
import "../../../identity/utils/getAddress.js";
import "../../../internal/svg/defaultAvatarSVG.js";
import "../../../core/network/attestations.js";
import "../../../identity/utils/easSupportedChains.js";
import "../../../internal/svg/badgeSvg.js";
import "../../../internal/svg/githubSvg.js";
import "../../../internal/svg/twitterSvg.js";
import "../../../internal/svg/warpcastSvg.js";
import "../../../internal/svg/websiteSvg.js";
import "../../../identity/utils/getAddresses.js";
import "../../../wallet/components/WalletProvider.js";
import "@farcaster/frame-sdk";
import "../../../token/components/TokenRow.js";
import "../../../internal/components/TextInput.js";
import "../../../internal/svg/searchIconSvg.js";
import "react-dom";
import "../../../token/components/TokenSelectButton.js";
import "../../../internal/svg/addForegroundSvg.js";
import "../../../internal/svg/arrowUpRightSvg.js";
import "../../../internal/svg/toggleSvg.js";
import "../../../internal/svg/baseScanSvg.js";
import "../../../internal/svg/disconnectSvg.js";
import "../../../internal/svg/qrIconSvg.js";
import "../../../internal/svg/refreshSvg.js";
import "../../../token/constants.js";
import "../../../internal/components/QrCode/useLogo.js";
import "qrcode";
import "../../../internal/svg/backArrowSvg.js";
import "../../../internal/svg/copySvg.js";
import "../../../swap/components/SwapProvider.js";
import "../../../internal/svg/appleSvg.js";
import "../../../internal/svg/coinbaseLogoSvg.js";
import "../../../internal/svg/creditCardSvg.js";
import "../../../internal/svg/fundWallet.js";
import "../../../internal/svg/swapSettings.js";
import "../../../internal/svg/walletSvg.js";
import "../../../internal/components/amount-input/CurrencyLabel.js";
import "../../../wallet/components/wallet-advanced-send/components/SendAmountInputTypeSwitch.js";
import "../../../wallet/components/wallet-advanced-send/components/SendProvider.js";
import "../../../fund/components/FundCardProvider.js";
import "../../../fund/components/FundCardPaymentMethodSelectRow.js";
import "../../../fund/components/FundCardPaymentMethodSelectorToggle.js";
import "../../../wallet/components/WalletDropdown.js";
import "../../../internal/svg/portfolioSvg.js";
import "../../../internal/svg/basenameSvg.js";
import "../../../internal/svg/trustWalletSvg.js";
import "wagmi/connectors";
import "viem/account-abstraction";
function NFTMintButton({
  className,
  label = "Mint",
  disabled,
  pendingOverride,
  successOverride,
  errorOverride
}) {
  const chainId = useChainId();
  const { address } = useAccount();
  const {
    contractAddress,
    tokenId,
    network,
    isEligibleToMint,
    buildMintTransaction,
    isSponsored,
    quantity,
    name
  } = useNFTContext();
  const { updateLifecycleStatus } = useNFTLifecycleContext();
  const [callData, setCallData] = useState([]);
  const [mintError, setMintError] = useState(null);
  const { setTransactionState } = useMintAnalytics();
  const handleTransactionError = useCallback(
    (error) => {
      updateLifecycleStatus({
        statusName: "error",
        statusData: {
          error: "Error building mint transaction",
          code: "NmNBc01",
          // NFT module NFTMintButton component 01 error
          message: error
        }
      });
      setMintError(error);
    },
    [updateLifecycleStatus]
  );
  const fetchTransactions = useCallback(async () => {
    if (name && address && buildMintTransaction && isEligibleToMint) {
      try {
        setCallData([]);
        setMintError(null);
        setTransactionState("buildingTransaction");
        const mintTransaction = await buildMintTransaction({
          takerAddress: address,
          contractAddress,
          tokenId,
          network,
          quantity
        });
        setCallData(mintTransaction);
      } catch (error) {
        handleTransactionError(error);
      }
    } else {
      setCallData([]);
    }
  }, [
    address,
    buildMintTransaction,
    contractAddress,
    handleTransactionError,
    isEligibleToMint,
    name,
    network,
    quantity,
    setTransactionState,
    tokenId
  ]);
  useEffect(() => {
    fetchTransactions();
  }, [fetchTransactions]);
  const handleOnStatus = useCallback(
    (transactionStatus) => {
      setTransactionState(transactionStatus.statusName);
      if (transactionStatus.statusName === "transactionPending") {
        updateLifecycleStatus({ statusName: "transactionPending" });
      }
      if (transactionStatus.statusName === "transactionLegacyExecuted" || transactionStatus.statusName === "success" || transactionStatus.statusName === "error") {
        updateLifecycleStatus(transactionStatus);
      }
    },
    [updateLifecycleStatus, setTransactionState]
  );
  const transactionButtonLabel = useMemo(() => {
    if (isEligibleToMint === false || mintError) {
      return "Minting not available";
    }
    if (callData.length === 0) {
      return /* @__PURE__ */ jsx(Spinner, {});
    }
    return label;
  }, [callData, isEligibleToMint, label, mintError]);
  if (!buildMintTransaction) {
    return null;
  }
  if (!address) {
    return /* @__PURE__ */ jsx(ConnectWallet, { className: cn("w-full", className) });
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(
      Transaction,
      {
        isSponsored,
        chainId,
        calls: callData,
        onStatus: handleOnStatus,
        children: [
          /* @__PURE__ */ jsx(
            TransactionButton,
            {
              className,
              text: transactionButtonLabel,
              pendingOverride,
              successOverride,
              errorOverride,
              disabled: disabled || transactionButtonLabel !== label
            }
          ),
          !mintError && /* @__PURE__ */ jsx(TransactionSponsor, {}),
          /* @__PURE__ */ jsxs(TransactionStatus, { children: [
            /* @__PURE__ */ jsx(TransactionStatusLabel, {}),
            /* @__PURE__ */ jsx(TransactionStatusAction, {})
          ] })
        ]
      }
    ),
    mintError && /* @__PURE__ */ jsx("div", { className: cn(text.label2, color.foregroundMuted, "pb-2"), children: mintError })
  ] });
}
export {
  NFTMintButton
};
//# sourceMappingURL=NFTMintButton.js.map
