import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useIsMounted } from "../../internal/hooks/useIsMounted.js";
import { useTheme } from "../../internal/hooks/useTheme.js";
import { cn } from "../../styles/theme.js";
import { useOnchainKit } from "../../useOnchainKit.js";
import { TransactionButton } from "./TransactionButton.js";
import { TransactionProvider } from "./TransactionProvider.js";
import { TransactionToast } from "./TransactionToast.js";
function Transaction({
  calls,
  capabilities,
  chainId,
  className,
  children,
  contracts,
  disabled = false,
  isSponsored,
  onError,
  onStatus,
  onSuccess,
  resetAfter
}) {
  const isMounted = useIsMounted();
  const componentTheme = useTheme();
  const { chain } = useOnchainKit();
  if (!isMounted) {
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: cn(componentTheme, "flex w-full flex-col gap-2", className)
      }
    );
  }
  const accountChainId = chainId ? chainId : chain.id;
  return /* @__PURE__ */ jsx(
    TransactionProvider,
    {
      calls,
      capabilities,
      chainId: accountChainId,
      contracts,
      isSponsored,
      onError,
      onStatus,
      onSuccess,
      resetAfter,
      children: /* @__PURE__ */ jsx(
        "div",
        {
          className: cn(componentTheme, "flex w-full flex-col gap-2", className),
          children: children ?? /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(TransactionButton, { disabled }),
            /* @__PURE__ */ jsx(TransactionToast, {})
          ] })
        }
      )
    }
  );
}
export {
  Transaction
};
//# sourceMappingURL=Transaction.js.map
