import { jsx } from "react/jsx-runtime";
import { useMemo, useCallback } from "react";
import { useAccount, useChainId } from "wagmi";
import { getChainExplorer } from "../../core/network/getChainExplorer.js";
import { Spinner } from "../../internal/components/Spinner.js";
import { cn, color, text, pressable, border } from "../../styles/theme.js";
import { isSpinnerDisplayed } from "../utils/isSpinnerDisplayed.js";
import { useTransactionContext } from "./TransactionProvider.js";
function TransactionButton({
  className,
  disabled = false,
  text: idleText = "Transact",
  errorOverride,
  successOverride,
  pendingOverride
}) {
  var _a, _b;
  const {
    chainId,
    errorMessage,
    isLoading,
    lifecycleStatus,
    onSubmit,
    receipt,
    transactions,
    transactionCount,
    transactionHash,
    transactionId
  } = useTransactionContext();
  const { address } = useAccount();
  const accountChainId = chainId ?? useChainId();
  const isLegacyTransactionInProgress = lifecycleStatus.statusName === "transactionLegacyExecuted" && transactionCount !== ((_b = (_a = lifecycleStatus == null ? void 0 : lifecycleStatus.statusData) == null ? void 0 : _a.transactionHashList) == null ? void 0 : _b.length);
  const isInProgress = lifecycleStatus.statusName === "buildingTransaction" || lifecycleStatus.statusName === "transactionPending" || isLegacyTransactionInProgress || isLoading;
  const isMissingProps = !transactions || !address;
  const isWaitingForReceipt = !!transactionId || !!transactionHash;
  const isDisabled = !receipt && (isInProgress || isMissingProps || isWaitingForReceipt || disabled);
  const displayPendingState = isSpinnerDisplayed({
    errorMessage,
    hasReceipt: !!receipt,
    isInProgress,
    transactionHash,
    transactionId
  });
  const { errorText, successText, pendingContent } = useMemo(() => {
    const successText2 = (successOverride == null ? void 0 : successOverride.text) ?? "View transaction";
    const errorText2 = (errorOverride == null ? void 0 : errorOverride.text) ?? "Try again";
    const pendingContent2 = (pendingOverride == null ? void 0 : pendingOverride.text) ?? /* @__PURE__ */ jsx(Spinner, {});
    return { successText: successText2, errorText: errorText2, pendingContent: pendingContent2 };
  }, [errorOverride, pendingOverride, successOverride]);
  const defaultSuccessHandler = useCallback(() => {
    if (receipt && transactionId && transactionHash && chainId && address) {
      const url = new URL("https://wallet.coinbase.com/assets/transactions");
      url.searchParams.set("contentParams[txHash]", transactionHash);
      url.searchParams.set("contentParams[chainId]", JSON.stringify(chainId));
      url.searchParams.set("contentParams[fromAddress]", address);
      return window.open(url, "_blank", "noopener,noreferrer");
    }
    const chainExplorer = getChainExplorer(accountChainId);
    return window.open(
      `${chainExplorer}/tx/${transactionHash}`,
      "_blank",
      "noopener,noreferrer"
    );
  }, [
    address,
    chainId,
    receipt,
    transactionId,
    transactionHash,
    accountChainId
  ]);
  const successHandler = useCallback(() => {
    var _a2;
    if ((successOverride == null ? void 0 : successOverride.onClick) && receipt) {
      return (_a2 = successOverride == null ? void 0 : successOverride.onClick) == null ? void 0 : _a2.call(successOverride, receipt);
    }
    defaultSuccessHandler();
  }, [defaultSuccessHandler, successOverride, receipt]);
  const errorHandler = useCallback(() => {
    var _a2;
    if (errorOverride == null ? void 0 : errorOverride.onClick) {
      return (_a2 = errorOverride == null ? void 0 : errorOverride.onClick) == null ? void 0 : _a2.call(errorOverride);
    }
    return onSubmit();
  }, [errorOverride, onSubmit]);
  const buttonContent = useMemo(() => {
    if (receipt) {
      return successText;
    }
    if (errorMessage) {
      return errorText;
    }
    if (displayPendingState) {
      return pendingContent;
    }
    return idleText;
  }, [
    displayPendingState,
    errorMessage,
    errorText,
    idleText,
    pendingContent,
    receipt,
    successText
  ]);
  const handleSubmit = useCallback(() => {
    if (receipt) {
      successHandler();
    } else if (errorMessage) {
      errorHandler();
    } else {
      onSubmit();
    }
  }, [errorMessage, errorHandler, onSubmit, receipt, successHandler]);
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: cn(
        pressable.primary,
        border.radius,
        "w-full rounded-xl",
        "px-4 py-3 font-medium leading-6",
        isDisabled && pressable.disabled,
        text.headline,
        color.inverse,
        className
      ),
      onClick: handleSubmit,
      type: "button",
      disabled: isDisabled,
      "data-testid": "ockTransactionButton_Button",
      children: buttonContent
    }
  );
}
export {
  TransactionButton
};
//# sourceMappingURL=TransactionButton.js.map
