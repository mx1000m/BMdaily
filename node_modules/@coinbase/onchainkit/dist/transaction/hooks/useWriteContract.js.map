{"version":3,"file":"useWriteContract.js","sources":["../../../src/transaction/hooks/useWriteContract.ts"],"sourcesContent":["import type { Address } from 'viem';\nimport { useWriteContract as useWriteContractWagmi } from 'wagmi';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseWriteContractParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * Wagmi hook for single contract transactions.\n * Supports both EOAs and Smart Wallets.\n * Does not support transaction batching or paymasters.\n */\nexport function useWriteContract({\n  setLifecycleStatus,\n  transactionHashList,\n}: UseWriteContractParams) {\n  const { status, writeContractAsync, data } = useWriteContractWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUWCh01', // Transaction module UseWriteContract hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (hash: Address) => {\n        setLifecycleStatus({\n          statusName: 'transactionLegacyExecuted',\n          statusData: {\n            transactionHashList: [...transactionHashList, hash],\n          },\n        });\n      },\n    },\n  });\n  return { status, writeContractAsync, data };\n}\n"],"names":["useWriteContractWagmi"],"mappings":";;;AAWO,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA;AACF,GAA2B;AACzB,QAAM,EAAE,QAAQ,oBAAoB,KAAA,IAASA,mBAAsB;AAAA,IACjE,UAAU;AAAA,MACR,SAAS,CAAC,MAAM;AACd,cAAM,eAAe,2BAA2B,CAAC,IAC7C,oBACA;AACe,2BAAA;AAAA,UACjB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,MAAM;AAAA;AAAA,YACN,OAAO,EAAE;AAAA,YACT,SAAS;AAAA,UAAA;AAAA,QACX,CACD;AAAA,MACH;AAAA,MACA,WAAW,CAAC,SAAkB;AACT,2BAAA;AAAA,UACjB,YAAY;AAAA,UACZ,YAAY;AAAA,YACV,qBAAqB,CAAC,GAAG,qBAAqB,IAAI;AAAA,UAAA;AAAA,QACpD,CACD;AAAA,MAAA;AAAA,IACH;AAAA,EACF,CACD;AACM,SAAA,EAAE,QAAQ,oBAAoB,KAAK;AAC5C;"}