{"version":3,"file":"getSendCalldata.js","sources":["../../../../../src/wallet/components/wallet-advanced-send/utils/getSendCalldata.ts"],"sourcesContent":["import { buildSendTransaction } from '@/api/buildSendTransaction';\nimport type { APIError } from '@/api/types';\nimport { isApiError } from '@/internal/utils/isApiResponseError';\nimport type { Token } from '@/token';\nimport type { Call } from '@/transaction/types';\nimport { type Address, parseUnits } from 'viem';\n\ntype GetSendCalldataParams = {\n  recipientAddress: Address | null;\n  token: Token | null;\n  amount: string | null;\n};\n\ntype GetSendCalldataResponse = {\n  calldata: Call | null;\n  error: APIError | null;\n};\n\nexport function getSendCalldata({\n  recipientAddress,\n  token,\n  amount,\n}: GetSendCalldataParams): GetSendCalldataResponse {\n  if (!recipientAddress || !token || !token.decimals || !amount) {\n    return {\n      calldata: null,\n      error: {\n        code: 'SemBSeTx01',\n        error: 'Invalid transaction parameters',\n        message: 'Could not build send transaction',\n      },\n    };\n  }\n\n  if (!token.address && token.symbol !== 'ETH') {\n    return {\n      calldata: null,\n      error: {\n        code: 'SemBSeTx02',\n        error: 'No token address provided for non-ETH token',\n        message: 'Could not build send transaction',\n      },\n    };\n  }\n\n  try {\n    const parsedAmount = parseUnits(amount, token.decimals);\n    const sendTransaction = buildSendTransaction({\n      recipientAddress,\n      tokenAddress: token.address || null,\n      amount: parsedAmount,\n    });\n\n    if (isApiError(sendTransaction)) {\n      return {\n        calldata: null,\n        error: sendTransaction,\n      };\n    }\n\n    return {\n      calldata: sendTransaction,\n      error: null,\n    };\n  } catch (err) {\n    return {\n      calldata: null,\n      error: {\n        code: 'SemBSeTx03',\n        error: err instanceof Error ? err.message : 'Unknown error',\n        message: 'Could not build send transaction',\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;;AAkBO,SAAS,gBAAgB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AACF,GAAmD;AAC7C,MAAA,CAAC,oBAAoB,CAAC,SAAS,CAAC,MAAM,YAAY,CAAC,QAAQ;AACtD,WAAA;AAAA,MACL,UAAU;AAAA,MACV,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,MAAA;AAAA,IAEb;AAAA,EAAA;AAGF,MAAI,CAAC,MAAM,WAAW,MAAM,WAAW,OAAO;AACrC,WAAA;AAAA,MACL,UAAU;AAAA,MACV,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,MAAA;AAAA,IAEb;AAAA,EAAA;AAGE,MAAA;AACF,UAAM,eAAe,WAAW,QAAQ,MAAM,QAAQ;AACtD,UAAM,kBAAkB,qBAAqB;AAAA,MAC3C;AAAA,MACA,cAAc,MAAM,WAAW;AAAA,MAC/B,QAAQ;AAAA,IAAA,CACT;AAEG,QAAA,WAAW,eAAe,GAAG;AACxB,aAAA;AAAA,QACL,UAAU;AAAA,QACV,OAAO;AAAA,MACT;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,UAAU;AAAA,MACV,OAAO;AAAA,IACT;AAAA,WACO,KAAK;AACL,WAAA;AAAA,MACL,UAAU;AAAA,MACV,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO,eAAe,QAAQ,IAAI,UAAU;AAAA,QAC5C,SAAS;AAAA,MAAA;AAAA,IAEb;AAAA,EAAA;AAEJ;"}