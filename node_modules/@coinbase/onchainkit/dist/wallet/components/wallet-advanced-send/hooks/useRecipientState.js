import "react/jsx-runtime";
import { useState, useCallback, useEffect } from "react";
import "clsx";
import "tailwind-merge";
import { getSlicedAddress } from "../../../../identity/utils/getSlicedAddress.js";
import "../../../../identity/components/IdentityProvider.js";
import "viem";
import { base } from "viem/chains";
import "viem/ens";
import "../../../../identity/constants.js";
import "@tanstack/react-query";
import { getName } from "../../../../identity/utils/getName.js";
import "../../../../internal/svg/defaultAvatarSVG.js";
import "../../../../core/network/attestations.js";
import "../../../../identity/utils/easSupportedChains.js";
import "../../../../internal/svg/badgeSvg.js";
import "../../../../useOnchainKit.js";
import "wagmi";
import "../../../../internal/svg/githubSvg.js";
import "../../../../internal/svg/twitterSvg.js";
import "../../../../internal/svg/warpcastSvg.js";
import "../../../../internal/svg/websiteSvg.js";
import "../../../../identity/utils/getAddress.js";
import "../../../../identity/utils/getAddresses.js";
import { validateAddressInput } from "../utils/validateAddressInput.js";
function useRecipientState() {
  const [recipientState, setRecipientState] = useState({
    phase: "input",
    input: "",
    address: null,
    displayValue: null
  });
  const updateRecipientInput = useCallback((input) => {
    setRecipientState((prev) => ({
      ...prev,
      input
    }));
  }, []);
  const validateRecipientInput = useCallback((input) => {
    validateAddressInput(input).then((validatedAddress) => {
      if (!validatedAddress) {
        setRecipientState({
          phase: "input",
          input,
          address: null,
          displayValue: null
        });
        return;
      }
      setRecipientState({
        phase: "validated",
        input,
        address: validatedAddress,
        displayValue: null
      });
    });
  }, []);
  const selectRecipient = useCallback(
    async (selection) => {
      setRecipientState(selection);
    },
    []
  );
  const deselectRecipient = useCallback(() => {
    if (recipientState.phase === "selected") {
      setRecipientState({
        phase: "validated",
        input: recipientState.input,
        address: recipientState.address,
        displayValue: null
      });
    } else {
      setRecipientState({
        ...recipientState,
        displayValue: null
      });
    }
  }, [recipientState]);
  useEffect(() => {
    if (recipientState.phase === "selected") {
      getName({
        address: recipientState.address,
        chain: base
      }).then((name) => {
        setRecipientState({
          phase: recipientState.phase,
          input: recipientState.input,
          address: recipientState.address,
          displayValue: name ?? getSlicedAddress(recipientState.address)
        });
      }).catch(
        () => setRecipientState({
          phase: recipientState.phase,
          input: recipientState.input,
          address: recipientState.address,
          displayValue: getSlicedAddress(recipientState.address)
        })
      );
    }
  }, [recipientState.phase, recipientState.address, recipientState.input]);
  return {
    recipientState,
    updateRecipientInput,
    validateRecipientInput,
    selectRecipient,
    deselectRecipient
  };
}
export {
  useRecipientState
};
//# sourceMappingURL=useRecipientState.js.map
