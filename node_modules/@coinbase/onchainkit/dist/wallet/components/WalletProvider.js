'use client';
import { jsx } from "react/jsx-runtime";
import { useBreakpoints } from "../../internal/hooks/useBreakpoints.js";
import { useOnchainKit } from "../../useOnchainKit.js";
import { createContext, useState, useRef, useMemo, useCallback, useEffect, useContext } from "react";
import { useAccount } from "wagmi";
import { getAnimations } from "../utils/getAnimations.js";
import { calculateSubComponentPosition } from "../utils/getWalletSubComponentPosition.js";
const emptyContext = {};
const WalletContext = createContext(emptyContext);
function WalletProvider({ children, isSponsored }) {
  const { chain } = useOnchainKit();
  const [isConnectModalOpen, setIsConnectModalOpen] = useState(false);
  const [isSubComponentOpen, setIsSubComponentOpen] = useState(false);
  const [isSubComponentClosing, setIsSubComponentClosing] = useState(false);
  const [showSubComponentAbove, setShowSubComponentAbove] = useState(false);
  const [alignSubComponentRight, setAlignSubComponentRight] = useState(false);
  const connectRef = useRef(null);
  const { address } = useAccount();
  const breakpoint = useBreakpoints();
  const [activeFeature, setActiveFeature] = useState(null);
  const [isActiveFeatureClosing, setIsActiveFeatureClosing] = useState(false);
  const animations = useMemo(() => {
    return getAnimations(isSubComponentClosing, showSubComponentAbove);
  }, [isSubComponentClosing, showSubComponentAbove]);
  const handleClose = useCallback(() => {
    if (!isSubComponentOpen) {
      return;
    }
    setIsSubComponentClosing(true);
  }, [isSubComponentOpen]);
  useEffect(() => {
    if (isSubComponentOpen && (connectRef == null ? void 0 : connectRef.current)) {
      const connectRect = connectRef.current.getBoundingClientRect();
      const position = calculateSubComponentPosition(connectRect);
      setShowSubComponentAbove(position.showAbove);
      setAlignSubComponentRight(position.alignRight);
    }
  }, [isSubComponentOpen]);
  const value = useMemo(() => {
    return {
      address,
      chain,
      breakpoint,
      isConnectModalOpen,
      setIsConnectModalOpen,
      isSubComponentOpen,
      setIsSubComponentOpen,
      isSubComponentClosing,
      setIsSubComponentClosing,
      handleClose,
      connectRef,
      showSubComponentAbove,
      alignSubComponentRight,
      activeFeature,
      setActiveFeature,
      isActiveFeatureClosing,
      setIsActiveFeatureClosing,
      animations,
      isSponsored
    };
  }, [
    address,
    chain,
    breakpoint,
    isConnectModalOpen,
    isSubComponentOpen,
    isSubComponentClosing,
    handleClose,
    showSubComponentAbove,
    alignSubComponentRight,
    activeFeature,
    isActiveFeatureClosing,
    animations,
    isSponsored
  ]);
  return /* @__PURE__ */ jsx(WalletContext.Provider, { value, children });
}
function useWalletContext() {
  return useContext(WalletContext);
}
export {
  WalletProvider,
  useWalletContext
};
//# sourceMappingURL=WalletProvider.js.map
