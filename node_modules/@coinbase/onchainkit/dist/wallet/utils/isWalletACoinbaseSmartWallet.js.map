{"version":3,"file":"isWalletACoinbaseSmartWallet.js","sources":["../../../src/wallet/utils/isWalletACoinbaseSmartWallet.ts"],"sourcesContent":["import { checksumAddress, decodeAbiParameters } from 'viem';\nimport type { Address, BlockTag, Hex } from 'viem';\nimport {\n  CB_SW_FACTORY_ADDRESS,\n  CB_SW_PROXY_BYTECODE,\n  CB_SW_V1_IMPLEMENTATION_ADDRESS,\n  ERC_1967_PROXY_IMPLEMENTATION_SLOT,\n} from '../constants';\nimport type {\n  IsWalletACoinbaseSmartWalletOptions,\n  IsWalletACoinbaseSmartWalletResponse,\n} from '../types';\n\n/**\n * Validates a User Operation by checking if the sender address\n * is a proxy with the expected bytecode.\n */\nexport async function isWalletACoinbaseSmartWallet({\n  client,\n  userOp,\n}: IsWalletACoinbaseSmartWalletOptions): Promise<IsWalletACoinbaseSmartWalletResponse> {\n  try {\n    const code = await client.getBytecode({ address: userOp.sender });\n\n    if (!code) {\n      // no code at address, check that the initCode is deploying a Coinbase Smart Wallet\n      // factory address is first 20 bytes of initCode after '0x'\n      const factoryAddress = userOp?.initCode?.slice(0, 42) as Address;\n      if (\n        checksumAddress(factoryAddress) !==\n        checksumAddress(CB_SW_FACTORY_ADDRESS)\n      ) {\n        return {\n          isCoinbaseSmartWallet: false,\n          error: 'Invalid factory address',\n          code: 'W_ERR_1',\n        };\n      }\n      return { isCoinbaseSmartWallet: true };\n    }\n\n    // Verify if the sender address bytecode matches the Coinbase Smart Wallet proxy bytecode\n    if (code !== CB_SW_PROXY_BYTECODE) {\n      return {\n        isCoinbaseSmartWallet: false,\n        error: 'Invalid bytecode',\n        code: 'W_ERR_2',\n      };\n    }\n  } catch (error) {\n    console.error('Error retrieving bytecode:', error);\n    return {\n      isCoinbaseSmartWallet: false,\n      error: 'Error retrieving bytecode',\n      code: 'W_ERR_3',\n    };\n  }\n\n  let implementation: Hex;\n  try {\n    implementation = await client.request<{\n      Parameters: [Address, Hex, BlockTag];\n      ReturnType: Hex;\n    }>({\n      method: 'eth_getStorageAt',\n      params: [userOp.sender, ERC_1967_PROXY_IMPLEMENTATION_SLOT, 'latest'],\n    });\n  } catch (error) {\n    console.error('Error retrieving implementation address:', error);\n    return {\n      isCoinbaseSmartWallet: false,\n      error: 'Error retrieving implementation address',\n      code: 'W_ERR_4',\n    };\n  }\n\n  // Decode the implementation address from the retrieved storage data\n  const implementationAddress = decodeAbiParameters(\n    [{ type: 'address' }],\n    implementation,\n  )[0];\n\n  // Verify if the implementation address matches the expected Coinbase Smart Wallet address\n  if (\n    checksumAddress(implementationAddress) !==\n    checksumAddress(CB_SW_V1_IMPLEMENTATION_ADDRESS)\n  ) {\n    return {\n      isCoinbaseSmartWallet: false,\n      error: 'Invalid implementation address',\n      code: 'W_ERR_5',\n    };\n  }\n\n  return { isCoinbaseSmartWallet: true };\n}\n"],"names":[],"mappings":";;AAiBA,eAAsB,6BAA6B;AAAA,EACjD;AAAA,EACA;AACF,GAAuF;;AACjF,MAAA;AACI,UAAA,OAAO,MAAM,OAAO,YAAY,EAAE,SAAS,OAAO,QAAQ;AAEhE,QAAI,CAAC,MAAM;AAGT,YAAM,kBAAiB,sCAAQ,aAAR,mBAAkB,MAAM,GAAG;AAClD,UACE,gBAAgB,cAAc,MAC9B,gBAAgB,qBAAqB,GACrC;AACO,eAAA;AAAA,UACL,uBAAuB;AAAA,UACvB,OAAO;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MAAA;AAEK,aAAA,EAAE,uBAAuB,KAAK;AAAA,IAAA;AAIvC,QAAI,SAAS,sBAAsB;AAC1B,aAAA;AAAA,QACL,uBAAuB;AAAA,QACvB,OAAO;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IAAA;AAAA,WAEK,OAAO;AACN,YAAA,MAAM,8BAA8B,KAAK;AAC1C,WAAA;AAAA,MACL,uBAAuB;AAAA,MACvB,OAAO;AAAA,MACP,MAAM;AAAA,IACR;AAAA,EAAA;AAGE,MAAA;AACA,MAAA;AACe,qBAAA,MAAM,OAAO,QAG3B;AAAA,MACD,QAAQ;AAAA,MACR,QAAQ,CAAC,OAAO,QAAQ,oCAAoC,QAAQ;AAAA,IAAA,CACrE;AAAA,WACM,OAAO;AACN,YAAA,MAAM,4CAA4C,KAAK;AACxD,WAAA;AAAA,MACL,uBAAuB;AAAA,MACvB,OAAO;AAAA,MACP,MAAM;AAAA,IACR;AAAA,EAAA;AAIF,QAAM,wBAAwB;AAAA,IAC5B,CAAC,EAAE,MAAM,WAAW;AAAA,IACpB;AAAA,IACA,CAAC;AAGH,MACE,gBAAgB,qBAAqB,MACrC,gBAAgB,+BAA+B,GAC/C;AACO,WAAA;AAAA,MACL,uBAAuB;AAAA,MACvB,OAAO;AAAA,MACP,MAAM;AAAA,IACR;AAAA,EAAA;AAGK,SAAA,EAAE,uBAAuB,KAAK;AACvC;"}