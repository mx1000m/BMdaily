{"version":3,"file":"buildMintTransaction.js","sources":["../../src/api/buildMintTransaction.ts"],"sourcesContent":["import { RequestContext } from '@/core/network/constants';\nimport { CDP_MINT_TOKEN } from '../core/network/definitions/nft';\nimport { sendRequest } from '../core/network/request';\nimport type {\n  BuildMintTransactionParams,\n  BuildMintTransactionResponse,\n} from './types';\n\n/**\n * Retrieves contract to mint an NFT\n */\nexport async function buildMintTransaction(\n  params: BuildMintTransactionParams,\n  context: RequestContext = RequestContext.API,\n): Promise<BuildMintTransactionResponse> {\n  const { mintAddress, tokenId, network = '', quantity, takerAddress } = params;\n\n  try {\n    const res = await sendRequest<\n      BuildMintTransactionParams,\n      BuildMintTransactionResponse\n    >(\n      CDP_MINT_TOKEN,\n      [\n        {\n          mintAddress,\n          network,\n          quantity,\n          takerAddress,\n          tokenId,\n        },\n      ],\n      context,\n    );\n    if (res.error) {\n      return {\n        code: `${res.error.code}`,\n        error: 'Error building mint transaction',\n        message: res.error.message,\n      };\n    }\n\n    return res.result;\n  } catch {\n    return {\n      code: 'uncaught-nft',\n      error: 'Something went wrong',\n      message: 'Error building mint transaction',\n    };\n  }\n}\n"],"names":[],"mappings":";;;AAWA,eAAsB,qBACpB,QACA,UAA0B,eAAe,KACF;AACvC,QAAM,EAAE,aAAa,SAAS,UAAU,IAAI,UAAU,iBAAiB;AAEnE,MAAA;AACF,UAAM,MAAM,MAAM;AAAA,MAIhB;AAAA,MACA;AAAA,QACE;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MAEJ;AAAA,MACA;AAAA,IACF;AACA,QAAI,IAAI,OAAO;AACN,aAAA;AAAA,QACL,MAAM,GAAG,IAAI,MAAM,IAAI;AAAA,QACvB,OAAO;AAAA,QACP,SAAS,IAAI,MAAM;AAAA,MACrB;AAAA,IAAA;AAGF,WAAO,IAAI;AAAA,EAAA,QACL;AACC,WAAA;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,EAAA;AAEJ;"}