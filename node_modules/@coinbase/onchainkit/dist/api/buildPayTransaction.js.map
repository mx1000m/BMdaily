{"version":3,"file":"buildPayTransaction.js","sources":["../../src/api/buildPayTransaction.ts"],"sourcesContent":["import { RequestContext } from '@/core/network/constants';\nimport {\n  CDP_CREATE_PRODUCT_CHARGE,\n  CDP_HYDRATE_CHARGE,\n} from '../core/network/definitions/pay';\nimport { type JSONRPCResult, sendRequest } from '../core/network/request';\nimport type {\n  BuildPayTransactionParams,\n  BuildPayTransactionResponse,\n  CreateProductChargeParams,\n  HydrateChargeAPIParams,\n} from './types';\nimport { getPayErrorMessage } from './utils/getPayErrorMessage';\n\nexport async function buildPayTransaction(\n  params: BuildPayTransactionParams,\n  _context: RequestContext = RequestContext.API,\n): Promise<BuildPayTransactionResponse> {\n  const { address, chargeId, productId } = params;\n\n  try {\n    let res: JSONRPCResult<BuildPayTransactionResponse>;\n    if (chargeId) {\n      res = await sendRequest<\n        HydrateChargeAPIParams,\n        BuildPayTransactionResponse\n      >(\n        CDP_HYDRATE_CHARGE,\n        [\n          {\n            sender: address,\n            chargeId,\n          },\n        ],\n        _context,\n      );\n    } else if (productId) {\n      res = await sendRequest<\n        CreateProductChargeParams,\n        BuildPayTransactionResponse\n      >(\n        CDP_CREATE_PRODUCT_CHARGE,\n        [\n          {\n            sender: address,\n            productId,\n          },\n        ],\n        _context,\n      );\n    } else {\n      return {\n        code: 'AmBPTa01', // Api Module Build Pay Transaction Error 01\n        error: 'No chargeId or productId provided',\n        message: getPayErrorMessage(),\n      };\n    }\n    if (res.error) {\n      return {\n        code: 'AmBPTa02', // Api Module Build Pay Transaction Error 02\n        error: res.error.message,\n        message: getPayErrorMessage(res.error?.code),\n      };\n    }\n    return res.result;\n  } catch {\n    return {\n      code: 'AmBPTa03', // Api Module Build Pay Transaction Error 03\n      error: 'Something went wrong',\n      message: getPayErrorMessage(),\n    };\n  }\n}\n"],"names":[],"mappings":";;;;AAcA,eAAsB,oBACpB,QACA,WAA2B,eAAe,KACJ;;AACtC,QAAM,EAAE,SAAS,UAAU,UAAc,IAAA;AAErC,MAAA;AACE,QAAA;AACJ,QAAI,UAAU;AACZ,YAAM,MAAM;AAAA,QAIV;AAAA,QACA;AAAA,UACE;AAAA,YACE,QAAQ;AAAA,YACR;AAAA,UAAA;AAAA,QAEJ;AAAA,QACA;AAAA,MACF;AAAA,eACS,WAAW;AACpB,YAAM,MAAM;AAAA,QAIV;AAAA,QACA;AAAA,UACE;AAAA,YACE,QAAQ;AAAA,YACR;AAAA,UAAA;AAAA,QAEJ;AAAA,QACA;AAAA,MACF;AAAA,IAAA,OACK;AACE,aAAA;AAAA,QACL,MAAM;AAAA;AAAA,QACN,OAAO;AAAA,QACP,SAAS,mBAAmB;AAAA,MAC9B;AAAA,IAAA;AAEF,QAAI,IAAI,OAAO;AACN,aAAA;AAAA,QACL,MAAM;AAAA;AAAA,QACN,OAAO,IAAI,MAAM;AAAA,QACjB,SAAS,oBAAmB,SAAI,UAAJ,mBAAW,IAAI;AAAA,MAC7C;AAAA,IAAA;AAEF,WAAO,IAAI;AAAA,EAAA,QACL;AACC,WAAA;AAAA,MACL,MAAM;AAAA;AAAA,MACN,OAAO;AAAA,MACP,SAAS,mBAAmB;AAAA,IAC9B;AAAA,EAAA;AAEJ;"}