{"version":3,"file":"getSwapQuote.js","sources":["../../src/api/getSwapQuote.ts"],"sourcesContent":["import { RequestContext } from '@/core/network/constants';\nimport { SwapMessage } from '@/swap/constants';\nimport { UNSUPPORTED_AMOUNT_REFERENCE_ERROR_CODE } from '@/swap/constants';\nimport { CDP_GET_SWAP_QUOTE } from '../core/network/definitions/swap';\nimport { sendRequest } from '../core/network/request';\nimport type { SwapQuote } from '../swap/types';\nimport { getSwapErrorCode } from '../swap/utils/getSwapErrorCode';\nimport type {\n  GetSwapQuoteParams,\n  GetSwapQuoteResponse,\n  SwapAPIParams,\n} from './types';\nimport { getAPIParamsForToken } from './utils/getAPIParamsForToken';\n\n/**\n * Retrieves a quote for a swap from Token A to Token B.\n */\nexport async function getSwapQuote(\n  params: GetSwapQuoteParams,\n  _context: RequestContext = RequestContext.API,\n): Promise<GetSwapQuoteResponse> {\n  // Default parameters\n  const defaultParams = {\n    amountReference: 'from' as const,\n    isAmountInDecimals: false,\n  };\n  let apiParams = getAPIParamsForToken({\n    ...defaultParams,\n    ...params,\n  });\n  if ('error' in apiParams) {\n    return apiParams;\n  }\n\n  if (params.useAggregator && params.amountReference === 'to') {\n    console.error(SwapMessage.UNSUPPORTED_AMOUNT_REFERENCE);\n    return {\n      code: UNSUPPORTED_AMOUNT_REFERENCE_ERROR_CODE,\n      error: SwapMessage.UNSUPPORTED_AMOUNT_REFERENCE,\n      message: '',\n    };\n  }\n\n  if (!params.useAggregator) {\n    apiParams = {\n      v2Enabled: true,\n      ...apiParams,\n    };\n  }\n  if (params.maxSlippage) {\n    let slippagePercentage = params.maxSlippage;\n    // Adjust slippage for V1 API (aggregator)\n    // V1 expects slippage in tenths of a percent (e.g., 30 = 3%)\n    if (params.useAggregator) {\n      slippagePercentage = (Number(params.maxSlippage) * 10).toString();\n    }\n    apiParams = {\n      slippagePercentage: slippagePercentage,\n      ...apiParams,\n    };\n  }\n\n  try {\n    const res = await sendRequest<SwapAPIParams, SwapQuote>(\n      CDP_GET_SWAP_QUOTE,\n      [apiParams],\n      _context,\n    );\n    if (res.error) {\n      return {\n        code: getSwapErrorCode('quote', res.error?.code),\n        error: res.error.message,\n        message: '',\n      };\n    }\n    return res.result;\n  } catch {\n    return {\n      code: getSwapErrorCode('uncaught-quote'),\n      error: 'Something went wrong',\n      message: '',\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAiBA,eAAsB,aACpB,QACA,WAA2B,eAAe,KACX;;AAE/B,QAAM,gBAAgB;AAAA,IACpB,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,EACtB;AACA,MAAI,YAAY,qBAAqB;AAAA,IACnC,GAAG;AAAA,IACH,GAAG;AAAA,EAAA,CACJ;AACD,MAAI,WAAW,WAAW;AACjB,WAAA;AAAA,EAAA;AAGT,MAAI,OAAO,iBAAiB,OAAO,oBAAoB,MAAM;AACnD,YAAA,MAAM,YAAY,4BAA4B;AAC/C,WAAA;AAAA,MACL,MAAM;AAAA,MACN,OAAO,YAAY;AAAA,MACnB,SAAS;AAAA,IACX;AAAA,EAAA;AAGE,MAAA,CAAC,OAAO,eAAe;AACb,gBAAA;AAAA,MACV,WAAW;AAAA,MACX,GAAG;AAAA,IACL;AAAA,EAAA;AAEF,MAAI,OAAO,aAAa;AACtB,QAAI,qBAAqB,OAAO;AAGhC,QAAI,OAAO,eAAe;AACxB,4BAAsB,OAAO,OAAO,WAAW,IAAI,IAAI,SAAS;AAAA,IAAA;AAEtD,gBAAA;AAAA,MACV;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EAAA;AAGE,MAAA;AACF,UAAM,MAAM,MAAM;AAAA,MAChB;AAAA,MACA,CAAC,SAAS;AAAA,MACV;AAAA,IACF;AACA,QAAI,IAAI,OAAO;AACN,aAAA;AAAA,QACL,MAAM,iBAAiB,UAAS,SAAI,UAAJ,mBAAW,IAAI;AAAA,QAC/C,OAAO,IAAI,MAAM;AAAA,QACjB,SAAS;AAAA,MACX;AAAA,IAAA;AAEF,WAAO,IAAI;AAAA,EAAA,QACL;AACC,WAAA;AAAA,MACL,MAAM,iBAAiB,gBAAgB;AAAA,MACvC,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,EAAA;AAEJ;"}