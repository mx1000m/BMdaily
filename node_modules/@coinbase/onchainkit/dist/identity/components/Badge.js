'use client';
import { jsxs, jsx } from "react/jsx-runtime";
import { useAttestations } from "../hooks/useAttestations.js";
import { badgeSvg } from "../../internal/svg/badgeSvg.js";
import { zIndex } from "../../styles/constants.js";
import { cn, border, background, color, text, pressable } from "../../styles/theme.js";
import { useState, useMemo } from "react";
import { useOnchainKit } from "../../useOnchainKit.js";
import { useIdentityContext } from "./IdentityProvider.js";
function Badge({ className, tooltip = false }) {
  const [showTooltip, setShowTooltip] = useState(false);
  const { address, schemaId: contextSchemaId } = useIdentityContext();
  const { chain, schemaId: kitSchemaId } = useOnchainKit();
  const attestations = useAttestations({
    address,
    chain,
    schemaId: tooltip ? contextSchemaId ?? kitSchemaId : null
  });
  const displayText = useMemo(() => {
    if (!tooltip) {
      return null;
    }
    return typeof tooltip === "string" ? tooltip : extractAttestationName(attestations[0]);
  }, [tooltip, attestations]);
  const badgeSize = "12px";
  return /* @__PURE__ */ jsxs("div", { className: "relative inline-flex", "data-testid": "ockBadgeContainer", children: [
    /* @__PURE__ */ jsx(
      "span",
      {
        className: cn(
          background.primary,
          border.default,
          border.radius,
          tooltip && "cursor-pointer",
          className
        ),
        style: {
          height: badgeSize,
          width: badgeSize,
          maxHeight: badgeSize,
          maxWidth: badgeSize
        },
        "data-testid": "ockBadge",
        ...tooltip && {
          onMouseEnter: () => setShowTooltip(true),
          onMouseLeave: () => setShowTooltip(false)
        },
        children: badgeSvg
      }
    ),
    showTooltip && tooltip && /* @__PURE__ */ jsxs(
      "div",
      {
        className: cn(
          border.radius,
          border.default,
          pressable.alternate,
          text.legal,
          color.foreground,
          zIndex.tooltip,
          "-translate-x-1/2 absolute bottom-full left-1/2 mb-1 transform",
          "whitespace-nowrap px-1.5 py-0.5"
        ),
        "data-testid": "ockBadgeTooltip",
        children: [
          displayText,
          /* @__PURE__ */ jsx(
            "div",
            {
              className: cn(
                "-translate-x-1/2 absolute top-full left-1/2 transform"
              )
            }
          )
        ]
      }
    )
  ] });
}
function extractAttestationName(attestation) {
  var _a;
  if (!(attestation == null ? void 0 : attestation.decodedDataJson)) {
    return "Verified";
  }
  try {
    const decodedData = JSON.parse(attestation.decodedDataJson);
    if (Array.isArray(decodedData) && ((_a = decodedData[0]) == null ? void 0 : _a.name)) {
      return decodedData[0].name;
    }
    const value = Object.values(decodedData)[0];
    if (typeof value === "string") {
      return value;
    }
    if (value && typeof value === "object" && "value" in value && typeof value.value === "string") {
      return value.value;
    }
  } catch {
  }
  return "Verified";
}
export {
  Badge
};
//# sourceMappingURL=Badge.js.map
