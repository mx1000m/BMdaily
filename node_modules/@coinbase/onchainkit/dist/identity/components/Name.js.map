{"version":3,"file":"Name.js","sources":["../../../src/identity/components/Name.tsx"],"sourcesContent":["'use client';\nimport { useIdentityContext } from '@/identity/components/IdentityProvider';\nimport { useName } from '@/identity/hooks/useName';\nimport type { NameReact } from '@/identity/types';\nimport { getSlicedAddress } from '@/identity/utils/getSlicedAddress';\nimport { findComponent } from '@/internal/utils/findComponent';\nimport { Children, useMemo } from 'react';\nimport { cn, color, text } from '../../styles/theme';\nimport { Badge } from './Badge';\nimport { DisplayBadge } from './DisplayBadge';\n\n/**\n * Name is a React component that renders the user name from an Ethereum address.\n */\nexport function Name({\n  address = null,\n  className,\n  children,\n  chain,\n  ...props\n}: NameReact) {\n  const { address: contextAddress, chain: contextChain } = useIdentityContext();\n  if (!contextAddress && !address) {\n    console.error(\n      'Name: an Ethereum address must be provided to the Identity or Name component.',\n    );\n    return null;\n  }\n\n  const accountAddress = address ?? contextAddress;\n  const accountChain = chain ?? contextChain;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { data: name, isLoading } = useName({\n    address: accountAddress,\n    chain: accountChain,\n  });\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const badge = useMemo(() => {\n    return Children.toArray(children).find(findComponent(Badge));\n  }, [children]);\n\n  if (isLoading) {\n    return <span className={className} />;\n  }\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      <span\n        data-testid=\"ockIdentity_Text\"\n        className={cn(text.headline, color.foreground, className)}\n        {...props}\n      >\n        {name || getSlicedAddress(accountAddress)}\n      </span>\n      {badge && <DisplayBadge address={accountAddress}>{badge}</DisplayBadge>}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAcO,SAAS,KAAK;AAAA,EACnB,UAAU;AAAA,EACV;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAc;AACZ,QAAM,EAAE,SAAS,gBAAgB,OAAO,aAAA,IAAiB,mBAAmB;AACxE,MAAA,CAAC,kBAAkB,CAAC,SAAS;AACvB,YAAA;AAAA,MACN;AAAA,IACF;AACO,WAAA;AAAA,EAAA;AAGT,QAAM,iBAAiB,WAAW;AAClC,QAAM,eAAe,SAAS;AAG9B,QAAM,EAAE,MAAM,MAAM,UAAA,IAAc,QAAQ;AAAA,IACxC,SAAS;AAAA,IACT,OAAO;AAAA,EAAA,CACR;AAGK,QAAA,QAAQ,QAAQ,MAAM;AAC1B,WAAO,SAAS,QAAQ,QAAQ,EAAE,KAAK,cAAc,KAAK,CAAC;AAAA,EAAA,GAC1D,CAAC,QAAQ,CAAC;AAEb,MAAI,WAAW;AACN,WAAA,oBAAC,UAAK,WAAsB;AAAA,EAAA;AAInC,SAAA,qBAAC,OAAI,EAAA,WAAU,2BACb,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,eAAY;AAAA,QACZ,WAAW,GAAG,KAAK,UAAU,MAAM,YAAY,SAAS;AAAA,QACvD,GAAG;AAAA,QAEH,UAAA,QAAQ,iBAAiB,cAAc;AAAA,MAAA;AAAA,IAC1C;AAAA,IACC,SAAS,oBAAC,cAAa,EAAA,SAAS,gBAAiB,UAAM,MAAA,CAAA;AAAA,EAAA,GAC1D;AAEJ;"}