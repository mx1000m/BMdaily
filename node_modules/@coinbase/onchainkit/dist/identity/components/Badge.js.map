{"version":3,"file":"Badge.js","sources":["../../../src/identity/components/Badge.tsx"],"sourcesContent":["'use client';\nimport { useAttestations } from '@/identity/hooks/useAttestations';\nimport type { BadgeReact } from '@/identity/types';\nimport { badgeSvg } from '@/internal/svg/badgeSvg';\nimport { zIndex } from '@/styles/constants';\nimport { background, border, cn, color, pressable, text } from '@/styles/theme';\nimport { useMemo, useState } from 'react';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { useIdentityContext } from './IdentityProvider';\n\ntype ExtractAttestationNameParams = {\n  decodedDataJson?: string;\n  id?: string;\n  attester?: string;\n  expirationTime?: number;\n  recipient?: string;\n  revocationTime?: number;\n  revoked?: boolean;\n  schemaId?: string;\n  time?: number;\n};\n\n/**\n * Badge component.\n */\nexport function Badge({ className, tooltip = false }: BadgeReact) {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const { address, schemaId: contextSchemaId } = useIdentityContext();\n  const { chain, schemaId: kitSchemaId } = useOnchainKit();\n\n  const attestations = useAttestations({\n    address,\n    chain,\n    schemaId: tooltip ? (contextSchemaId ?? kitSchemaId) : null,\n  });\n\n  // Get tooltip text from tooltip prop or attestation\n  const displayText = useMemo(() => {\n    if (!tooltip) {\n      return null;\n    }\n\n    return typeof tooltip === 'string'\n      ? tooltip\n      : extractAttestationName(attestations[0]);\n  }, [tooltip, attestations]);\n\n  const badgeSize = '12px';\n\n  return (\n    <div className=\"relative inline-flex\" data-testid=\"ockBadgeContainer\">\n      <span\n        className={cn(\n          background.primary,\n          border.default,\n          border.radius,\n          tooltip && 'cursor-pointer',\n          className,\n        )}\n        style={{\n          height: badgeSize,\n          width: badgeSize,\n          maxHeight: badgeSize,\n          maxWidth: badgeSize,\n        }}\n        data-testid=\"ockBadge\"\n        {...(tooltip && {\n          onMouseEnter: () => setShowTooltip(true),\n          onMouseLeave: () => setShowTooltip(false),\n        })}\n      >\n        {badgeSvg}\n      </span>\n      {showTooltip && tooltip && (\n        <div\n          className={cn(\n            border.radius,\n            border.default,\n            pressable.alternate,\n            text.legal,\n            color.foreground,\n            zIndex.tooltip,\n            '-translate-x-1/2 absolute bottom-full left-1/2 mb-1 transform',\n            'whitespace-nowrap px-1.5 py-0.5',\n          )}\n          data-testid=\"ockBadgeTooltip\"\n        >\n          {displayText}\n          <div\n            className={cn(\n              '-translate-x-1/2 absolute top-full left-1/2 transform',\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Extracts the attestation name from an attestation object\n */\nfunction extractAttestationName(\n  attestation?: ExtractAttestationNameParams,\n): string {\n  if (!attestation?.decodedDataJson) {\n    return 'Verified';\n  }\n\n  try {\n    const decodedData = JSON.parse(attestation.decodedDataJson);\n\n    if (Array.isArray(decodedData) && decodedData[0]?.name) {\n      return decodedData[0].name;\n    }\n\n    const value = Object.values(decodedData)[0];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (\n      value &&\n      typeof value === 'object' &&\n      'value' in value &&\n      typeof value.value === 'string'\n    ) {\n      return value.value;\n    }\n  } catch {\n    // If parsing fails, return default\n  }\n\n  return 'Verified';\n}\n"],"names":[],"mappings":";;;;;;;;AAyBO,SAAS,MAAM,EAAE,WAAW,UAAU,SAAqB;AAChE,QAAM,CAAC,aAAa,cAAc,IAAI,SAAS,KAAK;AACpD,QAAM,EAAE,SAAS,UAAU,gBAAA,IAAoB,mBAAmB;AAClE,QAAM,EAAE,OAAO,UAAU,YAAA,IAAgB,cAAc;AAEvD,QAAM,eAAe,gBAAgB;AAAA,IACnC;AAAA,IACA;AAAA,IACA,UAAU,UAAW,mBAAmB,cAAe;AAAA,EAAA,CACxD;AAGK,QAAA,cAAc,QAAQ,MAAM;AAChC,QAAI,CAAC,SAAS;AACL,aAAA;AAAA,IAAA;AAGT,WAAO,OAAO,YAAY,WACtB,UACA,uBAAuB,aAAa,CAAC,CAAC;AAAA,EAAA,GACzC,CAAC,SAAS,YAAY,CAAC;AAE1B,QAAM,YAAY;AAElB,SACG,qBAAA,OAAA,EAAI,WAAU,wBAAuB,eAAY,qBAChD,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,UACT,WAAW;AAAA,UACX,OAAO;AAAA,UACP,OAAO;AAAA,UACP,WAAW;AAAA,UACX;AAAA,QACF;AAAA,QACA,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,WAAW;AAAA,UACX,UAAU;AAAA,QACZ;AAAA,QACA,eAAY;AAAA,QACX,GAAI,WAAW;AAAA,UACd,cAAc,MAAM,eAAe,IAAI;AAAA,UACvC,cAAc,MAAM,eAAe,KAAK;AAAA,QAC1C;AAAA,QAEC,UAAA;AAAA,MAAA;AAAA,IACH;AAAA,IACC,eAAe,WACd;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,UACT,OAAO;AAAA,UACP,OAAO;AAAA,UACP,UAAU;AAAA,UACV,KAAK;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACF;AAAA,QACA,eAAY;AAAA,QAEX,UAAA;AAAA,UAAA;AAAA,UACD;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW;AAAA,gBACT;AAAA,cAAA;AAAA,YACF;AAAA,UAAA;AAAA,QACF;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,GAEJ;AAEJ;AAKA,SAAS,uBACP,aACQ;;AACJ,MAAA,EAAC,2CAAa,kBAAiB;AAC1B,WAAA;AAAA,EAAA;AAGL,MAAA;AACF,UAAM,cAAc,KAAK,MAAM,YAAY,eAAe;AAE1D,QAAI,MAAM,QAAQ,WAAW,OAAK,iBAAY,CAAC,MAAb,mBAAgB,OAAM;AAC/C,aAAA,YAAY,CAAC,EAAE;AAAA,IAAA;AAGxB,UAAM,QAAQ,OAAO,OAAO,WAAW,EAAE,CAAC;AAEtC,QAAA,OAAO,UAAU,UAAU;AACtB,aAAA;AAAA,IAAA;AAIP,QAAA,SACA,OAAO,UAAU,YACjB,WAAW,SACX,OAAO,MAAM,UAAU,UACvB;AACA,aAAO,MAAM;AAAA,IAAA;AAAA,EACf,QACM;AAAA,EAAA;AAID,SAAA;AACT;"}