'use client';
import { jsx, jsxs } from "react/jsx-runtime";
import { useIdentityContext } from "./IdentityProvider.js";
import { useName } from "../hooks/useName.js";
import { getSlicedAddress } from "../utils/getSlicedAddress.js";
import { findComponent } from "../../internal/utils/findComponent.js";
import { useMemo, Children } from "react";
import { cn, color, text } from "../../styles/theme.js";
import { Badge } from "./Badge.js";
import { DisplayBadge } from "./DisplayBadge.js";
function Name({
  address = null,
  className,
  children,
  chain,
  ...props
}) {
  const { address: contextAddress, chain: contextChain } = useIdentityContext();
  if (!contextAddress && !address) {
    console.error(
      "Name: an Ethereum address must be provided to the Identity or Name component."
    );
    return null;
  }
  const accountAddress = address ?? contextAddress;
  const accountChain = chain ?? contextChain;
  const { data: name, isLoading } = useName({
    address: accountAddress,
    chain: accountChain
  });
  const badge = useMemo(() => {
    return Children.toArray(children).find(findComponent(Badge));
  }, [children]);
  if (isLoading) {
    return /* @__PURE__ */ jsx("span", { className });
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
    /* @__PURE__ */ jsx(
      "span",
      {
        "data-testid": "ockIdentity_Text",
        className: cn(text.headline, color.foreground, className),
        ...props,
        children: name || getSlicedAddress(accountAddress)
      }
    ),
    badge && /* @__PURE__ */ jsx(DisplayBadge, { address: accountAddress, children: badge })
  ] });
}
export {
  Name
};
//# sourceMappingURL=Name.js.map
