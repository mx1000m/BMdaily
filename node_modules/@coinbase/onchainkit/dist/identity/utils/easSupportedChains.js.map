{"version":3,"file":"easSupportedChains.js","sources":["../../../src/identity/utils/easSupportedChains.ts"],"sourcesContent":["import { easChainBase } from '@/core/network/definitions/base';\nimport { easChainBaseSepolia } from '@/core/network/definitions/baseSepolia';\nimport { easChainOptimism } from '@/core/network/definitions/optimism';\nimport type { EASChainDefinition } from '@/identity/types';\nimport type { Chain } from 'viem';\n\nexport type EASSupportedChains = Record<number, EASChainDefinition>;\n\nexport const easSupportedChains: EASSupportedChains = {\n  [easChainBase.id]: easChainBase,\n  [easChainBaseSepolia.id]: easChainBaseSepolia,\n  [easChainOptimism.id]: easChainOptimism,\n};\n\n/**\n * Checks if a given blockchain chain is supported by EAS attestations.\n */\nexport function isChainSupported(chain: Chain): boolean {\n  return chain.id in easSupportedChains;\n}\n\n/**\n * Function to get the EAS GraphQL API endpoint for a given blockchain.\n */\nexport function getChainEASGraphQLAPI(chain: Chain): string {\n  return easSupportedChains[chain.id]?.easGraphqlAPI ?? '';\n}\n"],"names":[],"mappings":";;;AAQO,MAAM,qBAAyC;AAAA,EACpD,CAAC,aAAa,EAAE,GAAG;AAAA,EACnB,CAAC,oBAAoB,EAAE,GAAG;AAAA,EAC1B,CAAC,iBAAiB,EAAE,GAAG;AACzB;AAKO,SAAS,iBAAiB,OAAuB;AACtD,SAAO,MAAM,MAAM;AACrB;AAKO,SAAS,sBAAsB,OAAsB;;AAC1D,WAAO,wBAAmB,MAAM,EAAE,MAA3B,mBAA8B,kBAAiB;AACxD;"}