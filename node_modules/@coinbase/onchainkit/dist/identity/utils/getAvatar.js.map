{"version":3,"file":"getAvatar.js","sources":["../../../src/identity/utils/getAvatar.ts"],"sourcesContent":["import { getChainPublicClient } from '@/core/network/getChainPublicClient';\nimport { isBase } from '@/core/utils/isBase';\nimport { isEthereum } from '@/core/utils/isEthereum';\nimport type {\n  Basename,\n  GetAvatar,\n  GetAvatarReturnType,\n} from '@/identity/types';\nimport { mainnet } from 'viem/chains';\nimport { normalize } from 'viem/ens';\nimport { RESOLVER_ADDRESSES_BY_CHAIN_ID } from '../constants';\nimport { getBaseDefaultProfilePicture } from './getBaseDefaultProfilePicture';\nimport { isBasename } from './isBasename';\n\n/**\n * An asynchronous function to fetch the Ethereum Name Service (ENS)\n * avatar for a given Ethereum name. It returns the ENS name if it exists,\n * or null if it doesn't or in case of an error.\n */\nexport const getAvatar = async ({\n  ensName,\n  chain = mainnet,\n}: GetAvatar): Promise<GetAvatarReturnType> => {\n  const chainIsBase = isBase({ chainId: chain.id });\n  const chainIsEthereum = isEthereum({ chainId: chain.id });\n  const chainSupportsUniversalResolver = chainIsEthereum || chainIsBase;\n  const usernameIsBasename = isBasename(ensName);\n\n  if (!chainSupportsUniversalResolver) {\n    return Promise.reject(\n      'ChainId not supported, avatar resolution is only supported on Ethereum and Base.',\n    );\n  }\n\n  let client = getChainPublicClient(chain);\n  let baseEnsAvatar = null;\n\n  // 1. Try basename\n  if (chainIsBase) {\n    try {\n      baseEnsAvatar = await client.getEnsAvatar({\n        name: normalize(ensName),\n        universalResolverAddress: RESOLVER_ADDRESSES_BY_CHAIN_ID[chain.id],\n      });\n\n      if (baseEnsAvatar) {\n        return baseEnsAvatar;\n      }\n    } catch {\n      // This is a best effort attempt, so we don't need to do anything here.\n    }\n  }\n\n  // 2. Defaults to mainnet\n  client = getChainPublicClient(mainnet);\n  const mainnetEnsAvatar = await client.getEnsAvatar({\n    name: normalize(ensName),\n  });\n\n  if (mainnetEnsAvatar) {\n    return mainnetEnsAvatar;\n  }\n\n  // 3. If username is a Basename (.base.eth / .basetest.eth), use default Basename avatars\n  if (usernameIsBasename) {\n    return getBaseDefaultProfilePicture(ensName as Basename);\n  }\n\n  // 4. No avatars to display\n  return null;\n};\n"],"names":[],"mappings":";;;;;;;;AAmBO,MAAM,YAAY,OAAO;AAAA,EAC9B;AAAA,EACA,QAAQ;AACV,MAA+C;AAC7C,QAAM,cAAc,OAAO,EAAE,SAAS,MAAM,IAAI;AAChD,QAAM,kBAAkB,WAAW,EAAE,SAAS,MAAM,IAAI;AACxD,QAAM,iCAAiC,mBAAmB;AACpD,QAAA,qBAAqB,WAAW,OAAO;AAE7C,MAAI,CAAC,gCAAgC;AACnC,WAAO,QAAQ;AAAA,MACb;AAAA,IACF;AAAA,EAAA;AAGE,MAAA,SAAS,qBAAqB,KAAK;AACvC,MAAI,gBAAgB;AAGpB,MAAI,aAAa;AACX,QAAA;AACc,sBAAA,MAAM,OAAO,aAAa;AAAA,QACxC,MAAM,UAAU,OAAO;AAAA,QACvB,0BAA0B,+BAA+B,MAAM,EAAE;AAAA,MAAA,CAClE;AAED,UAAI,eAAe;AACV,eAAA;AAAA,MAAA;AAAA,IACT,QACM;AAAA,IAAA;AAAA,EAER;AAIF,WAAS,qBAAqB,OAAO;AAC/B,QAAA,mBAAmB,MAAM,OAAO,aAAa;AAAA,IACjD,MAAM,UAAU,OAAO;AAAA,EAAA,CACxB;AAED,MAAI,kBAAkB;AACb,WAAA;AAAA,EAAA;AAIT,MAAI,oBAAoB;AACtB,WAAO,6BAA6B,OAAmB;AAAA,EAAA;AAIlD,SAAA;AACT;"}