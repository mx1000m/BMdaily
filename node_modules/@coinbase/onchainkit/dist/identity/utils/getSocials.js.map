{"version":3,"file":"getSocials.js","sources":["../../../src/identity/utils/getSocials.ts"],"sourcesContent":["import { getChainPublicClient } from '@/core/network/getChainPublicClient';\nimport type { GetSocialsReturnType } from '@/identity/types';\nimport type { Chain } from 'viem';\nimport { mainnet } from 'viem/chains';\nimport { normalize } from 'viem/ens';\n\nexport type GetSocials = {\n  ensName: string;\n  chain?: Chain;\n};\n\nexport const getSocials = async ({\n  ensName,\n}: GetSocials): Promise<GetSocialsReturnType> => {\n  const client = getChainPublicClient(mainnet);\n  const normalizedName = normalize(ensName);\n\n  const fetchTextRecord = async (key: string) => {\n    try {\n      const result = await client.getEnsText({\n        name: normalizedName,\n        key,\n      });\n      return result || null;\n    } catch (error) {\n      console.warn(`Failed to fetch ENS text record for ${key}:`, error);\n      return null;\n    }\n  };\n\n  const [twitter, github, farcaster, website] = await Promise.all([\n    fetchTextRecord('com.twitter'),\n    fetchTextRecord('com.github'),\n    fetchTextRecord('xyz.farcaster'),\n    fetchTextRecord('url'),\n  ]);\n\n  return { twitter, github, farcaster, website };\n};\n"],"names":[],"mappings":";;;AAWO,MAAM,aAAa,OAAO;AAAA,EAC/B;AACF,MAAiD;AACzC,QAAA,SAAS,qBAAqB,OAAO;AACrC,QAAA,iBAAiB,UAAU,OAAO;AAElC,QAAA,kBAAkB,OAAO,QAAgB;AACzC,QAAA;AACI,YAAA,SAAS,MAAM,OAAO,WAAW;AAAA,QACrC,MAAM;AAAA,QACN;AAAA,MAAA,CACD;AACD,aAAO,UAAU;AAAA,aACV,OAAO;AACd,cAAQ,KAAK,uCAAuC,GAAG,KAAK,KAAK;AAC1D,aAAA;AAAA,IAAA;AAAA,EAEX;AAEM,QAAA,CAAC,SAAS,QAAQ,WAAW,OAAO,IAAI,MAAM,QAAQ,IAAI;AAAA,IAC9D,gBAAgB,aAAa;AAAA,IAC7B,gBAAgB,YAAY;AAAA,IAC5B,gBAAgB,eAAe;AAAA,IAC/B,gBAAgB,KAAK;AAAA,EAAA,CACtB;AAED,SAAO,EAAE,SAAS,QAAQ,WAAW,QAAQ;AAC/C;"}