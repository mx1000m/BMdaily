{"version":3,"file":"getAttestations.js","sources":["../../../src/identity/utils/getAttestations.ts"],"sourcesContent":["import { getAttestationsByFilter } from '@/core/network/attestations';\nimport type { Attestation, GetAttestationsOptions } from '@/identity/types';\nimport type { Address, Chain } from 'viem';\nimport { isChainSupported } from './easSupportedChains';\n\n/**\n * Fetches Ethereum Attestation Service (EAS) attestations for a given address and chain,\n * optionally filtered by schemas associated with the attestation.\n */\nexport async function getAttestations(\n  address: Address,\n  chain: Chain,\n  options?: GetAttestationsOptions,\n): Promise<Attestation[]> {\n  if (!address) {\n    console.log('Error in getAttestation: Address is not provided');\n    return [];\n  }\n\n  if (!isChainSupported(chain)) {\n    console.log('Error in getAttestation: Chain is not supported');\n    return [];\n  }\n  try {\n    // Default query filter values\n    const defaultQueryVariablesFilter = {\n      revoked: false,\n      expirationTime: Math.round(Date.now() / 1000),\n      limit: 10,\n    };\n    const queryVariablesFilter = { ...defaultQueryVariablesFilter, ...options };\n    return await getAttestationsByFilter(address, chain, queryVariablesFilter);\n  } catch (error) {\n    console.log(`Error in getAttestation: ${(error as Error).message}`);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;AASsB,eAAA,gBACpB,SACA,OACA,SACwB;AACxB,MAAI,CAAC,SAAS;AACZ,YAAQ,IAAI,kDAAkD;AAC9D,WAAO,CAAC;AAAA,EAAA;AAGN,MAAA,CAAC,iBAAiB,KAAK,GAAG;AAC5B,YAAQ,IAAI,iDAAiD;AAC7D,WAAO,CAAC;AAAA,EAAA;AAEN,MAAA;AAEF,UAAM,8BAA8B;AAAA,MAClC,SAAS;AAAA,MACT,gBAAgB,KAAK,MAAM,KAAK,IAAA,IAAQ,GAAI;AAAA,MAC5C,OAAO;AAAA,IACT;AACA,UAAM,uBAAuB,EAAE,GAAG,6BAA6B,GAAG,QAAQ;AAC1E,WAAO,MAAM,wBAAwB,SAAS,OAAO,oBAAoB;AAAA,WAClE,OAAO;AACd,YAAQ,IAAI,4BAA6B,MAAgB,OAAO,EAAE;AAClE,WAAO,CAAC;AAAA,EAAA;AAEZ;"}