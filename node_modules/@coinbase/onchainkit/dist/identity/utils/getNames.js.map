{"version":3,"file":"getNames.js","sources":["../../../src/identity/utils/getNames.ts"],"sourcesContent":["import type { Basename, GetNameReturnType, GetNames } from '@/identity/types';\nimport { mainnet } from 'viem/chains';\nimport { getChainPublicClient } from '../../core/network/getChainPublicClient';\nimport { isBase } from '../../core/utils/isBase';\nimport { isEthereum } from '../../core/utils/isEthereum';\nimport L2ResolverAbi from '../abis/L2ResolverAbi';\nimport { RESOLVER_ADDRESSES_BY_CHAIN_ID } from '../constants';\nimport { convertReverseNodeToBytes } from './convertReverseNodeToBytes';\nimport { getAddresses } from './getAddresses';\n\n/**\n * An asynchronous function to fetch multiple Basenames or Ethereum Name Service (ENS)\n * names for a given array of Ethereum addresses in a single batch request.\n * It returns an array of ENS names in the same order as the input addresses.\n */\n// eslint-disable-next-line complexity\nexport const getNames = async ({\n  addresses,\n  chain = mainnet,\n}: GetNames): Promise<GetNameReturnType[]> => {\n  if (!addresses || addresses.length === 0) {\n    return [];\n  }\n\n  const chainIsBase = isBase({ chainId: chain.id });\n  const chainIsEthereum = isEthereum({ chainId: chain.id });\n  const chainSupportsUniversalResolver = chainIsEthereum || chainIsBase;\n\n  if (!chainSupportsUniversalResolver) {\n    return Promise.reject(\n      'ChainId not supported, name resolution is only supported on Ethereum and Base.',\n    );\n  }\n\n  const client = getChainPublicClient(chain);\n  const results: GetNameReturnType[] = Array(addresses.length).fill(null);\n\n  if (chainIsBase) {\n    try {\n      // Create batch of calls for the multicall contract\n      const calls = addresses.map((address) => ({\n        address: RESOLVER_ADDRESSES_BY_CHAIN_ID[chain.id],\n        abi: L2ResolverAbi,\n        functionName: 'name',\n        args: [convertReverseNodeToBytes(address, chain.id)],\n      }));\n\n      const batchResults = await client.multicall({\n        contracts: calls,\n        allowFailure: true,\n      });\n\n      // Collect all successfully resolved basenames for batch verification\n      const basenamesWithIndices: Array<{ basename: Basename; index: number }> =\n        [];\n\n      for (let index = 0; index < batchResults.length; index++) {\n        const result = batchResults[index];\n        if (result.status === 'success' && result.result) {\n          const basename = result.result as Basename;\n          basenamesWithIndices.push({ basename, index });\n        }\n      }\n\n      if (basenamesWithIndices.length > 0) {\n        try {\n          // Verify basenames with forward resolution using batch processing\n          const basenames = basenamesWithIndices.map(\n            ({ basename }) => basename,\n          );\n          const resolvedAddresses = await getAddresses({\n            names: basenames,\n          });\n\n          // Update results with validated basenames\n          for (let i = 0; i < basenamesWithIndices.length; i++) {\n            const { basename, index } = basenamesWithIndices[i];\n            const resolvedAddress = resolvedAddresses[i];\n\n            if (\n              resolvedAddress &&\n              resolvedAddress.toLowerCase() === addresses[index].toLowerCase()\n            ) {\n              results[index] = basename;\n            }\n          }\n        } catch (error) {\n          console.error(\n            'Error during batch basename forward resolution verification:',\n            error,\n          );\n        }\n      }\n\n      // If we have all results, return them\n      if (results.every((result) => result !== null)) {\n        return results;\n      }\n    } catch (error) {\n      console.error('Error resolving Base names in batch:', error);\n    }\n  }\n\n  // Default fallback to mainnet\n  // ENS resolution is not well-supported on Base, so want to ensure that we fall back to mainnet\n  const fallbackClient = getChainPublicClient(mainnet);\n\n  // For addresses that don't have a result yet, try ENS resolution on mainnet\n  const unresolvedIndices = results\n    .map((result, index) => (result === null ? index : -1))\n    .filter((index) => index !== -1);\n\n  if (unresolvedIndices.length > 0) {\n    try {\n      const ensPromises = unresolvedIndices.map((index) =>\n        fallbackClient\n          .getEnsName({\n            address: addresses[index],\n          })\n          .catch((error) => {\n            console.error(\n              `Error resolving ENS name for ${addresses[index]}:`,\n              error,\n            );\n            return null; // Return null for failed resolutions\n          }),\n      );\n\n      const ensResults = await Promise.all(ensPromises);\n\n      // Collect all successfully resolved ENS names for batch verification\n      const ensNamesWithIndices: Array<{\n        ensName: string;\n        originalIndex: number;\n      }> = [];\n\n      for (let i = 0; i < ensResults.length; i++) {\n        const ensName = ensResults[i];\n        const originalIndex = unresolvedIndices[i];\n\n        if (ensName) {\n          ensNamesWithIndices.push({ ensName, originalIndex });\n        }\n      }\n\n      if (ensNamesWithIndices.length > 0) {\n        try {\n          // Verify ENS names with forward resolution using batch processing\n          const ensNames = ensNamesWithIndices.map(({ ensName }) => ensName);\n          const resolvedAddresses = await getAddresses({\n            names: ensNames,\n          });\n\n          // Update results with validated ENS names\n          for (let i = 0; i < ensNamesWithIndices.length; i++) {\n            const { ensName, originalIndex } = ensNamesWithIndices[i];\n            const resolvedAddress = resolvedAddresses[i];\n\n            if (\n              resolvedAddress &&\n              resolvedAddress.toLowerCase() ===\n                addresses[originalIndex].toLowerCase()\n            ) {\n              results[originalIndex] = ensName;\n            }\n          }\n        } catch (error) {\n          console.error(\n            'Error during batch ENS forward resolution verification:',\n            error,\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error resolving ENS names in batch:', error);\n    }\n  }\n\n  return results;\n};\n"],"names":[],"mappings":"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"}