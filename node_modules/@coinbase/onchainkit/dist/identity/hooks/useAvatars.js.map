{"version":3,"file":"useAvatars.js","sources":["../../../src/identity/hooks/useAvatars.ts"],"sourcesContent":["import { getAvatars } from '@/identity/utils/getAvatars';\nimport { DEFAULT_QUERY_OPTIONS } from '@/internal/constants';\nimport { useQuery } from '@tanstack/react-query';\nimport { mainnet } from 'viem/chains';\nimport type {\n  GetAvatarReturnType,\n  UseAvatarsOptions,\n  UseQueryOptions,\n} from '../types';\n\n/**\n * A React hook that leverages the `@tanstack/react-query` for fetching and optionally caching\n * multiple Basenames or ENS avatars in a single batch request.\n */\nexport const useAvatars = (\n  { ensNames, chain = mainnet }: UseAvatarsOptions,\n  queryOptions?: UseQueryOptions<GetAvatarReturnType[]>,\n) => {\n  const namesKey = ensNames.join(',');\n  const queryKey = ['useAvatars', namesKey, chain.id];\n\n  return useQuery<GetAvatarReturnType[]>({\n    queryKey,\n    queryFn: () => getAvatars({ ensNames, chain }),\n    enabled: !!ensNames.length,\n    ...DEFAULT_QUERY_OPTIONS,\n    gcTime: queryOptions?.cacheTime,\n    ...queryOptions,\n  });\n};\n"],"names":[],"mappings":";;;;AAcO,MAAM,aAAa,CACxB,EAAE,UAAU,QAAQ,QAAA,GACpB,iBACG;AACG,QAAA,WAAW,SAAS,KAAK,GAAG;AAClC,QAAM,WAAW,CAAC,cAAc,UAAU,MAAM,EAAE;AAElD,SAAO,SAAgC;AAAA,IACrC;AAAA,IACA,SAAS,MAAM,WAAW,EAAE,UAAU,OAAO;AAAA,IAC7C,SAAS,CAAC,CAAC,SAAS;AAAA,IACpB,GAAG;AAAA,IACH,QAAQ,6CAAc;AAAA,IACtB,GAAG;AAAA,EAAA,CACJ;AACH;"}