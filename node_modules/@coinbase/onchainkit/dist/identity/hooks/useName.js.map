{"version":3,"file":"useName.js","sources":["../../../src/identity/hooks/useName.ts"],"sourcesContent":["import { getName } from '@/identity/utils/getName';\nimport { DEFAULT_QUERY_OPTIONS } from '@/internal/constants';\nimport { useQuery } from '@tanstack/react-query';\nimport { mainnet } from 'viem/chains';\nimport type {\n  GetNameReturnType,\n  UseNameOptions,\n  UseQueryOptions,\n} from '../types';\n\n/**\n * It leverages the `@tanstack/react-query` hook for fetching and optionally caching the ENS name\n * @returns An object containing:\n *  - `ensName`: The fetched ENS name for the provided address, or null if not found or in case of an error.\n *  - `{UseQueryResult}`: The rest of useQuery return values. including isLoading, isError, error, isFetching, refetch, etc.\n */\nexport const useName = (\n  { address, chain = mainnet }: UseNameOptions,\n  queryOptions?: UseQueryOptions<GetNameReturnType>,\n) => {\n  const queryKey = ['useName', address, chain.id];\n\n  return useQuery<GetNameReturnType>({\n    queryKey,\n    queryFn: () => getName({ address, chain }),\n    enabled: !!address,\n    ...DEFAULT_QUERY_OPTIONS,\n    // Use cacheTime as gcTime for backward compatibility\n    gcTime: queryOptions?.cacheTime,\n    ...queryOptions,\n  });\n};\n"],"names":[],"mappings":";;;;AAgBO,MAAM,UAAU,CACrB,EAAE,SAAS,QAAQ,QAAA,GACnB,iBACG;AACH,QAAM,WAAW,CAAC,WAAW,SAAS,MAAM,EAAE;AAE9C,SAAO,SAA4B;AAAA,IACjC;AAAA,IACA,SAAS,MAAM,QAAQ,EAAE,SAAS,OAAO;AAAA,IACzC,SAAS,CAAC,CAAC;AAAA,IACX,GAAG;AAAA;AAAA,IAEH,QAAQ,6CAAc;AAAA,IACtB,GAAG;AAAA,EAAA,CACJ;AACH;"}