import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useIsMounted } from "../../internal/hooks/useIsMounted.js";
import { useTheme } from "../../internal/hooks/useTheme.js";
import { cn } from "../../styles/theme.js";
import { SignatureButton } from "./SignatureButton.js";
import { SignatureProvider } from "./SignatureProvider.js";
import { SignatureStatus } from "./SignatureStatus.js";
import { SignatureToast } from "./SignatureToast.js";
function SignatureDefaultContent({
  label,
  disabled
}) {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(SignatureButton, { label, disabled }),
    /* @__PURE__ */ jsx(SignatureStatus, {}),
    /* @__PURE__ */ jsx(SignatureToast, {})
  ] });
}
function Signature({
  className,
  domain,
  types,
  message,
  primaryType,
  children,
  label,
  disabled = false,
  onSuccess,
  onStatus,
  onError,
  resetAfter
}) {
  const isMounted = useIsMounted();
  const componentTheme = useTheme();
  if (!isMounted) {
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: cn(componentTheme, "flex w-full flex-col gap-2", className)
      }
    );
  }
  return /* @__PURE__ */ jsx(
    SignatureProvider,
    {
      onSuccess,
      onStatus,
      onError,
      domain,
      types,
      message,
      primaryType,
      resetAfter,
      children: /* @__PURE__ */ jsx(
        "div",
        {
          className: cn(componentTheme, "flex w-full flex-col gap-2", className),
          children: children ?? /* @__PURE__ */ jsx(SignatureDefaultContent, { label, disabled })
        }
      )
    }
  );
}
export {
  Signature
};
//# sourceMappingURL=Signature.js.map
