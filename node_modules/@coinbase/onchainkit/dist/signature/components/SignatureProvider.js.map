{"version":3,"file":"SignatureProvider.js","sources":["../../../src/signature/components/SignatureProvider.tsx"],"sourcesContent":["import type { APIError } from '@/api/types';\nimport { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport { useValue } from '@/internal/hooks/useValue';\nimport { GENERIC_ERROR_MESSAGE } from '@/transaction/constants';\nimport { isUserRejectedRequestError } from '@/transaction/utils/isUserRejectedRequestError';\nimport { createContext, useContext, useEffect } from 'react';\nimport { useSignMessage, useSignTypedData } from 'wagmi';\nimport type {\n  SignMessageParameters,\n  SignTypedDataParameters,\n} from 'wagmi/actions';\nimport {\n  type LifecycleStatus,\n  MessageType,\n  type SignatureProviderProps,\n} from '../types';\nimport { validateMessage } from '../utils/validateMessage';\n\ntype SignatureContextType = {\n  lifecycleStatus: LifecycleStatus;\n  handleSign: () => Promise<void>;\n};\n\nconst EMPTY_CONTEXT = {} as SignatureContextType;\n\nconst SignatureContext = createContext<SignatureContextType>(EMPTY_CONTEXT);\n\nexport function useSignatureContext() {\n  const context = useContext(SignatureContext);\n  if (context === EMPTY_CONTEXT) {\n    throw new Error(\n      'useSignatureContext must be used within a SignatureProvider',\n    );\n  }\n  return context;\n}\n\nexport function SignatureProvider({\n  children,\n  onSuccess,\n  onError,\n  onStatus,\n  domain,\n  types,\n  message,\n  primaryType,\n  resetAfter,\n}: SignatureProviderProps) {\n  const { signTypedDataAsync, reset: resetSignTypedData } = useSignTypedData();\n  const { signMessageAsync, reset: resetSignMessage } = useSignMessage();\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: 'init',\n      statusData: null,\n    });\n\n  useEffect(() => {\n    onStatus?.(lifecycleStatus);\n  }, [lifecycleStatus, onStatus]);\n\n  useEffect(() => {\n    if (lifecycleStatus.statusName === 'success' && resetAfter) {\n      const timeoutId = setTimeout(() => {\n        resetSignMessage();\n        resetSignTypedData();\n        updateLifecycleStatus({\n          statusName: 'init',\n          statusData: null,\n        });\n      }, resetAfter);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [\n    updateLifecycleStatus,\n    lifecycleStatus,\n    resetAfter,\n    resetSignMessage,\n    resetSignTypedData,\n  ]);\n\n  async function handleSignTypedData({\n    domain,\n    types,\n    message,\n    primaryType,\n  }: SignTypedDataParameters) {\n    const signature = await signTypedDataAsync({\n      domain,\n      types,\n      message,\n      primaryType,\n    });\n    updateLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        signature,\n      },\n    });\n    onSuccess?.(signature);\n  }\n\n  async function handleSignMessage({ message }: SignMessageParameters) {\n    const signature = await signMessageAsync({ message });\n    updateLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        signature,\n      },\n    });\n    onSuccess?.(signature);\n  }\n\n  function handleError(err: unknown) {\n    const errorMessage = isUserRejectedRequestError(err)\n      ? 'Request denied.'\n      : GENERIC_ERROR_MESSAGE;\n    updateLifecycleStatus({\n      statusName: 'error',\n      statusData: {\n        code: 'SmSPc01', // Signature module SignatureProvider component 01 error\n        error: JSON.stringify(err),\n        message: errorMessage,\n      },\n    });\n    onError?.(err as APIError);\n  }\n\n  async function handleSign() {\n    updateLifecycleStatus({\n      statusName: 'pending',\n    });\n\n    try {\n      const validatedMessage = validateMessage({\n        domain,\n        types,\n        message,\n        primaryType,\n      });\n      if (validatedMessage.type === MessageType.TYPED_DATA) {\n        await handleSignTypedData(validatedMessage.data);\n      } else if (validatedMessage.type === MessageType.SIGNABLE_MESSAGE) {\n        await handleSignMessage(validatedMessage.data);\n      } else if (validatedMessage.type === MessageType.INVALID) {\n        throw new Error('Invalid message data');\n      }\n    } catch (err) {\n      handleError(err);\n    }\n  }\n\n  const value = useValue({\n    lifecycleStatus,\n    handleSign,\n  });\n\n  return (\n    <SignatureContext.Provider value={value}>\n      {children}\n    </SignatureContext.Provider>\n  );\n}\n"],"names":["domain","types","message","primaryType"],"mappings":"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"}