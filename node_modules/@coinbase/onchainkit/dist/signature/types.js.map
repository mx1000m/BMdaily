{"version":3,"file":"types.js","sources":["../../src/signature/types.ts"],"sourcesContent":["import type {\n  SignMessageParameters,\n  SignTypedDataParameters,\n} from 'wagmi/actions';\nimport type { APIError } from '../api/types';\n\nexport enum MessageType {\n  SIGNABLE_MESSAGE = 'signable_message',\n  TYPED_DATA = 'typed_data',\n  INVALID = 'invalid',\n}\n\nexport type ValidateMessageResult =\n  | { type: MessageType.TYPED_DATA; data: SignTypedDataParameters }\n  | { type: MessageType.SIGNABLE_MESSAGE; data: SignMessageParameters }\n  | { type: MessageType.INVALID; data: null };\n\nexport type MessageData = {\n  domain?: SignTypedDataParameters['domain'];\n  types?: SignTypedDataParameters['types'];\n  message:\n    | SignTypedDataParameters['message']\n    | SignMessageParameters['message'];\n  primaryType?: SignTypedDataParameters['primaryType'];\n};\n\nexport type SignatureProviderProps = {\n  children: React.ReactNode;\n  onSuccess?: (signature: string) => void;\n  onError?: (error: APIError) => void;\n  onStatus?: (status: LifecycleStatus) => void;\n  resetAfter?: number;\n} & MessageData;\n\n/**\n * Note: exported as public Type\n */\nexport type SignatureReact = {\n  chainId?: number;\n  className?: string;\n  onSuccess?: (signature: string) => void;\n  onStatus?: (status: LifecycleStatus) => void;\n  onError?: (error: APIError) => void;\n  resetAfter?: number;\n} & (\n  | {\n      domain?: SignTypedDataParameters['domain'];\n      types: SignTypedDataParameters['types'];\n      message: SignTypedDataParameters['message'];\n      primaryType: SignTypedDataParameters['primaryType'];\n    }\n  | {\n      message: SignMessageParameters['message'];\n      domain?: never;\n      types?: never;\n      primaryType?: never;\n    }\n) &\n  (\n    | {\n        children: React.ReactNode;\n        label?: never;\n        disabled?: never;\n      }\n    | {\n        children?: never;\n        label?: React.ReactNode;\n        disabled?: boolean;\n      }\n  );\n\n/**\n * List of Signature lifecycle statuses.\n * The order of the statuses follows the Signature lifecycle.\n *\n * Note: exported as public Type\n */\nexport type LifecycleStatus =\n  | {\n      statusName: 'init';\n      statusData: null;\n    }\n  | {\n      statusName: 'error';\n      statusData: APIError;\n    }\n  | {\n      statusName: 'pending';\n      statusData: {\n        type: MessageType;\n      };\n    }\n  | {\n      statusName: 'success';\n      statusData: {\n        signature: `0x${string}`;\n        type: MessageType;\n      };\n    }\n  | {\n      statusName: 'reset';\n      statusData: null;\n    };\n"],"names":["MessageType"],"mappings":"AAMY,IAAA,gCAAAA,iBAAL;AACLA,eAAA,kBAAmB,IAAA;AACnBA,eAAA,YAAa,IAAA;AACbA,eAAA,SAAU,IAAA;AAHAA,SAAAA;AAAA,GAAA,eAAA,CAAA,CAAA;"}