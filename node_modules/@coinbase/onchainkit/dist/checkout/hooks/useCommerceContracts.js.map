{"version":3,"file":"useCommerceContracts.js","sources":["../../../src/checkout/hooks/useCommerceContracts.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { type Address, formatUnits } from 'viem';\nimport { useConfig } from 'wagmi';\nimport type { UseCommerceContractsParams } from '../types';\nimport { getCommerceContracts } from '../utils/getCommerceContracts';\nimport { getUSDCBalance } from '../utils/getUSDCBalance';\nimport { handlePayRequest } from '../utils/handlePayRequest';\n\nexport const useCommerceContracts = ({\n  chargeHandler,\n  productId,\n}: UseCommerceContractsParams) => {\n  const config = useConfig();\n\n  return useCallback(\n    async (address: Address) => {\n      try {\n        // Make the Pay request to the appropriate endpoint\n        // `productId` to create and hydrate a charge for a product (serverless)\n        // `chargeHandler` for a developer-provided callback used to return a charge ID (e.g. from the merchant backend)\n        const [response, usdcBalance] = await Promise.all([\n          handlePayRequest({\n            address,\n            chargeHandler,\n            productId,\n          }),\n          getUSDCBalance({\n            address,\n            config,\n          }),\n        ]);\n\n        // Set the `chargeId`\n        const { id: chargeId } = response;\n\n        // Retrieve commerce contracts from response\n        const contracts = getCommerceContracts({\n          transaction: response,\n        });\n\n        // Calculate user's USDC balance\n        const priceInUSDC = formatUnits(\n          BigInt(response.callData.feeAmount) +\n            BigInt(response.callData.recipientAmount),\n          6,\n        );\n\n        // Set insufficient balance flag, if applicable\n        const insufficientBalance =\n          Number.parseFloat(usdcBalance) < Number.parseFloat(priceInUSDC);\n\n        return { chargeId, contracts, insufficientBalance, priceInUSDC };\n      } catch (error) {\n        console.error('Unexpected error fetching contracts:', error);\n        return {\n          chargeId: '',\n          contracts: null,\n          insufficientBalance: false,\n          error,\n        };\n      }\n    },\n    [config, chargeHandler, productId],\n  );\n};\n"],"names":[],"mappings":";;;;;;AAQO,MAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AACF,MAAkC;AAChC,QAAM,SAAS,UAAU;AAElB,SAAA;AAAA,IACL,OAAO,YAAqB;AACtB,UAAA;AAIF,cAAM,CAAC,UAAU,WAAW,IAAI,MAAM,QAAQ,IAAI;AAAA,UAChD,iBAAiB;AAAA,YACf;AAAA,YACA;AAAA,YACA;AAAA,UAAA,CACD;AAAA,UACD,eAAe;AAAA,YACb;AAAA,YACA;AAAA,UACD,CAAA;AAAA,QAAA,CACF;AAGK,cAAA,EAAE,IAAI,SAAA,IAAa;AAGzB,cAAM,YAAY,qBAAqB;AAAA,UACrC,aAAa;AAAA,QAAA,CACd;AAGD,cAAM,cAAc;AAAA,UAClB,OAAO,SAAS,SAAS,SAAS,IAChC,OAAO,SAAS,SAAS,eAAe;AAAA,UAC1C;AAAA,QACF;AAGA,cAAM,sBACJ,OAAO,WAAW,WAAW,IAAI,OAAO,WAAW,WAAW;AAEhE,eAAO,EAAE,UAAU,WAAW,qBAAqB,YAAY;AAAA,eACxD,OAAO;AACN,gBAAA,MAAM,wCAAwC,KAAK;AACpD,eAAA;AAAA,UACL,UAAU;AAAA,UACV,WAAW;AAAA,UACX,qBAAqB;AAAA,UACrB;AAAA,QACF;AAAA,MAAA;AAAA,IAEJ;AAAA,IACA,CAAC,QAAQ,eAAe,SAAS;AAAA,EACnC;AACF;"}