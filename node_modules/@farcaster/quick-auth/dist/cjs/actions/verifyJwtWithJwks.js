"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var verifyJwtWithJwks_exports = {};
__export(verifyJwtWithJwks_exports, {
  verifyJwtWithJwks: () => verifyJwtWithJwks
});
module.exports = __toCommonJS(verifyJwtWithJwks_exports);
var import_jose = require("jose");
var import_errors = require("../errors.js");
const jwksSets = {};
const getJwksSet = /* @__PURE__ */ __name((url) => {
  if (!jwksSets[url]) {
    jwksSets[url] = (0, import_jose.createRemoteJWKSet)(new URL(url));
  }
  return jwksSets[url];
}, "getJwksSet");
async function verifyJwtWithJwks({ origin }, options) {
  const JWKS = getJwksSet(`${origin}/.well-known/jwks.json`);
  try {
    const { payload } = await (0, import_jose.jwtVerify)(options.token, JWKS, {
      issuer: origin,
      audience: options.domain
    });
    return payload;
  } catch (error) {
    if (error instanceof import_jose.errors.JWTInvalid || error instanceof import_jose.errors.JWTExpired || error instanceof import_jose.errors.JWTClaimValidationFailed) {
      throw new import_errors.InvalidTokenError(error.message);
    }
    throw error;
  }
}
__name(verifyJwtWithJwks, "verifyJwtWithJwks");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  verifyJwtWithJwks
});
