"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  BaseError: () => BaseError,
  InvalidParametersError: () => InvalidParametersError,
  InvalidSiwfError: () => InvalidSiwfError,
  InvalidTokenError: () => InvalidTokenError,
  ResponseError: () => ResponseError
});
module.exports = __toCommonJS(errors_exports);
const _BaseError = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details) return options.cause.details;
        if (options.cause.shortMessage) return options.cause.shortMessage;
      }
      if (options.cause && "details" in options.cause && typeof options.cause.details === "string")
        return options.cause.details;
      if ((_a = options.cause) == null ? void 0 : _a.message) return options.cause.message;
      return options.details;
    })();
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details ? [
        "",
        details ? `Details: ${details}` : void 0
      ] : []
    ].filter((x) => typeof x === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    this.name = "BaseError";
    this.cause = options.cause;
    this.details = details;
    this.shortMessage = shortMessage;
  }
};
__name(_BaseError, "BaseError");
let BaseError = _BaseError;
const _ResponseError = class _ResponseError extends BaseError {
  constructor({ status }) {
    super(`Request failed with status ${status}`);
    this.name = "RequestFailedError";
  }
};
__name(_ResponseError, "ResponseError");
let ResponseError = _ResponseError;
const _InvalidSiwfError = class _InvalidSiwfError extends BaseError {
  constructor(message) {
    super(message);
    this.name = "InvalidToken";
  }
};
__name(_InvalidSiwfError, "InvalidSiwfError");
let InvalidSiwfError = _InvalidSiwfError;
const _InvalidTokenError = class _InvalidTokenError extends BaseError {
  constructor(message) {
    super(message);
    this.name = "InvalidToken";
  }
};
__name(_InvalidTokenError, "InvalidTokenError");
let InvalidTokenError = _InvalidTokenError;
const _InvalidParametersError = class _InvalidParametersError extends BaseError {
  constructor(message) {
    super(message);
    this.name = "InvalidParameters";
  }
};
__name(_InvalidParametersError, "InvalidParametersError");
let InvalidParametersError = _InvalidParametersError;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseError,
  InvalidParametersError,
  InvalidSiwfError,
  InvalidTokenError,
  ResponseError
});
