{
  "version": 3,
  "sources": ["../../@coinbase/onchainkit/src/core/analytics/hooks/useAnalytics.ts", "../../@coinbase/onchainkit/src/internal/hooks/useCapabilitiesSafe.ts", "../../@coinbase/onchainkit/src/transaction/constants.ts", "../../@coinbase/onchainkit/src/internal/utils/normalizeWagmi.ts", "../../@coinbase/onchainkit/src/transaction/hooks/useCallsStatus.ts", "../../@coinbase/onchainkit/src/transaction/utils/isUserRejectedRequestError.ts", "../../@coinbase/onchainkit/src/transaction/hooks/useSendCall.ts", "../../@coinbase/onchainkit/src/transaction/hooks/useSendCalls.ts", "../../@coinbase/onchainkit/src/transaction/utils/isContract.ts", "../../@coinbase/onchainkit/src/transaction/utils/sendBatchedTransactions.ts", "../../@coinbase/onchainkit/src/transaction/utils/sendSingleTransactions.ts", "../../@coinbase/onchainkit/src/transaction/hooks/useSendWalletTransactions.tsx", "../../@coinbase/onchainkit/src/transaction/utils/getPaymasterUrl.ts", "../../@coinbase/onchainkit/src/transaction/components/TransactionProvider.tsx", "../../@coinbase/onchainkit/src/core/network/getChainExplorer.ts", "../../@coinbase/onchainkit/src/internal/components/Spinner.tsx", "../../@coinbase/onchainkit/src/transaction/utils/isSpinnerDisplayed.ts", "../../@coinbase/onchainkit/src/transaction/components/TransactionButton.tsx", "../../@coinbase/onchainkit/src/transaction/hooks/useGetTransactionToastAction.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionToastAction.tsx", "../../@coinbase/onchainkit/src/internal/svg/errorSvg.tsx", "../../@coinbase/onchainkit/src/internal/svg/successSvg.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionToastIcon.tsx", "../../@coinbase/onchainkit/src/transaction/hooks/useGetTransactionToastLabel.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionToastLabel.tsx", "../../@coinbase/onchainkit/src/internal/svg/closeSvg.tsx", "../../@coinbase/onchainkit/src/internal/utils/getToastPosition.ts", "../../@coinbase/onchainkit/src/internal/components/Toast.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionToast.tsx", "../../@coinbase/onchainkit/src/internal/hooks/useIsMounted.ts", "../../@coinbase/onchainkit/src/transaction/components/Transaction.tsx", "../../@coinbase/onchainkit/src/transaction/hooks/useGetTransactionStatusAction.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionStatusAction.tsx", "../../@coinbase/onchainkit/src/transaction/hooks/useGetTransactionStatusLabel.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionStatusLabel.tsx", "../../@coinbase/onchainkit/src/transaction/components/TransactionStatus.tsx"],
  "sourcesContent": ["import { sendAnalyticsPayload } from '../utils/analyticsService';\n\n/**\n * useAnalytics handles analytics events and data preparation\n */\nexport const useAnalytics = () => {\n  return { sendAnalytics: sendAnalyticsPayload };\n};\n", "import { useMemo } from 'react';\nimport type { WalletCapabilities } from 'viem';\nimport { useAccount } from 'wagmi';\nimport { useCapabilities } from 'wagmi/experimental';\nimport type { UseCapabilitiesSafeParams } from '../../core/types';\n\nexport function useCapabilitiesSafe({\n  chainId,\n}: UseCapabilitiesSafeParams): WalletCapabilities {\n  const { isConnected } = useAccount();\n\n  const { data: capabilities, error } = useCapabilities({\n    query: { enabled: isConnected },\n  });\n\n  return useMemo(() => {\n    if (error || !capabilities || !capabilities[chainId]) {\n      return {};\n    }\n\n    return capabilities[chainId];\n  }, [capabilities, chainId, error]);\n}\n", "export const GENERIC_ERROR_MESSAGE = 'Something went wrong. Please try again.';\n// Most likely EOAexport const genericErrorMessage = 'Something went wrong. Please try again.';\nexport const METHOD_NOT_SUPPORTED_ERROR_SUBSTRING =\n  'this request method is not supported';\nexport const SEND_CALLS_NOT_SUPPORTED_ERROR = 'SEND_CALLS_NOT_SUPPORTED_ERROR';\nexport const TRANSACTION_TYPE_CALLS = 'TRANSACTION_TYPE_CALLS';\nexport const TRANSACTION_TYPE_CONTRACTS = 'TRANSACTION_TYPE_CONTRACTS';\n", "/**\n * These normalize functions are needed due to Wagmi's experimental hooks have a breaking change on a minor version\n * https://github.com/wevm/viem/blob/8621c73ac128605828a6b462c758e9c73b4567ed/src/CHANGELOG.md#2260\n *\n * We cannot dictate which version of viem wagmi uses, so we need to normalize the status and transaction id\n * to be compatible with both < v2.26.0 and >= v2.26.0\n */\n\nexport function normalizeStatus(status?: string) {\n  if (status === 'CONFIRMED') {\n    return 'success';\n  }\n  if (status === 'PENDING') {\n    return 'pending';\n  }\n\n  return status;\n}\n\nexport function normalizeTransactionId(data: { id: string } | string) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return data.id;\n}\n", "import { useCallsStatus as useCallsStatusWagmi } from 'wagmi/experimental';\nimport type { UseCallsStatusParams } from '../types';\nimport { normalizeStatus } from '@/internal/utils/normalizeWagmi';\n\nexport function useCallsStatus({\n  setLifecycleStatus,\n  transactionId,\n}: UseCallsStatusParams) {\n  try {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { data } = useCallsStatusWagmi({\n      id: transactionId,\n      query: {\n        refetchInterval: (query) => {\n          return normalizeStatus(query.state.data?.status) === 'success'\n            ? false\n            : 1000;\n        },\n        enabled: !!transactionId,\n      },\n    });\n    const transactionHash = data?.receipts?.[0]?.transactionHash;\n    return { status: data?.status, transactionHash };\n  } catch (err) {\n    setLifecycleStatus({\n      statusName: 'error',\n      statusData: {\n        code: 'TmUCSh01',\n        error: JSON.stringify(err),\n        message: '',\n      },\n    });\n    return { status: 'error', transactionHash: undefined };\n  }\n}\n", "import type { TransactionExecutionError } from 'viem';\n\nexport function isUserRejectedRequestError(err: unknown) {\n  if (\n    (err as TransactionExecutionError)?.cause?.name ===\n    'UserRejectedRequestError'\n  ) {\n    return true;\n  }\n  if (\n    (err as TransactionExecutionError)?.shortMessage?.includes(\n      'User rejected the request.',\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n", "import type { Address } from 'viem';\nimport { useSendTransaction as useSendCallWagmi } from 'wagmi';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseSendCallParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * Wagmi hook for single transactions with calldata.\n * Supports both EOAs and Smart Wallets.\n * Does not support transaction batching or paymasters.\n */\nexport function useSendCall({\n  setLifecycleStatus,\n  transactionHashList,\n}: UseSendCallParams) {\n  const {\n    status,\n    sendTransactionAsync: sendCallAsync,\n    data,\n    reset,\n  } = useSendCallWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUSCh01', // Transaction module UseSendCall hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (hash: Address) => {\n        setLifecycleStatus({\n          statusName: 'transactionLegacyExecuted',\n          statusData: {\n            transactionHashList: [...transactionHashList, hash],\n          },\n        });\n      },\n    },\n  });\n  return { status, sendCallAsync, data, reset };\n}\n", "import { useSendCalls as useSendCallsWagmi } from 'wagmi/experimental';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseSendCallsParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\nimport { normalizeTransactionId } from '@/internal/utils/normalizeWagmi';\n\n/**\n * useSendCalls: Experimental Wagmi hook for batching transactions with calldata.\n * Supports Smart Wallets.\n * Supports batch operations and capabilities such as paymasters.\n * Does not support EOAs.\n */\nexport function useSendCalls({\n  setLifecycleStatus,\n  setTransactionId,\n}: UseSendCallsParams) {\n  const { status, sendCallsAsync, data, reset } = useSendCallsWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUSCSh01', // Transaction module UseSendCalls hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (data) => {\n        setTransactionId(normalizeTransactionId(data));\n      },\n    },\n  });\n  return { status, sendCallsAsync, data, reset };\n}\n", "import type { ContractFunctionParameters } from 'viem';\nimport type { Call } from '../types';\n\nexport function isContract(\n  transaction: Call | ContractFunctionParameters,\n): transaction is ContractFunctionParameters {\n  return 'abi' in transaction;\n}\n", "import type { SendBatchedTransactionsParams } from '../types';\nimport { isContract } from './isContract';\n\nexport const sendBatchedTransactions = async ({\n  capabilities,\n  sendCallsAsync,\n  transactions,\n}: SendBatchedTransactionsParams) => {\n  if (!transactions) {\n    return;\n  }\n\n  const calls = transactions?.map((transaction) => {\n    if (isContract(transaction)) {\n      const { address, ...rest } = transaction;\n      return {\n        ...rest,\n        to: address,\n      };\n    }\n    return transaction;\n  });\n\n  await sendCallsAsync({\n    calls,\n    capabilities,\n  });\n};\n", "import { encodeFunctionData } from 'viem';\nimport { waitForTransactionReceipt } from 'wagmi/actions';\nimport type { SendSingleTransactionParams } from '../types';\nimport { isContract } from './isContract';\n\nexport const sendSingleTransactions = async ({\n  config,\n  sendCallAsync,\n  transactions,\n}: SendSingleTransactionParams) => {\n  const calls = transactions?.map((transaction) => {\n    if (isContract(transaction)) {\n      return {\n        data: encodeFunctionData({\n          abi: transaction?.abi,\n          functionName: transaction?.functionName,\n          args: transaction?.args,\n        }),\n        to: transaction?.address,\n      };\n    }\n    return transaction;\n  });\n\n  for (const call of calls) {\n    const txHash = await sendCallAsync(call);\n    if (txHash) {\n      await waitForTransactionReceipt(config, {\n        hash: txHash,\n        confirmations: 1,\n      });\n    }\n  }\n};\n", "import { useCallback } from 'react';\nimport type { ContractFunctionParameters } from 'viem';\nimport { useConfig } from 'wagmi';\nimport { Capabilities } from '../../core/constants';\nimport type { Call, UseSendWalletTransactionsParams } from '../types';\nimport { sendBatchedTransactions } from '../utils/sendBatchedTransactions';\nimport { sendSingleTransactions } from '../utils/sendSingleTransactions';\n\n/**\n * Sends transactions to the wallet using the appropriate hook based on Transaction props and wallet capabilities\n */\nexport const useSendWalletTransactions = ({\n  capabilities,\n  sendCallAsync,\n  sendCallsAsync,\n  walletCapabilities,\n}: UseSendWalletTransactionsParams) => {\n  const config = useConfig();\n  return useCallback(\n    async (\n      transactions?:\n        | Call[]\n        | ContractFunctionParameters[]\n        | Promise<Call[]>\n        | Promise<ContractFunctionParameters[]>\n        | Array<Call | ContractFunctionParameters>,\n    ) => {\n      if (!transactions) {\n        return;\n      }\n\n      const resolvedTransactions = await Promise.resolve(transactions);\n\n      if (walletCapabilities[Capabilities.AtomicBatch]?.supported) {\n        // Batched transactions\n        await sendBatchedTransactions({\n          capabilities,\n          sendCallsAsync,\n          transactions: resolvedTransactions,\n        });\n      } else {\n        // Non-batched transactions\n        await sendSingleTransactions({\n          config,\n          sendCallAsync,\n          transactions: resolvedTransactions,\n        });\n      }\n    },\n    [sendCallsAsync, sendCallAsync, capabilities, walletCapabilities, config],\n  );\n};\n", "import type { WalletCapabilities } from 'viem';\n\nexport const getPaymasterUrl = (\n  capabilities?: WalletCapabilities,\n): string | null => {\n  return capabilities?.paymasterService?.url || null;\n};\n", "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport type { Address } from 'viem';\nimport {\n  useAccount,\n  useConfig,\n  useSwitchChain,\n  useWaitForTransactionReceipt,\n} from 'wagmi';\nimport { waitForTransactionReceipt } from 'wagmi/actions';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport {\n  TransactionEvent,\n  type TransactionEventData,\n} from '../../core/analytics/types';\nimport { Capabilities } from '../../core/constants';\nimport { useCapabilitiesSafe } from '../../internal/hooks/useCapabilitiesSafe';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport { useCallsStatus } from '../hooks/useCallsStatus';\nimport { useSendCall } from '../hooks/useSendCall';\nimport { useSendCalls } from '../hooks/useSendCalls';\nimport { useSendWalletTransactions } from '../hooks/useSendWalletTransactions';\nimport type {\n  LifecycleStatus,\n  TransactionContextType,\n  TransactionProviderReact,\n} from '../types';\nimport { getPaymasterUrl } from '../utils/getPaymasterUrl';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\nconst emptyContext = {} as TransactionContextType;\nexport const TransactionContext =\n  createContext<TransactionContextType>(emptyContext);\n\nexport function useTransactionContext() {\n  const context = useContext(TransactionContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useTransactionContext must be used within a Transaction component',\n    );\n  }\n  return context;\n}\n\nexport function TransactionProvider({\n  calls,\n  capabilities: transactionCapabilities,\n  chainId,\n  children,\n  contracts,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n  resetAfter,\n}: TransactionProviderReact) {\n  // Core Hooks\n  const account = useAccount();\n  const config = useConfig();\n  const { config: { paymaster } = { paymaster: undefined } } = useOnchainKit();\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [errorCode, setErrorCode] = useState('');\n  const [isToastVisible, setIsToastVisible] = useState(false);\n  const [lifecycleStatus, setLifecycleStatus] = useState<LifecycleStatus>({\n    statusName: 'init',\n    statusData: null,\n  }); // Component lifecycle\n  const [transactionId, setTransactionId] = useState('');\n  const [transactionCount, setTransactionCount] = useState<\n    number | undefined\n  >();\n  const [transactionHashList, setTransactionHashList] = useState<Address[]>([]);\n  const transactions = calls || contracts;\n\n  // Retrieve wallet capabilities\n  const walletCapabilities = useCapabilitiesSafe({\n    chainId,\n  });\n\n  const { switchChainAsync } = useSwitchChain();\n\n  // Validate `calls` and `contracts` props\n  if (!contracts && !calls) {\n    throw new Error(\n      'Transaction: calls or contracts must be provided as a prop to the Transaction component.',\n    );\n  }\n\n  // Validate `calls` and `contracts` props\n  if (calls && contracts) {\n    throw new Error(\n      'Transaction: Only one of contracts or calls can be provided as a prop to the Transaction component.',\n    );\n  }\n\n  // useSendCalls or useSendCall\n  // Used for contract calls with raw calldata.\n  const {\n    status: statusSendCalls,\n    sendCallsAsync,\n    reset: resetSendCalls,\n  } = useSendCalls({\n    setLifecycleStatus,\n    setTransactionId,\n  });\n\n  const {\n    status: statusSendCall,\n    sendCallAsync,\n    data: singleTransactionHash,\n    reset: resetSendCall,\n  } = useSendCall({\n    setLifecycleStatus,\n    transactionHashList,\n  });\n\n  // Transaction Status\n  // For batched, use statusSendCalls\n  // For single, use statusSendCall\n  const transactionStatus = useMemo(() => {\n    if (walletCapabilities[Capabilities.AtomicBatch]?.supported) {\n      return statusSendCalls;\n    }\n    return statusSendCall;\n  }, [statusSendCall, statusSendCalls, walletCapabilities]);\n\n  const capabilities = useMemo(() => {\n    if (isSponsored && paymaster) {\n      return {\n        paymasterService: { url: paymaster },\n        // this needs to be below so devs can override default paymaster\n        // with their personal paymaster in production playgroundd\n        ...transactionCapabilities,\n      };\n    }\n    return transactionCapabilities;\n  }, [isSponsored, paymaster, transactionCapabilities]);\n\n  // useSendWalletTransactions\n  // Used to send transactions based on the transaction type. Can be of type calls or contracts.\n  const sendWalletTransactions = useSendWalletTransactions({\n    capabilities,\n    sendCallAsync,\n    sendCallsAsync,\n    walletCapabilities,\n  });\n\n  const { transactionHash: batchedTransactionHash, status: callStatus } =\n    useCallsStatus({\n      setLifecycleStatus,\n      transactionId,\n    });\n\n  const { data: receipt } = useWaitForTransactionReceipt({\n    hash: singleTransactionHash || batchedTransactionHash,\n  });\n\n  const { sendAnalytics } = useAnalytics();\n\n  const handleAnalytics = useCallback(\n    (event: TransactionEvent, data: TransactionEventData[TransactionEvent]) => {\n      sendAnalytics(event, data);\n    },\n    [sendAnalytics],\n  );\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    setErrorMessage('');\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      setErrorMessage(lifecycleStatus.statusData.message);\n      setErrorCode(lifecycleStatus.statusData.code);\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Transaction Legacy Executed\n    if (lifecycleStatus.statusName === 'transactionLegacyExecuted') {\n      setTransactionHashList(lifecycleStatus.statusData.transactionHashList);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.({\n        transactionReceipts: lifecycleStatus.statusData.transactionReceipts,\n      });\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n  ]);\n\n  // Set transaction pending status when writeContracts or writeContract is pending\n  useEffect(() => {\n    if (transactionStatus === 'pending') {\n      setLifecycleStatus({\n        statusName: 'transactionPending',\n        statusData: null,\n      });\n    }\n  }, [transactionStatus]);\n\n  // Trigger success status when receipt is generated by useWaitForTransactionReceipt\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: [receipt],\n      },\n    });\n    if (resetAfter) {\n      // Reset all internal state\n      const timeoutId = setTimeout(() => {\n        setErrorMessage('');\n        setErrorCode('');\n        setIsToastVisible(false);\n        setTransactionId('');\n        setTransactionHashList([]);\n        setTransactionCount(undefined);\n        resetSendCalls();\n        resetSendCall();\n      }, resetAfter);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [receipt, resetAfter, resetSendCalls, resetSendCall]);\n\n  // When all transactions are successful, get the receipts\n  const getTransactionLegacyReceipts = useCallback(async () => {\n    const receipts = [];\n    for (const hash of transactionHashList) {\n      try {\n        const txnReceipt = await waitForTransactionReceipt(config, {\n          hash,\n          chainId,\n        });\n        receipts.push(txnReceipt);\n      } catch (err) {\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmTPc01', // Transaction module TransactionProvider component 01 error\n            error: JSON.stringify(err),\n            message: GENERIC_ERROR_MESSAGE,\n          },\n        });\n      }\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: receipts,\n      },\n    });\n  }, [chainId, config, transactionHashList]);\n\n  useEffect(() => {\n    if (\n      !transactions ||\n      transactionHashList.length !== transactionCount ||\n      transactionCount < 2\n    ) {\n      return;\n    }\n    getTransactionLegacyReceipts();\n  }, [\n    transactions,\n    transactionCount,\n    transactionHashList,\n    getTransactionLegacyReceipts,\n  ]);\n\n  const switchChain = useCallback(\n    async (targetChainId: number | undefined) => {\n      if (targetChainId && account.chainId !== targetChainId) {\n        await switchChainAsync({ chainId: targetChainId });\n      }\n    },\n    [account.chainId, switchChainAsync],\n  );\n\n  const buildTransaction = useCallback(async () => {\n    setLifecycleStatus({\n      statusName: 'buildingTransaction',\n      statusData: null,\n    });\n    try {\n      handleAnalytics(TransactionEvent.TransactionInitiated, {\n        address: account.address,\n      });\n      const resolvedTransactions = await (typeof transactions === 'function'\n        ? transactions()\n        : Promise.resolve(transactions));\n      setTransactionCount(resolvedTransactions?.length);\n      return resolvedTransactions;\n    } catch (err) {\n      handleAnalytics(TransactionEvent.TransactionFailure, {\n        error: (err as Error).message,\n        metadata: {\n          code: errorCode,\n        },\n      });\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc04', // Transaction module TransactionProvider component 04 error\n          error: JSON.stringify(err),\n          message: 'Error building transactions',\n        },\n      });\n      return undefined;\n    }\n  }, [transactions, handleAnalytics, account.address, errorCode]);\n\n  const handleSubmit = useCallback(async () => {\n    setErrorMessage('');\n    setIsToastVisible(true);\n    try {\n      // Switch chain before attempting transactions\n      await switchChain(chainId);\n      const resolvedTransactions = await buildTransaction();\n      await sendWalletTransactions(resolvedTransactions);\n    } catch (err) {\n      const errorMessage = isUserRejectedRequestError(err)\n        ? 'Request denied.'\n        : GENERIC_ERROR_MESSAGE;\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc03', // Transaction module TransactionProvider component 03 error\n          error: JSON.stringify(err),\n          message: errorMessage,\n        },\n      });\n    }\n  }, [buildTransaction, chainId, sendWalletTransactions, switchChain]);\n\n  const value = useValue({\n    chainId,\n    errorCode,\n    errorMessage,\n    isLoading: callStatus === 'PENDING',\n    isToastVisible,\n    lifecycleStatus,\n    onSubmit: handleSubmit,\n    paymasterUrl: getPaymasterUrl(capabilities),\n    receipt,\n    setIsToastVisible,\n    setLifecycleStatus,\n    setTransactionId,\n    transactions,\n    transactionId,\n    transactionHash: singleTransactionHash || batchedTransactionHash,\n    transactionCount,\n  });\n\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n\n    if (receipt.status === 'success') {\n      handleAnalytics(TransactionEvent.TransactionSuccess, {\n        paymaster: Boolean(isSponsored && paymaster),\n        address: account.address,\n        transactionHash: receipt.transactionHash,\n      });\n    } else {\n      handleAnalytics(TransactionEvent.TransactionFailure, {\n        error: 'Transaction failed',\n        metadata: {\n          code: errorCode,\n        },\n      });\n    }\n  }, [\n    receipt,\n    handleAnalytics,\n    isSponsored,\n    paymaster,\n    account.address,\n    errorCode,\n  ]);\n\n  return (\n    <TransactionContext.Provider value={value}>\n      {children}\n    </TransactionContext.Provider>\n  );\n}\n", "import {\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n  polygonMumbai,\n  sepolia,\n} from 'viem/chains';\n\nconst chainExplorerMap: Record<number, string> = {\n  [baseSepolia.id]: 'https://sepolia.basescan.org',\n  [base.id]: 'https://basescan.org',\n  [arbitrum.id]: 'https://arbiscan.io',\n  [arbitrumSepolia.id]: 'https://sepolia.arbiscan.io',\n  [optimism.id]: 'https://optimistic.etherscan.io',\n  [optimismSepolia.id]: 'https://sepolia-optimism.etherscan.io/',\n  [polygon.id]: 'https://polygonscan.com',\n  [polygonMumbai.id]: 'https://mumbai.polygonscan.com',\n  [mainnet.id]: 'https://etherscan.io',\n  [sepolia.id]: 'https://sepolia.etherscan.io',\n};\n\nexport function getChainExplorer(chainId?: number) {\n  if (!chainId) {\n    return 'https://basescan.org';\n  }\n\n  return chainExplorerMap[chainId] ?? 'https://basescan.org';\n}\n", "import { cn } from '../../styles/theme';\n\ntype SpinnerReact = {\n  className?: string;\n};\n\nexport function Spinner({ className }: SpinnerReact) {\n  return (\n    <div\n      className=\"flex h-full items-center justify-center\"\n      data-testid=\"ockSpinner\"\n    >\n      <div\n        className={cn(\n          'animate-spin border-2 border-gray-200 border-t-3',\n          'rounded-full border-t-gray-400 px-2.5 py-2.5',\n          className,\n        )}\n      />\n    </div>\n  );\n}\n", "import type { IsSpinnerDisplayedProps } from '../types';\n\nexport function isSpinnerDisplayed({\n  errorMessage,\n  hasReceipt,\n  isInProgress,\n  transactionHash,\n  transactionId,\n}: IsSpinnerDisplayedProps) {\n  const isWaitingForReceipt = transactionId || transactionHash;\n\n  if (hasReceipt || errorMessage) {\n    return false;\n  }\n  if (isInProgress || isWaitingForReceipt) {\n    return true;\n  }\n  return false;\n}\n", "import { useCallback, useMemo } from 'react';\nimport { useAccount, useChainId } from 'wagmi';\nimport { getChainExplorer } from '../../core/network/getChainExplorer';\nimport { Spinner } from '../../internal/components/Spinner';\nimport { border, cn, color, pressable, text } from '../../styles/theme';\nimport type { TransactionButtonReact } from '../types';\nimport { isSpinnerDisplayed } from '../utils/isSpinnerDisplayed';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionButton({\n  className,\n  disabled = false,\n  text: idleText = 'Transact',\n  errorOverride,\n  successOverride,\n  pendingOverride,\n}: TransactionButtonReact) {\n  const {\n    chainId,\n    errorMessage,\n    isLoading,\n    lifecycleStatus,\n    onSubmit,\n    receipt,\n    transactions,\n    transactionCount,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  const { address } = useAccount();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const accountChainId = chainId ?? useChainId();\n\n  const isLegacyTransactionInProgress =\n    lifecycleStatus.statusName === 'transactionLegacyExecuted' &&\n    transactionCount !==\n      lifecycleStatus?.statusData?.transactionHashList?.length;\n\n  const isInProgress =\n    lifecycleStatus.statusName === 'buildingTransaction' ||\n    lifecycleStatus.statusName === 'transactionPending' ||\n    isLegacyTransactionInProgress ||\n    isLoading;\n\n  const isMissingProps = !transactions || !address;\n  const isWaitingForReceipt = !!transactionId || !!transactionHash;\n\n  const isDisabled =\n    !receipt &&\n    (isInProgress || isMissingProps || isWaitingForReceipt || disabled);\n\n  const displayPendingState = isSpinnerDisplayed({\n    errorMessage,\n    hasReceipt: !!receipt,\n    isInProgress,\n    transactionHash,\n    transactionId,\n  });\n\n  const { errorText, successText, pendingContent } = useMemo(() => {\n    const successText = successOverride?.text ?? 'View transaction';\n    const errorText = errorOverride?.text ?? 'Try again';\n    const pendingContent = pendingOverride?.text ?? <Spinner />;\n\n    return { successText, errorText, pendingContent };\n  }, [errorOverride, pendingOverride, successOverride]);\n\n  const defaultSuccessHandler = useCallback(() => {\n    // SW will have txn id so open in wallet\n    if (receipt && transactionId && transactionHash && chainId && address) {\n      const url = new URL('https://wallet.coinbase.com/assets/transactions');\n      url.searchParams.set('contentParams[txHash]', transactionHash);\n      url.searchParams.set('contentParams[chainId]', JSON.stringify(chainId));\n      url.searchParams.set('contentParams[fromAddress]', address);\n      return window.open(url, '_blank', 'noopener,noreferrer');\n    }\n    // EOA will not have txn id so open in explorer\n    const chainExplorer = getChainExplorer(accountChainId);\n    return window.open(\n      `${chainExplorer}/tx/${transactionHash}`,\n      '_blank',\n      'noopener,noreferrer',\n    );\n  }, [\n    address,\n    chainId,\n    receipt,\n    transactionId,\n    transactionHash,\n    accountChainId,\n  ]);\n\n  const successHandler = useCallback(() => {\n    if (successOverride?.onClick && receipt) {\n      return successOverride?.onClick?.(receipt);\n    }\n    defaultSuccessHandler();\n  }, [defaultSuccessHandler, successOverride, receipt]);\n\n  const errorHandler = useCallback(() => {\n    if (errorOverride?.onClick) {\n      return errorOverride?.onClick?.();\n    }\n    // if no custom logic, retry submit\n    return onSubmit();\n  }, [errorOverride, onSubmit]);\n\n  const buttonContent = useMemo(() => {\n    // txn successful\n    if (receipt) {\n      return successText;\n    }\n    if (errorMessage) {\n      return errorText;\n    }\n    if (displayPendingState) {\n      return pendingContent;\n    }\n    return idleText;\n  }, [\n    displayPendingState,\n    errorMessage,\n    errorText,\n    idleText,\n    pendingContent,\n    receipt,\n    successText,\n  ]);\n\n  const handleSubmit = useCallback(() => {\n    if (receipt) {\n      successHandler();\n    } else if (errorMessage) {\n      errorHandler();\n    } else {\n      onSubmit();\n    }\n  }, [errorMessage, errorHandler, onSubmit, receipt, successHandler]);\n\n  return (\n    <button\n      className={cn(\n        pressable.primary,\n        border.radius,\n        'w-full rounded-xl',\n        'px-4 py-3 font-medium leading-6',\n        isDisabled && pressable.disabled,\n        text.headline,\n        color.inverse,\n        className,\n      )}\n      onClick={handleSubmit}\n      type=\"button\"\n      disabled={isDisabled}\n      data-testid=\"ockTransactionButton_Button\"\n    >\n      {buttonContent}\n    </button>\n  );\n}\n", "import { useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { getChainExplorer } from '../../core/network/getChainExplorer';\nimport { cn, color, text } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionToastAction() {\n  const { chainId, errorMessage, onSubmit, transactionHash, transactionId } =\n    useTransactionContext();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const accountChainId = chainId ?? useChainId();\n\n  const { showCallsStatus } = useShowCallsStatus();\n\n  return useMemo(() => {\n    const chainExplorer = getChainExplorer(accountChainId);\n\n    let actionElement: ReactNode = null;\n\n    // EOA will have txn hash\n    if (transactionHash) {\n      actionElement = (\n        <a\n          href={`${chainExplorer}/tx/${transactionHash}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </a>\n      );\n    }\n\n    // SW will have txn id\n    if (transactionId) {\n      actionElement = (\n        <button\n          onClick={() => showCallsStatus({ id: transactionId })}\n          type=\"button\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </button>\n      );\n    }\n\n    if (errorMessage) {\n      actionElement = (\n        <button type=\"button\" onClick={onSubmit}>\n          <span className={cn(text.label1, color.primary)}>Try again</span>\n        </button>\n      );\n    }\n\n    return { actionElement };\n  }, [\n    accountChainId,\n    errorMessage,\n    onSubmit,\n    showCallsStatus,\n    transactionHash,\n    transactionId,\n  ]);\n}\n", "import { cn, text } from '../../styles/theme';\nimport { useGetTransactionToastAction } from '../hooks/useGetTransactionToastAction';\nimport type { TransactionToastActionReact } from '../types';\n\nexport function TransactionToastAction({\n  className,\n}: TransactionToastActionReact) {\n  const { actionElement } = useGetTransactionToastAction();\n\n  return (\n    <div className={cn(text.label1, 'text-nowrap', className)}>\n      {actionElement}\n    </div>\n  );\n}\n", "type ErrorSvgProps = {\n  fill?: string;\n};\n\nexport const ErrorSvg = ({ fill = '#E11D48' }: ErrorSvgProps) => (\n  <svg\n    aria-label=\"ock-errorSvg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-testid=\"ock-errorSvg\"\n  >\n    <title>Error</title>\n    <path\n      d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58171 12.4183 0 8 0C3.58172 0 0 3.58171 0 8C0 12.4183 3.58172 16 8 16ZM11.7576 5.0909L8.84853 8L11.7576 10.9091L10.9091 11.7576L8 8.84851L5.09093 11.7576L4.2424 10.9091L7.15147 8L4.2424 5.0909L5.09093 4.24239L8 7.15145L10.9091 4.24239L11.7576 5.0909Z\"\n      fill={fill}\n    />\n  </svg>\n);\n", "type SuccessSvgProps = {\n  fill?: string;\n};\n\nexport const SuccessSvg = ({ fill = '#65A30D' }: SuccessSvgProps) => (\n  <svg\n    aria-label=\"ock-successSvg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-testid=\"ock-successSvg\"\n  >\n    <title>Success SVG</title>\n    <path\n      d=\"M8 0C3.58 0 0 3.58 0 8C0 12.42 3.58 16 8 16C12.42 16 16 12.42 16 8C16 3.58 12.42 0 8 0ZM6.72667 11.5333L3.73333 8.54L4.67333 7.6L6.72667 9.65333L11.44 4.94L12.38 5.88L6.72667 11.5333Z\"\n      fill={fill}\n    />\n  </svg>\n);\n", "import { useMemo } from 'react';\nimport { Spinner } from '../../internal/components/Spinner';\nimport { ErrorSvg } from '../../internal/svg/errorSvg';\nimport { SuccessSvg } from '../../internal/svg/successSvg';\nimport { cn, text } from '../../styles/theme';\nimport type { TransactionToastIconReact } from '../types';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionToastIcon({ className }: TransactionToastIconReact) {\n  const { errorMessage, isLoading, receipt, transactionHash, transactionId } =\n    useTransactionContext();\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  const icon = useMemo(() => {\n    // txn successful\n    if (receipt) {\n      return <SuccessSvg />;\n    }\n    if (errorMessage) {\n      return <ErrorSvg />;\n    }\n    if (isInProgress) {\n      return <Spinner className=\"px-1.5 py-1.5\" />;\n    }\n    return null;\n  }, [isInProgress, errorMessage, receipt]);\n\n  if (!icon) {\n    return null;\n  }\n\n  return <div className={cn(text.label2, className)}>{icon}</div>;\n}\n", "import { useMemo } from 'react';\nimport { color } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionToastLabel() {\n  const {\n    errorMessage,\n    isLoading,\n    lifecycleStatus,\n    receipt,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  // user confirmed in wallet, txn in progress\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  // waiting for calls or contracts promise to resolve\n  const isBuildingTransaction =\n    lifecycleStatus.statusName === 'buildingTransaction';\n\n  return useMemo(() => {\n    let label = '';\n    let labelClassName: string = color.foregroundMuted;\n\n    if (isBuildingTransaction) {\n      label = 'Building transaction';\n    }\n\n    if (isInProgress) {\n      label = 'Transaction in progress';\n    }\n\n    if (receipt) {\n      label = 'Successful';\n    }\n\n    if (errorMessage) {\n      label = 'Something went wrong';\n      labelClassName = color.error;\n    }\n\n    return { label, labelClassName };\n  }, [errorMessage, isBuildingTransaction, isInProgress, receipt]);\n}\n", "import { cn, color, text } from '../../styles/theme';\nimport { useGetTransactionToastLabel } from '../hooks/useGetTransactionToastLabel';\nimport type { TransactionToastLabelReact } from '../types';\n\nexport function TransactionToastLabel({\n  className,\n}: TransactionToastLabelReact) {\n  const { label } = useGetTransactionToastLabel();\n  return (\n    <div className={cn(text.label1, 'text-nowrap', className)}>\n      <p className={color.foreground}>{label}</p>\n    </div>\n  );\n}\n", "import { icon } from '../../styles/theme';\n\ntype CloseSvgProps = {\n  className?: string;\n};\n\nexport function CloseSvg({ className = icon.foreground }: CloseSvgProps) {\n  return (\n    <svg\n      aria-label=\"ock-closeSvg\"\n      width=\"12\"\n      height=\"12\"\n      viewBox=\"0 0 16 16\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <title>Close</title>\n      <path d=\"M2.14921 1L1 2.1492L6.8508 8L1 13.8508L2.1492 15L8 9.1492L13.8508 15L15 13.8508L9.14921 8L15 2.1492L13.8508 1L8 6.8508L2.14921 1Z\" />\n    </svg>\n  );\n}\n", "export function getToastPosition(position: string) {\n  if (position === 'bottom-right') {\n    return 'bottom-5 left-3/4';\n  }\n  if (position === 'top-right') {\n    return 'top-[100px] left-3/4';\n  }\n  if (position === 'top-center') {\n    return 'top-[100px] left-2/4';\n  }\n  return 'bottom-5 left-2/4';\n}\n", "import { useEffect } from 'react';\nimport { background, cn } from '../../styles/theme';\nimport { CloseSvg } from '../svg/closeSvg';\nimport { getToastPosition } from '../utils/getToastPosition';\n\nexport type ToastProps = {\n  className?: string;\n  durationMs?: number;\n  startTimeout?: boolean;\n  position: 'top-center' | 'top-right' | 'bottom-center' | 'bottom-right';\n  animation?: 'animate-enterRight' | 'animate-enterUp' | 'animate-enterDown';\n  isVisible: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n};\n\nconst defaultAnimationByPosition = {\n  'top-center': 'animate-enterDown',\n  'top-right': 'animate-enterRight',\n  'bottom-center': 'animate-enterUp',\n  'bottom-right': 'animate-enterRight',\n};\n\nexport function Toast({\n  className,\n  durationMs = 5000,\n  startTimeout = true,\n  position = 'bottom-center',\n  animation,\n  isVisible,\n  onClose,\n  children,\n}: ToastProps) {\n  const positionClass = getToastPosition(position);\n  const animationClass = animation ?? defaultAnimationByPosition[position];\n\n  useEffect(() => {\n    if (startTimeout) {\n      const timer = setTimeout(() => {\n        if (isVisible) {\n          onClose();\n        }\n      }, durationMs);\n\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n        }\n      };\n    }\n  }, [durationMs, isVisible, onClose, startTimeout]);\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn('-translate-x-2/4 fixed z-20', positionClass)}\n      data-testid=\"ockToastContainer\"\n    >\n      <div\n        className={cn(\n          background.default,\n          'flex items-center justify-between rounded-lg',\n          'p-2 shadow-[0px_8px_24px_0px_rgba(0,0,0,0.12)]',\n          animationClass,\n          className,\n        )}\n        data-testid=\"ockToast\"\n      >\n        <div className=\"flex items-center gap-4 p-2\">{children}</div>\n        <button\n          className=\"p-2\"\n          onClick={onClose}\n          type=\"button\"\n          data-testid=\"ockCloseButton\"\n        >\n          <CloseSvg />\n        </button>\n      </div>\n    </div>\n  );\n}\n", "import { useCallback } from 'react';\nimport { Toast } from '../../internal/components/Toast';\nimport type { TransactionToastReact } from '../types';\nimport { useTransactionContext } from './TransactionProvider';\nimport { TransactionToastAction } from './TransactionToastAction';\nimport { TransactionToastIcon } from './TransactionToastIcon';\nimport { TransactionToastLabel } from './TransactionToastLabel';\n\nexport function TransactionToast({\n  children,\n  className,\n  durationMs = 5000,\n  position = 'bottom-center',\n}: TransactionToastReact) {\n  const {\n    errorMessage,\n    isLoading,\n    isToastVisible,\n    receipt,\n    setIsToastVisible,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  const closeToast = useCallback(() => {\n    setIsToastVisible(false);\n  }, [setIsToastVisible]);\n\n  const isInProgress =\n    !receipt &&\n    !isLoading &&\n    !transactionHash &&\n    !errorMessage &&\n    !transactionId;\n\n  if (!isToastVisible || isInProgress) {\n    return null;\n  }\n\n  return (\n    <Toast\n      position={position}\n      className={className}\n      durationMs={durationMs}\n      isVisible={isToastVisible}\n      onClose={closeToast}\n      startTimeout={!!receipt || !!errorMessage}\n    >\n      {children ?? (\n        <>\n          <TransactionToastIcon />\n          <TransactionToastLabel />\n          <TransactionToastAction />\n        </>\n      )}\n    </Toast>\n  );\n}\n", "import { useEffect, useState } from 'react';\n\nexport function useIsMounted() {\n  const [isMounted, setIsMounted] = useState(false);\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  return isMounted;\n}\n", "import { useIsMounted } from '../../internal/hooks/useIsMounted';\nimport { useTheme } from '../../internal/hooks/useTheme';\nimport { cn } from '../../styles/theme';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport type { TransactionReact } from '../types';\nimport { TransactionButton } from './TransactionButton';\nimport { TransactionProvider } from './TransactionProvider';\nimport { TransactionToast } from './TransactionToast';\n\nexport function Transaction({\n  calls,\n  capabilities,\n  chainId,\n  className,\n  children,\n  contracts,\n  disabled = false,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n  resetAfter,\n}: TransactionReact) {\n  const isMounted = useIsMounted();\n  const componentTheme = useTheme();\n  const { chain } = useOnchainKit();\n\n  // prevents SSR hydration issue\n  if (!isMounted) {\n    return (\n      <div\n        className={cn(componentTheme, 'flex w-full flex-col gap-2', className)}\n      />\n    );\n  }\n\n  // If chainId is not provided,\n  // use the default chainId from the OnchainKit context\n  const accountChainId = chainId ? chainId : chain.id;\n\n  return (\n    <TransactionProvider\n      calls={calls}\n      capabilities={capabilities}\n      chainId={accountChainId}\n      contracts={contracts}\n      isSponsored={isSponsored}\n      onError={onError}\n      onStatus={onStatus}\n      onSuccess={onSuccess}\n      resetAfter={resetAfter}\n    >\n      <div\n        className={cn(componentTheme, 'flex w-full flex-col gap-2', className)}\n      >\n        {children ?? (\n          <>\n            <TransactionButton disabled={disabled} />\n            <TransactionToast />\n          </>\n        )}\n      </div>\n    </TransactionProvider>\n  );\n}\n", "import { useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { getChainExplorer } from '../../core/network/getChainExplorer';\nimport { cn, color, text } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionStatusAction() {\n  const { chainId, receipt, transactionHash, transactionId } =\n    useTransactionContext();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const accountChainId = chainId ?? useChainId();\n\n  const { showCallsStatus } = useShowCallsStatus();\n\n  return useMemo(() => {\n    const chainExplorer = getChainExplorer(accountChainId);\n\n    let actionElement: ReactNode = null;\n\n    // EOA will have txn hash\n    if (transactionHash) {\n      actionElement = (\n        <a\n          href={`${chainExplorer}/tx/${transactionHash}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </a>\n      );\n    }\n\n    // SW will have txn id\n    if (transactionId) {\n      actionElement = (\n        <button\n          onClick={() => showCallsStatus({ id: transactionId })}\n          type=\"button\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </button>\n      );\n    }\n\n    if (receipt) {\n      actionElement = null;\n    }\n\n    return { actionElement };\n  }, [\n    accountChainId,\n    receipt,\n    showCallsStatus,\n    transactionHash,\n    transactionId,\n  ]);\n}\n", "import { cn, text } from '../../styles/theme';\nimport { useGetTransactionStatusAction } from '../hooks/useGetTransactionStatusAction';\nimport type { TransactionStatusActionReact } from '../types';\n\nexport function TransactionStatusAction({\n  className,\n}: TransactionStatusActionReact) {\n  const { actionElement } = useGetTransactionStatusAction();\n\n  return (\n    <div className={cn(text.label2, 'min-w-[70px]', className)}>\n      {actionElement}\n    </div>\n  );\n}\n", "import { useMemo } from 'react';\nimport { color } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionStatusLabel() {\n  const {\n    errorMessage,\n    isLoading,\n    receipt,\n    lifecycleStatus,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n  // user confirmed in wallet, txn in progress\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  // user started txn and needs to confirm in wallet\n  const isPending = lifecycleStatus.statusName === 'transactionPending';\n\n  // waiting for calls or contracts promise to resolve\n  const isBuildingTransaction =\n    lifecycleStatus.statusName === 'buildingTransaction';\n\n  return useMemo(() => {\n    let label = '';\n    let labelClassName: string = color.foregroundMuted;\n\n    if (isBuildingTransaction) {\n      label = 'Building transaction...';\n    }\n\n    if (isPending) {\n      label = 'Confirm in wallet.';\n    }\n\n    if (isInProgress) {\n      label = 'Transaction in progress...';\n    }\n\n    if (receipt) {\n      label = 'Successful';\n    }\n\n    if (errorMessage) {\n      label = errorMessage;\n      labelClassName = color.error;\n    }\n\n    return { label, labelClassName };\n  }, [errorMessage, isBuildingTransaction, isInProgress, isPending, receipt]);\n}\n", "import { cn, text } from '../../styles/theme';\nimport { useGetTransactionStatusLabel } from '../hooks/useGetTransactionStatusLabel';\nimport type { TransactionStatusLabelReact } from '../types';\n\nexport function TransactionStatusLabel({\n  className,\n}: TransactionStatusLabelReact) {\n  const { label, labelClassName } = useGetTransactionStatusLabel();\n\n  return (\n    <div className={cn(text.label2, className)}>\n      <p className={labelClassName}>{label}</p>\n    </div>\n  );\n}\n", "import { cn } from '../../styles/theme';\nimport type { TransactionStatusReact } from '../types';\nimport { TransactionStatusAction } from './TransactionStatusAction';\nimport { TransactionStatusLabel } from './TransactionStatusLabel';\n\nexport function TransactionStatus({\n  children,\n  className,\n}: TransactionStatusReact) {\n  return (\n    <div className={cn('flex justify-between', className)}>\n      {children ?? (\n        <>\n          <TransactionStatusLabel />\n          <TransactionStatusAction />\n        </>\n      )}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["useCallsStatus", "useCallsStatusWagmi", "_a", "useSendCallWagmi", "useSendCalls", "useSendCallsWagmi", "data", "call", "useSendCalls", "useCallsStatus", "switchChain", "errorMessage", "successText", "errorText", "pendingContent", "_a", "showCallsStatus", "icon", "showCallsStatus"]
}
