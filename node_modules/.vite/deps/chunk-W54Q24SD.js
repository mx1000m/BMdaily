import {
  from,
  getSelector
} from "./chunk-PD5WAEH4.js";
import {
  getContractError
} from "./chunk-TE2KEVK5.js";
import {
  BaseError,
  InvalidAddressError,
  decodeErrorResult,
  isAddress
} from "./chunk-IR6OLA2F.js";

// node_modules/viem/_esm/accounts/toAccount.js
function toAccount(source) {
  if (typeof source === "string") {
    if (!isAddress(source, { strict: false }))
      throw new InvalidAddressError({ address: source });
    return {
      address: source,
      type: "json-rpc"
    };
  }
  if (!isAddress(source.address, { strict: false }))
    throw new InvalidAddressError({ address: source.address });
  return {
    address: source.address,
    nonceManager: source.nonceManager,
    sign: source.sign,
    signAuthorization: source.signAuthorization,
    signMessage: source.signMessage,
    signTransaction: source.signTransaction,
    signTypedData: source.signTypedData,
    source: "custom",
    type: "local"
  };
}

// node_modules/viem/_esm/experimental/erc7821/errors.js
var FunctionSelectorNotRecognizedError = class extends BaseError {
  constructor() {
    super("Function is not recognized.", {
      metaMessages: [
        "This could be due to any of the following:",
        "  - The contract does not have the function,",
        "  - The address is not a contract."
      ],
      name: "FunctionSelectorNotRecognizedError"
    });
  }
};

// node_modules/viem/_esm/experimental/erc7821/utils/getExecuteError.js
function getExecuteError(e, parameters) {
  const error = e.walk((e2) => "data" in e2);
  if (!(error == null ? void 0 : error.data))
    return e;
  if (error.data === getSelector(from("error FnSelectorNotRecognized()")))
    return new FunctionSelectorNotRecognizedError();
  let matched = null;
  for (const c of parameters.calls) {
    const call = c;
    if (!call.abi)
      continue;
    try {
      const matches = Boolean(decodeErrorResult({
        abi: call.abi,
        data: error.data
      }));
      if (!matches)
        continue;
      matched = call;
    } catch {
    }
  }
  if (matched)
    return getContractError(error, {
      abi: matched.abi,
      address: matched.to,
      args: matched.args,
      functionName: matched.functionName
    });
  return e;
}

// node_modules/viem/_esm/experimental/erc7821/constants.js
var executionMode = {
  default: "0x0100000000000000000000000000000000000000000000000000000000000000",
  opData: "0x0100000000007821000100000000000000000000000000000000000000000000",
  batchOfBatches: "0x0100000000007821000200000000000000000000000000000000000000000000"
};

// node_modules/viem/_esm/experimental/erc7821/actions/supportsExecutionMode.js
var toSerializedMode = {
  default: executionMode.default,
  opData: executionMode.opData,
  batchOfBatches: executionMode.batchOfBatches
};

export {
  toAccount,
  getExecuteError
};
//# sourceMappingURL=chunk-W54Q24SD.js.map
